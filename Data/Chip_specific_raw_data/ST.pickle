(lp0
(dp1
S'Errata ID'
p2
S''
p3
sS'Workaround'
p4
S' This requires bit 18 (instruction TCM order bit) in the configuration control register of the ARM966E-S core to be set. This can be done by the following assembler code: MOV R0, #0x40000 MCR P15,0x1,R0,C15,C1,0 When set, the write and read to the Flash bank are performed in the order generated by the ARM966-ES core.This ensures that writes are committed to the Flash memory before any subsequent read. This will not be fixed in future silicon revisions. '
p5
sS'Fix Status'
p6
g3
sS'Masks Affected'
p7
g3
sS'Details'
p8
S'Description of limitation Status register bit 7 (ready bit) does not reflect the correct status when it is read immediately after the CPU issues a Flash memory program or erase command. '
p9
sS'Core'
p10
S'ARM9'
p11
sS'Criticality'
p12
g3
sS'Chip'
p13
S'STR91xFA'
p14
sS'Revisions Impacted'
p15
g3
sS'Module'
p16
g3
sS'Failure'
p17
S'2.1 Flash memory status register bit 7 '
p18
sS'Manufacturer'
p19
S'ST'
p20
sa(dp21
g2
g3
sg4
S' Firmware must change the values if desired. This will not be fixed in future silicon revisions. '
p22
sg6
g3
sg7
g3
sg8
S'Description of limitation At power up, the Flash protection level 1 register is reset to 0FFFh (all Flash sectors are protected). A warm reset does not reset the register. '
p23
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.2 Flash memory sector protection '
p24
sg19
g20
sa(dp25
g2
g3
sg4
S' using revision G Do not remap the banks after IAP (keep secondary bank at address 0x0), and in the secondary bank redirect ARM interrupts to be handled in the primary bank. This limitation is fixed in revision H devices by clearing all FMI registers (including bank base address and bank size) after a system reset. '
p26
sg6
g3
sg7
g3
sg8
S'Description of limitation in revision G There are two independent Flash memory banks (primary and secondary) that allow read-while-write capability from one bank to the other, enabling in-application programming (IAP) of the primary bank while executing code from the secondary bank. After IAP has upgraded firmware in the primary bank, the bootloader code in the secondary bank should remap the banks by writing to FMI registers FMI_BBADR and FMI_NBBADR in order to have the primary bank start at address 0x0, which allows interrupt handlers to reside in the application code primary bank instead of interrupts being handled by bootloader code in the secondary bank. There are two forms of reset in the STR91xFA: A global reset (from power-up or voltage drop-out) that clears all functions in the device, and a system reset (from the reset input pin, watchdog, or JTAG reset command) that clears all but a few configuration registers. 4/16  STR91xFA Silicon limitations and fixes Silicon limitation The remapping operation is possible. However, when a system reset occurs after the remapping, the application hangs because the FMI_BBADR and FMI_NBBADR registers which define bank locations are not cleared by the system reset, while the FMI_CR register which controls the chip select enable of the non boot bank are cleared by the system reset. '
p27
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.3 Flash memory remapping '
p28
sg19
g20
sa(dp29
g2
g3
sg4
S's For the first case, three workarounds are proposed: 1. Do not use the last 8 x 32-bit words of a Flash bank for storing code and use it instead to store data constants (this can be configured by the linker to specify the last zone). 2. If the application firmware is larger than one bank in size, ensure that before reaching the last 8 x 32-bit words of one bank, application code must jump (using LDR, or a branch) to an address forced by the linker to a location in the other bank. 3. Disable the PFQ block before executing code stored across a bank boundary. For the second case, the workaround is as follows: Disable the PFQ block before reading (data/constants) from a bank other than the bank from which code is fetched and enable it again after completing the read operations.  5/16 Silicon limitations and fixes STR91xFA '
p30
sg6
g3
sg7
g3
sg8
S'Description of limitation In either of the following two conditions, the CPU may freeze or generate an exception: 1. When the two banks (Bank0 and Bank1) are configured at contiguous addresses in the STR91xFA address map and if a code sequence is stored and then fetched by the CPU across this boundary, 2. When data is read from a bank other than the bank fetched by the CPU for execution. This will not be fixed in future silicon revisions. '
p31
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.4 Flash fetch/read across banks '
p32
sg19
g20
sa(dp33
g2
g3
sg4
S' To ensure that internal Flash programming and CUI registers (command user interface) programmings are performed correctly, configure the frequency of FMICLK to RCLK/2 during these operations. '
p34
sg6
g3
sg7
g3
sg8
S'Description of limitation When programming the internal Flash or the Flash registers with an FMICLK frequency of 96 MHz, either using read-while-write operations or executing from the internal SRAM, for some STR91xFA slow parts that may be seen in the field, some data are not properly written. This issue is due to a limitation in the Flash command interface that affects Flash write operations (such as program or erase). '
p35
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.5 Flash frequency limitation when programming '
p36
sg19
g20
sa(dp37
g2
g3
sg4
S' When booting up an emulator, do not select the automatic configuration option. Instead, configure the ETM to be a 4-bit port manually. This limitation will not be fixed in future silicon revisions. '
p38
sg6
g3
sg7
g3
sg8
S'Description of limitation By default, the ETM9 interface in the STR91xFA core is an 8-bit medium size model as defined by ARM Ltd. When an emulator tool boots up and performs an automatic configuration on the ETM (ETM sniffers), the configuration register always sends back the 8-bit model status. However, in order to reduce the number of I/O pins required for debugging, the ETM trace data port is implemented as a 4-bit port. When polled, the 8-bit status provided by the configuration register is incorrect. '
p39
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.6 ETM (embedded trace module) configuration '
p40
sg19
g20
sa(dp41
g2
g3
sg4
S' Whenever the SCU_CLKCNTR register is modified, the EMI must be subsequently reset by writing bit 6 (RST_EMI) of the SCU_PRR0 register to 0 and setting it again just before configuring and using the EMI. 6/16  STR91xFA Silicon limitations and fixes 2.7.2 Address boundary limitation in 16-bit asynchronous or synchronous modes Description of limitation When accessing the external memory in 16-bit mode, the address must always be aligned to half word (16 bit) or word (32 bit) boundary. The memory address must consequently be an even address, and reading or writing from/to an odd address location may result in incorrect data. This limitation applies to data memory space only, as code fetch is always aligned to word boundary. Workaround All data must be stored at even address location. 2.7.3 Write signal configuration in 16-bit synchronous mode Description of limitation (applies only to BGA144 devices) There are two sets of write control signals for 16-bit write bus cycle: 1. EMI_WRLn, EMI_WRHn 2. EMI_WEn, EMI_UBn, EMI_LBn The 2nd set of signals is activated by setting bit 2 in the SCU_GPIOEMI register. When configured in 16-bit synchronous mode, the EMI bus works only with the 2nd set of write signals. The 1st set of signal results in incorrect write signal timings. Workaround When using EMI in 16-bit synchronous mode, choose a memory device which accepts write enable (EMI_WEn), EMI_UBn and EMI_LBn signals. If these signals are not available on the memory, it is recommended to operate in asynchronous mode. '
p42
sg6
g3
sg7
g3
sg8
S'Description of limitation When the EMI clock is configured with a ratio of 2, modifying SCU_CLKCNTR register may cause incorrect EMI write cycles to occur when the EMI is used. This is due to the de-synchronization of the two clock state machines feeding the EMI when the EMI clock ratio is configured with a ratio of 2. '
p43
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.7 EMI bus limitations 2.7.1 Impact of SCU_CLKCNTR register modification on EMI operation with clock ratio of 2 '
p44
sg19
g20
sa(dp45
g2
g3
sg4
S' using revision G A limited workaround may be implemented to save around 120 \xc2\xb5A by using firmware to put the USB transceiver into Suspend mode (bit2, LP_MODE in the USB_CNTR register). This allows reducing Sleep mode current on VDDQ pins to around 380 \xc2\xb5A.  7/16 Silicon limitations and fixes STR91xFA Sleep mode current consumption on VDDQ pins is reduced to less than 10 \xc2\xb5A on revision H silicon devices. '
p46
sg6
g3
sg7
g3
sg8
S'Description of limitation When the STR91xFA enters Sleep mode, the current drawn from the CPU core voltage (VDD) and from the I/O supply voltage (VDDQ) should drop to a very low value. ISLEEP current on VDD pins correctly drops to as low as 50 \xc2\xb5A at 25 \xc2\xb0C. However ISLEEP current on the VDDQ pins drops to around 500 \xc2\xb5A at 25 \xc2\xb0C while it should be less than 10 \xc2\xb5A. '
p47
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.8 Sleep mode current (ISLEEP) on VDDQ pins '
p48
sg19
g20
sa(dp49
g2
g3
sg4
S's Workaround solutions include: 1. Use the 32 kHz RTC clock as the clock source for sleep mode: a) Select the RTC clock as the CPU clock source prior entering sleep mode. b) The CPU wakes up following any of the three wakeup events and waits for the crystal to start oscillation. A crystal startup time is about 1.5 ms typical. c) After the crystal wakes up, the CPU waits for a tWAIT time before the first code is fetched from Flash memory. The software can then change the CPU clock source back to the OSC or PLL clock. The duration of tWAIT depends on the crystal frequency. tWAIT equals 50 \xc2\xb5s at 25 MHz and 312 \xc2\xb5s at 4 MHz. 2. Instead of a crystal, use an oscillator as STR91xFA clock source. This limitation will not be fixed in future silicon revisions '
p50
sg6
g3
sg7
g3
sg8
S'Description of limitation After the CPU enters sleep mode, it can be woken up by: 1. External interrupt 2. RTC/USB interrupt 3. External reset When an oscillator chip is used as the clock source for the STR91xFA, the CPU wakes up from sleep mode following any of the above three input events. If a crystal is used as the clock source, the crystal is disabled in sleep mode to save power consumption. When a wakeup event occurs, the crystal does not recover fast enough and the CPU hangs. '
p51
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.9 Waking up from sleep mode '
p52
sg19
g20
sa(dp53
g2
g3
sg4
S's In order to avoid executing any valid instructions after setting the idle or sleep bit and before entering the mode, it is mandatory to execute a certain number of dummy instructions after setting the SCU_PWRMNG register. The number of dummy instructions to be executed is given by the following formula: No_dummy_instr = (f \xe2\x81\x84 f ) \xc3\x97 12 CPUCLK OSC Where fCPUCLK is the CPU core clock frequency and fOSC is the oscillator frequency. The worst scenario is obtained when the core works from the PLL maximum frequency (96 MHz) with an 4 MHz crystal or oscillator connected to the X1_CPU input. In this case 288 dummy instructions are needed. Note: If (fCPUCLK/ fOSC) is less than 1, the number of dummy instruction is always 3. Random external/internal wakeup events or interrupts may freeze the STR91xFA when occurring during the execution of these dummy instructions. In this case, only a reset event can wake up the CPU. This limitation will not be fixed in future silicon revisions 2.10.2 Time required to enter sleep mode Description of limitation After the mode bit is set in the SCU_PWRMNG register, the power management unit requires a period of time (tSLEEP) to switch off all CPU and peripheral clocks safely before entering sleep mode. A very slow peripheral clock results in a long switch off time. The tSLEEP time required to enter sleep mode depends on the oscillator frequency, on the slowest peripheral clock frequency, and on the CPU clock frequency. If a wakeup event occurs during tSLEEP, it is ignored and the STR91xFA does not exit from sleep mode. tSLEEP is given by the following formula: t = 17 \xc3\x97 t_OSC + 14 \xc3\x97 t_Slowest_IP_CLK + 6 \xc3\x97 t_CPUCLK SLEEP Where t_OSC is the oscillator frequency, t_Slowest_IP_CLK the slowest peripheral clock frequency, and t_CPUCLK the CPU clock frequency. Example \xe2\x97\x8f CPU running on RTC clock before entering sleep mode (fCPUCLK = 32 kHz) (see Section 2.9). \xe2\x97\x8f t_OSC = 40 ns (fOSC = 25 MHz) \xe2\x97\x8f t_CPUCLK = t_RTC = 31,250 ns (fCPUCLK = 32 kHz) \xe2\x97\x8f t_Slowest_IP_CLK = 2*31,250 ns assuming all clock dividers are set to 1 (default state) except for APB clock divided which is set to 2, the slowest peripheral clock frequency is then fCPUCLK/2. Then, the value of tSLEEP is: t = 17 \xc3\x97 40 + 14 \xc3\x97 2 \xc3\x97 31, 250 + 6 \xc3\x97 31, 250 1.06 \xe2\x88\xbc ms SLEEP  9/16 Silicon limitations and fixes STR91xFA Workaround To prevent random external wakeup events from occurring while the device is entering sleep mode (during tSLEEP), the maximum time required by the application to enter sleep mode must be taken into account. This limitation will not be fixed in future silicon revisions. '
p54
sg6
g3
sg7
g3
sg8
S'Description of limitation Once the idle or sleep mode are entered by writing the PWR_MODE[2:0] bits in the SCU_PWRMNG register, it takes about 12 fOSC cycles for the device to stop the execution. In addition, if a wakeup event or an interrupt (external or internal coming from peripherals) occurs during this period while entering idle, the internal low power state machine is frozen and the STR91xFA hangs. In this case, only a reset event can wake up the device. 8/16  STR91xFA Silicon limitations and fixes '
p55
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.10 Sleep and Idle mode requirements 2.10.1 Code execution after setting the sleep or idle mode bit '
p56
sg19
g20
sa(dp57
g2
g3
sg4
S's Some possible software workarounds can be implemented depending on the application and the impact of the limitation. A hardware workaround, feasible in all cases, is to implement an external Schmitt trigger to act as a noise filter. '
p58
sg6
g3
sg7
g3
sg8
S'Description of limitation None of the STR9 general inputs have hysteresis which means they have no Schmitt trigger. Simulation in typical conditions (3.3 V, ambient temperature, typical processing) shows that approximately 25 mV noise is enough to provide unexpected glitches in the core when the 1 kHz pad signaling crosses the input buffer threshold. The slower the input signaling frequency is, the greater this limitation. '
p59
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.11 Noise sensitivity of GPIO ports '
p60
sg19
g20
sa(dp61
g2
g3
sg4
S' Limit the voltage applied to the 5 V-tolerant I/O pins to 5 V to limit the leakage current. 10/16  STR91xFA Silicon limitations and fixes '
p62
sg6
g3
sg7
g3
sg8
S'Description of limitation A high leakage current is observed when applying 5.5 V on 5 V-tolerant I/O pins. This leakage does not dependent on VDDQ, and increases with the temperature. This high leakage is distributed between the different pins when using a 5.5 V supply voltage. If the application hardware has 10 pins connected to 5.5 V, the leakage current is not multiplied by 10, but distributed between the 10 pins. This limitation will not be fixed in future silicon revisions. '
p63
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.12 High leakage on GPIO ports at 5.5 V '
p64
sg19
g20
sa(dp65
g2
g3
sg4
S' Instead of clearing the ADC interrupt flag at the end of the ISR, clear the flag when ISR is entered. This limitation will not be fixed in future silicon revisions. '
p66
sg6
g3
sg7
g3
sg8
S'Description of limitation The ADC generates an end of conversion (EVC) or an analog watchdog (AWD) interrupt when enabled. Before returning from serving the interrupt, the ISR typically clears the interrupt by setting the corresponding EVC or AWD flag bit in the ADC_CR register to \xe2\x80\x980\xe2\x80\x99. The ADC clock is used to clear the interrupt flags. The time taken to clear the flags is longer when the ADC runs on a slow clock. The CPU may return from ISR before the interrupt flag has been cleared. Since the interrupt controller input is level sensitive, the CPU sees immediately if another interrupt is pending. '
p67
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.13 ADC interrupt generation '
p68
sg19
g20
sa(dp69
g2
g3
sg4
S' on revision G In single conversion mode, there is no workaround to exceed 500 Ksps conversion rate with external trigger or timer trigger, and no workaround to reduce jitter from one sample to the next. In continuous and scan conversion modes there is no workaround to reduce delay of the first conversion. To eliminate jitter, a new conversion mode started by fast trigger has been added in silicon revision H (refer to STR91xFA datasheet and reference manual). It allows each conversion to be completed in 16 ADC clocks after it has been triggered by external ADC trigger or internal timer event. A minimum conversion rate of 1.2 Msps can be achieved on a single channel. In single and scan mode, the time to complete the first conversion is reduced to the range of 20 to 32 clocks (down from 36 to 48 clocks) after a trigger event allowing continuous conversion. In this case, the maximum rate on subsequent continuous conversions remains 1.5 Msps on a single channel.  11/16 Silicon limitations and fixes STR91xFA '
p70
sg6
g3
sg7
g3
sg8
S'Description of limitation When the ADC unit is in single conversion mode, the time to complete the conversion varies between 36 and 48 ADC clock periods after the conversion is initiated by an external ADC trigger, a timer trigger, or a firmware command. This limits the maximum ADC conversion rate to 500,000 samples per second for a single channel using an external trigger. This situation also introduces a "jitter" of as many as 12 ADC clocks from one completed conversion to the next. When the ADC unit is in continuous and scan conversion modes, the time to complete the first conversion varies between 36 and 48 ADC clocks like single conversion mode, but subsequent conversions complete every 16 ADC clocks producing a maximum ADC conversion rate of 1,500,000 samples per second for a single channel. '
p71
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.14 ADC conversion time and external trigger mode '
p72
sg19
g20
sa(dp73
g2
g3
sg4
S' Instead of using scan mode with continuous mode, the application has to select scan mode in single mode. Each conversion can be started by an internal trigger (PWM) for the required number of channels. The conversion time is deterministic in fast trigger mode. This is a new feature available in revision H silicon (see STR91xFA datasheet and reference manual). It can be computed using the following formula: f < 1 \xe2\x81\x84 (nb_channels \xc3\x97 16 \xe2\x81\x84 f ) TRIGGER ADC '
p74
sg6
g3
sg7
g3
sg8
S'Description of limitation only in revision H ADC scan and continuous mode cannot be used together on revision H silicon. The first conversion is performed, but the next channel is not selected, so the end of conversion never occurs. '
p75
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.15 ADC scan and continuous modes '
p76
sg19
g20
sa(dp77
g2
g3
sg4
S' A delay max. of 16 ADC clocks between the channel selection and the conversion start should be enough to prevent this effect. A generic dummy loop (equivalent to 16 ADC clocks) is recommended. This workaround is only needed in single mode with a channel selection change. '
p78
sg6
g3
sg7
g3
sg8
S'Description of limitation only in rev H If both channel selection and start conversion bits (SC and STR bits) are written at the same time, it may occur that the ADC sampling/conversion is performed on the previous selected channel. '
p79
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.16 ADC single mode and channel selection '
p80
sg19
g20
sa(dp81
g2
g3
sg4
S" Note: This workaround is taken from the ARM prime cell vectored interrupt controller (PL190) errata notice. For already existing software that services daisy-chained nested interrupts, a possible software workaround is to branch to the address provided by the VIC1 VAR register. This ensures that the correct ISR is serviced. 0x18 LDR pc, [VIC0_VAR] ; VIC0 VAR read ; daisy_chained_vector_handler: STMFD r13!, {r12-r14} LDR r12, [VIC1_VAR] ; Read VIC1 VAR and update PC, ; VIC1 priority hardware is updated LDR PC, [r12, #12] ; Processor branches to the highest priority ; daisy chained ISR and skips ; the preamble(+12) Note: The value, 12, used in instruction LDR PC, [r12, #12] is only specific to the example code given here. The offset #12 is dependent on the system's interrupt stacking preamble code size. "
p82
sg6
g3
sg7
g3
sg8
S"Description of limitation For daisy-chained interrupts, if only the VAR from one VIC is read, it does not update the hardware priority in the other VIC. This means the daisy chained interrupt controller doesn't realize the interrupt is being serviced and keeps the interrupt request active. For daisy-chained interrupts the processor must read the VAR register from both interrupt controllers and branch to the addresses provided. However, the address provided by reading the daisy-chained VAR register must be manipulated to skip the interrupt preamble. If two daisy chained interrupts occur soon after each other and the daisy chained VAR register address isn't branched to, the interrupt controller priority logic may be updated incorrectly. This may cause a low priority interrupt to be missed. 12/16  STR91xFA Silicon limitations and fixes "
p83
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.17 Daisy chained interrupt controller VIC1 hardware priority management limitation '
p84
sg19
g20
sa(dp85
g2
g3
sg4
S' To ensure that the application use of the above bits is well supported, a new Flash configuration specification has been put in place: Bits 12:11 WSTATES[1:0]: Wait states These bits define the number of wait states inserted in asynchronous read access. 00: 1 wait state (default) 01: 2 wait states 10: 3 wait states Note: Wait states are inserted only for non-bursting Flash read bus cycles. One wait state is required for a Flash memory interface (FMI) bus clock frequency < 66 MHz. Two wait states are required for an FMI bus clock frequency \xe2\x89\xa5 66 MHz. Bit 4 BUSCFG: Flash bus clock configuration This bit selects the FMI Flash bus clock configuration. 0: BUSCFG disabled (default) 1: BUSCFG enabled Note: The BUSCFG bit must be set for a frequency of: \xe2\x89\xa5 48 MHz (with 1 wait state) \xe2\x89\xa5 66 MHz (with 2 wait state).'
p86
sg6
g3
sg7
g3
sg8
S'Description of limitation Using wait state insertion bits and/or the Flash bus clock bit under some specific configurations and/or combinations with respect to the Flash programming manual, may cause the device to be used outside its operating conditions. '
p87
sg10
g11
sg12
g3
sg13
g14
sg15
g3
sg16
g3
sg17
S'2.18 Flash configuration register bits correction '
p88
sg19
g20
sa.