(lp0
(lp1
(dp2
S'Core'
p3
S' Cortex-A8'
p4
sS'Workaround'
p5
S' :    Make only aligned accesses to the AIPS internal registers.    '
p6
sS'Chip'
p7
S' '
p8
sS'Fix Status'
p9
S' :    No fix scheduled    '
p10
sS'Revisions Impacted'
p11
S''
p12
sS'Failure'
p13
S' 11136      AIPS: Unaligned access causes abort on writes to the internal registers    '
p14
sS'Details'
p15
S' :    Unaligned access to AIPS can be driven high by SAHARA, DAP, and FEC. If they access the AIPS    internal registers during an unaligned access, an ABORT occurs.     Projected ImpactJEEHEHRECONSTRUCT:    Unaligned accesses to the AIPS internal registers fail.    '
p16
sS'Manufacturer'
p17
S' NXP'
p18
sa(dp19
g3
S' Cortex-A8'
p20
sg5
S' :    The erratum occurs only for the shared device memory regions and not for the non-shared device memory regions. Therefore, this problem can be worked around by using the remap registers to remap all the shared device transactions to the non-shared device. The only difference between the shared device and the non-shared device is the attributes produced for the transaction on the AXI interface. Therefore, the user does not experience any impact in terms of performance from this workaround.    Another possible use of the TEX remap is to map the shared device regions to the strongly ordered transactions. This second remapping option is less desirable as it affects the performance, as strongly ordered transactions are not buffered.    The following code sequence is required to setup and enable the TEX remap. This should be done before enabling the MMU.    ; Setup PRRR so device is always mapped to non-shared    MRC p15, 0, r0, c10, c2, 0; Read Primary Region Remap Register BIC r0,#3<<16    MCR p15, 0, r0, c10, c2, 0; Write Primary Region Remap Register    ; Enable TEX remap    MRC p15, 0, r0, c1, c0, 0; Read Control Register    ORR r0,r0,#1<<28    MCR p15, 0, r0, c1, c0, 0; Write Control Register    Another valid workaround is to place a data memory barrier (DMB) between all the memory accesses to the device regions, where ordering is required between a store and a subsequent load to a different physical address.    '
p21
sg7
S' '
p22
sg9
S' :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    9'
p23
sg11
g12
sg13
S' 09831      ARM: Load and Store operations on the shared device memory regions may not complete in program order    '
p24
sg15
S' :    If a sequence of load and store operations are performed to different address locations in a memory region that is marked as shared device, then a load can incorrectly bypass a store.    The issue is reported by ARM, erratum ID 709718, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the load address and store address are mapped to access the memory region of the same device, and the device relies on memory operations to occur in program order, then this device may not operate as intended.    '
p25
sg17
S' NXP'
p26
sa(dp27
g3
S' Cortex-A8'
p28
sg5
S' :    If a workaround for this erratum is desired, there are two options. The first simple option is to add a NOP immediately following the MCR register write in any case where encountering this erratum may be a concern. By adding a single NOP, the minimum required cycle window is guaranteed and the erratum does not occur.    The second option is to set bit 16 in the CP15 Auxiliary Control Register. This causes a pipeline flush on every write to the CP15 register and ensures that the RAW hazard condition does not 1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    11'
p29
sg7
S' '
p30
sg9
g12
sg11
g12
sg13
S' 11132      ARM: A RAW hazard on certain CP15 registers can result in a stale register read    '
p31
sg15
S' :    Under certain conditions, a sequence of instructions where an MCR instruction that writes a CP15    register is closely followed by an MRC that reads the same register, are executed such that the RAW hazard is not detected and the MRC reads the old value of the register. This scenario can only occur for accesses to one of the following four CP15 registers:    \xe2\x80\xa2 CacheSizeSelection Register    \xe2\x80\xa2 Thread and ProcessID user read/write    \xe2\x80\xa2 Thread and ProcessID user read only    \xe2\x80\xa2 Thread and ProcessID privilege only    These registers are both readable and writable and have been optimized to execute in a single cycle.    Furthermore, this scenario occurs only when a specific sequence of instructions is executed between the MCR and the MRC. The sequence must meet two criteria:    \xe2\x80\xa2 It must take less than three cycles to execute    \xe2\x80\xa2 It must have one of the instructions in the following list:    \xe2\x80\x94 ARM PLD with [Rn, -Rm, <shift>] addressing mode    \xe2\x80\x94 ARM or Thumb PLD with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    \xe2\x80\x94 Thumb or ThumbEE load/store instruction with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    \xe2\x80\x94 Thumb TBB instruction    The issue is reported by ARM, erratum ID 588115, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, the old stale value of the register is read rather than the newly written value, in which case the system software may appear to behave incorrectly. However, the usage model for such a software sequence is unclear, and hence the likelihood of encountering it in practice is very low, especially considering the requirement of the second unrelated instruction that must also fall between the MCR and the MRC.    '
p32
sg17
S' NXP'
p33
sa(dp34
g3
S' Cortex-A8'
p35
sg5
S' :    As the processor directly does not make use of ARPROT[0], any workaround would be specific to the device that makes use of the values broadcast on ARPROT[0]. The most likely usage would be some form of system memory protection unit. If such protection unit exists, it may need to filter out any access to the page tables from the address space that is protected to operate properly. This implies that the external protection unit cannot provide additional protection for the page tables.    For example, the page table cannot be inserted in a Secure RAM which cannot be accessed in User mode, as in this case, an additional protection is added beside the MMU. Alternatively, the CSU    can be configured to transform User access to Privileged on addresses used by PAGE TABLE.    '
p36
sg7
S' '
p37
sg9
S' :    No fix scheduled    '
p38
sg11
g12
sg13
S' 11141      ARM: ARPROT[0] is incorrectly set to indicate a USER    transaction for memory accesses generated from user12SPACEJEEHEHtablewalks      '
p39
sg15
S' :      All memory transactions performed as part of a tablewalk should be considered Privileged, even in the User mode. However, Cortex-A8 incorrectly marks memory transactions generated from tablewalks performed in User mode as the user transactions on the AXI bus. This indication is given by the ARPROT[0] signal, which is set to zero during the transaction.    The conditions are as follows:    \xe2\x80\xa2 Cortex-A8 must be in user mode    \xe2\x80\xa2 A memory transaction (instruction or data) misses in the TLB and causes a tablewalk    \xe2\x80\xa2 The address for the page table entry is not found in the L2 cache, resulting in an external memory request    \xe2\x80\xa2 This erratum occurs when APROT[0] incorrectly indicates a user transaction for this memory    request on the AXI bus.    The issue is reported by ARM, erratum ID 488063.     Projected ImpactJEEHEHRECONSTRUCT:    As the values broadcast on ARPROT[0] are completely transparent to the software, the implications for this erratum are only on a specific subset of the processor systems, specifically for a system that includes some form of system level memory protection unit, that uses the ARPROT    bits to determine if a memory request can be allowed. For any system that does include such a unit, that unit may report false errors on page table accesses due to this erratum.    '
p40
sg17
S' NXP'
p41
sa(dp42
g3
S' Cortex-A8'
p43
sg5
S' :    When transitioning security state, the secure monitor software should save the current CSSELR    value (corresponding to the security state the processor is transitioning out of) and restore the previously saved CSSELR value (corresponding to the security state the processor is transitioning into).    '
p44
sg7
S' '
p45
sg9
S' :    No fix scheduled    '
p46
sg11
g12
sg13
S' 11135      ARM: C15 Cache Selection Register (CSSELR) is not banked '
p47
sg15
S' :    ARMv7 architecture specifies that the CSSELR should be banked between Secure and Non-secure states. Cortex-A8 does not currently bank this register.    The conditions are as follows:    \xe2\x80\xa2 The system should have an active process in secure state and an active process in non-secure state at the same time.    \xe2\x80\xa2 The system should perform cache maintenance operations in both secure and non-secure processes.    The issue is reported by ARM, erratum ID 485963, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    A cache cleaning sequence that reads the CSSELR may not work as expected. The published sequence for cleaning the entire cache (see ARM Architecture Reference Manual) includes setting the CSSELR followed by a read from the selected Cache Size ID register (CCSIDR). If the non-secure side executes this sequence, and is encountered by a secure interrupt between the setting of the CSSELR and the reading of the selected CCSIDR, then there is a possibility that the secure side may also use the CSSELR. On returning to the non-secure side, the CSSELR value may have changed, which makes the cache cleaning sequence to malfunction. Similarly, a non-secure interrupt can cause a secure cache cleaning sequence to malfunction.    '
p48
sg17
S' NXP'
p49
sa(dp50
g3
S' Cortex-A8'
p51
sg5
S' :    There are two feasible workarounds that can be used for this erratum. The first workaround is to place a DMB or DSB barrier at the end of each cache clean routine or preload engine memory clean sequence. This barrier operation ensures that the cleaned line goes out and is seen by main memory before the store is executed and therefore guarantees that the clean is done correctly and memory contains the correct final value.    This workaround is consistent with the ARM recommended practice for ending the maintenance routine. The above workaround is convenient to implement and should work for all expected usage models. However, there is still the possibility that an interrupt can be taken during the clean routine, and the interrupt handler can perform a store operation to the line just cleaned, allowing for the scenario which can lead to the erratum.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    16    Freescale Semiconductor11143      Another workaround that avoids even the case mentioned above, is to convert all Clean by MVA to PoC operations to Clean and Invalidate by MVA to PoC as described in the code sequence as follows:    \xe2\x80\xa2 Replace all uses of: MCR p15, 0, <Rn>, c7, c10, 1;    \xe2\x80\xa2 Clean Data cache line by MVA to PoC with this instruction: MCR p15, 0, <Rn>, c7, c14, 1;    \xe2\x80\xa2 Clean and Invalidate cache line by MVA to PoC.    There is no Preload Engine equivalent for the second workaround option as it is not possible to configure the preload engine to perform a clean and invalidate operation. Therefore, if there are concerns that the DSB based workaround is insufficient, then it is advisable to not use the Preload Engine for cleaning memory regions. The preload engine can be configured such that it is not accessible at user/privilege and nonsecure/secure level of granularity.    For more information on Preload Engine configurability, see Cortex-A8 Technical Reference Manual.    '
p52
sg7
S' '
p53
sg9
S' :    No fix scheduled    '
p54
sg11
g12
sg13
S' 11143      ARM: Cache clean memory ops generated by the Preload Engine or Clean by MVA to PoC instructions may corrupt the memory '
p55
sg15
S' :    When a Clean to Point of Coherency (PoC) by MVA operation is performed, or the Preload Engine is programmed to clean a region of memory from the L2 cache, a cache line from that region can be corrupted with a stale copy of memory, and a memory store operation is lost.    The conditions are as follows:    \xe2\x80\xa2 A Cache Clean by MVA to the PoC instruction is executed to clean cache line A, or the preload engine is configured to clean a memory region which includes cache line A. Either of the operations result in the placement of cache line A into a victim buffer for writeback to external memory. It also keeps the line still valid in the L2 cache.    \xe2\x80\xa2 A memory store operation is performed to the same cache line A that is evicted by the cache    clean operation. This operation results in a modification of cache line A in the L2 cache (but not    to the copy of the line that may still remain in the victim buffer if memory response is slow).    \xe2\x80\xa2 A cache eviction is done of cache line A due to an unrelated memory request to load cache line B. The modified copy of cache line A is placed in a victim buffer. At this point, the two victim buffers may contain two different versions of cache line A. As each victim buffer uses a different AXI ID and arbitrates independently for the AXI bus, there is no guarantee for the order in which the memory updates occur, and the store operation may be overwritten by the cache clean operation, leaving the external memory with stale contents.    The issue is reported by ARM, erratum ID 586323, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, one or more store operations are lost, resulting in incorrect program behavior. This can occur for any application which either uses the preload engine to clean a memory region, or uses Clean by MVA to PoC maintenance operations to clean a region of memory.    '
p56
sg17
S' NXP'
p57
sa(dp58
g3
S' Cortex-A8'
p59
sg5
S' :    If full PIPT caching support is not required by the operating system, or the processor includes a 16 Kbyte L1 data cache, then no workaround is required. If alias conditions can occur, then the workaround is to guarantee that a cache maintenance operation is not immediately preceded by a non-cacheable memory request. This is guaranteed by initiating every cache maintenance by MVA routine with a cacheable load or store request immediately preceding the main loop and ending with a DSB barrier operation at the end of the loop. The load or store that precedes the loop can be done to any cacheable memory location. In addition, both interrupts and aborts should be masked during the cache maintenance routine. Interrupt masking is required to prevent a non-cacheable memory request, either fully executed or in a branch shadow, from initiating the sequence that can 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    18    Freescale Semiconductor11145      result in this erratum. If there are concerns about the interrupt latency, the maintenance loop can be amended to enable and disable the interrupts directly around the maintenance operation. This impacts the time taken to complete the maintenance loop.    To workaround any concerns of a potential security attack due to this erratum, all secure memory should be marked as inner write through. This can be done either by using the caching attributes in the page tables for all secure page tables or by making use of the secure banked version of the remap registers. Apart from making all secure memory write through, a routine should be run out of reset to completely fill the cache with dummy data, to prevent invalid, uninitialized data in the cache from being written out to memory and potentially corrupting secure memory. Making all secure memory inner write through guarantees that even if the invalidation of a secure line in the L1 cache occurs due to this erratum, the correct data is not lost.    '
p60
sg7
S' '
p61
sg9
S' :    No fix scheduled    '
p62
sg11
g12
sg13
S' 11145      ARM: Under a specific set of conditions, a cache maintenance operation performed by MVA can result in memory corruption '
p63
sg15
S' :    If a non-cacheable memory request is subsequently followed by any cache maintenance operation done by MVA, then the memory can be corrupted.    The conditions are as follows:    \xe2\x80\xa2 The L1 data cache must be of size 32 Kbyte    \xe2\x80\xa2 The L1 data cache hardware alias checks are enabled (the L1ALIAS bit in the Auxiliary Control Register is set to 0)    \xe2\x80\xa2 The virtual memory management used by the operating system does not follow the page coloring guidelines and allows virtual to physical address alias cases to exist on bit 12 of the address    \xe2\x80\xa2 A non-cacheable memory request to normal, device, or strongly ordered memory is subsequently followed by a cache maintenance operation done by MVA without any cacheable memory operations executed in between. The non-cacheable memory request can be fully executed, or can be a speculative instruction in the branch shadow that subsequently is flushed.    When the above conditions are met and the cache maintenance operation is performed to generate a hash alias scenario on its cache lookup, memory corruption or a false parity error can occur.    The issue is reported by ARM, erratum ID 586324, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, then memory can be corrupted or a false parity error can be generated. In addition, even if the workaround as described below is implemented, it is possible that a nonsecure maintenance operation could result in the invalidation of a secure memory location. Therefore, this could possibly be viewed as an avenue for a security attack.    However, the contents of secure memory cannot be viewed as a direct result of this erratum and the lack of consistent repeatability makes it very difficult for the user to make use of this erratum as a security attack.    '
p64
sg17
S' NXP'
p65
sa(dp66
g3
S' Cortex-A8'
p67
sg5
S' :    The software workaround for this erratum is to disable the write allocate in the L2 cache, as shown in the following instruction sequence:    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg Disabling the write allocate in the L2 cache can impact the performance of some applications. If this performance impact is deemed to be very high, there are two other software workarounds that can be used. The first is to disable write allocate around each sequence of clean by MVA to PoC    or clean/invalidate by MVA to PoC instructions, as shown in the following instruction sequence: MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg    <perform sequence of MVA operations here>    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg BIC <Rd>, <Rd>, #(1 << 22); clear the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg The final workaround that can be implemented is to perform each maintenance operation twice with interrupts disabled. By performing the operation twice in back-to-back successions with no other memory operations executed in between, it can be assured that the line is evicted from both L1 and L2 cache and written out to main memory.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    20    Freescale Semiconductor11142      Perform the following steps:      1. Disable the interrupts and the imprecise aborts    2. Execute the maintenance operation first pass    3. Execute the same maintenance operation, second pass    4. Enable the interrupts and the imprecise aborts    Repeat the above sequence for each cache maintenance operation. Interrupts can remain disabled for a longer sequence of maintenance operations, but this has a negative effect on interrupt latency.    This workaround has a performance impact on the execution time of cache maintenance operations.    '
p68
sg7
S' '
p69
sg9
S' :    No fix scheduled    '
p70
sg11
g12
sg13
S' 11142      ARM: Clean and Clean/Invalidate maintenance ops by MVA to PoC may not push data to external memory    '
p71
sg15
S' :    When a Clean to Point of Coherency or Clean and Invalidate to Point of Coherency by MVA operation is performed, it is possible that the line remains present in the L2 cache and any dirty data is not pushed out on to the AXI bus to main memory. This can occur whenever the requested address is present in the L1 cache but not the L2 cache.    The conditions are as follows:    \xe2\x80\xa2 The memory region being cleaned is configured in write allocate mode    \xe2\x80\xa2 The cache line being cleaned is initially present in the L1 cache and not in the L2 cache The issue is reported by ARM, erratum ID 586320, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If a Clean or Clean and Invalidate operation does not operate as intended, and leaves the data present in the L2 cache, the memory coherency in the system can no longer be guaranteed.    Therefore, this erratum impacts any code sequence used to maintain the system coherence.    '
p72
sg17
S' NXP'
p73
sa(dp74
g3
S' Cortex-A8'
p75
sg5
S' :    There are two viable workarounds for this erratum. One workaround is, not to configure the L2    cache as an inner cache, but maintain the default setting as an outer cache. The second workaround is to use the remap registers to remap the inner cache attributes from write allocate to write back instead.    '
p76
sg7
S' '
p77
sg9
S' :    No fix scheduled    '
p78
sg11
g12
sg13
S' 11146      ARM: Incorrect L2 cache eviction can occur when L2 is12SPACEJEEHEHconfigured as an inner cache      '
p79
sg15
S' :      Under specific set of conditions, the stale data saved in the L2 cache can be erroneously returned to the processor on a subsequent load instruction.    The conditions are as follows:    \xe2\x80\xa2 The L2 cache must be configured as an inner cache rather than as an outer cache    \xe2\x80\xa2 The L2 cache must be configured to use write allocate memory type The issue is reported by ARM, erratum ID 468413, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum occurs, stale data can be read by a subsequent load instruction, resulting in an incorrect program behavior.    '
p80
sg17
S' NXP'
p81
sa(dp82
g3
S' Cortex-A8'
p83
sg5
S' :    One software workaround for this erratum is, not to use the swap instructions. If swap instructions are to be used in the code base, the other software workaround is to disable the PLD instructions and make them a NOP. The code required to implement this workaround is as follows: MRC p15, 0, r0, c1, c0, 1; read register    ORR r0, r0, #(1<<9); PLDNOP - force PLD to be NOP    MCR p15, 0, r0, c1, c0, 1; write register    This workaround has some performance impact on the peak memory copy bandwidth.    '
p84
sg7
S' '
p85
sg9
S' :    No fix scheduled    '
p86
sg11
g12
sg13
S' 11144      ARM: Swap instruction, preload instruction, and instruction fetch request can interact and cause deadlock    '
p87
sg15
S' :    Three memory requests in the L2 cache can interact and result in a deadlock condition. The exact scenario involves a dependency chain of three requests, an instruction fetch request, a memory preload instruction (PLD) and a swap instruction (SWP). In this dependency loop, no request can progress as each one of them is dependent on the next request. That is, the PLD request cannot complete as the IF request is pending to use the BIU. The IF request cannot complete because of the pending SWP request, and the SWP request is not allowed to complete as it is waiting on the PLD to complete before obtaining the lock on the bus.    The conditions are as follows:    \xe2\x80\xa2 PLD instructions must be used by the processor    \xe2\x80\xa2 SWP instructions must be used by the processor    The issue is reported by ARM, erratum ID 468415, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    This erratum only impacts the users of swap instructions. Swap instructions have been deprecated from the ARMv7 version of the ARM Architecture as its functional use in terms of setting up semaphores is now replaced from the ARMv6 architecture forwards by the LDREX and STREX    instructions. If this erratum is encountered and the processor deadlock occurs, it can only be interrupted by resetting the processor.    '
p88
sg17
S' NXP'
p89
sa(dp90
g3
S' Cortex-A8'
p91
sg5
S' :    There are many software solutions for this erratum and only one has to be applied. The recommended solution, if possible, is to map cacheable areas of memory so that both secure and non-secure do not share the same physical address space.    Another possible solution is to force NEON to cache in the L1 data cache. This can be programmed using the Auxiliary Control Register bit [5], L1NEON, as follows: MRC p15, 0, r0, c1, c0,    1; read register    ORR r0, r0, #(1<<5)    ; L1NEON caching enable    MCR p15, 0, r0, c1, c0, 1    ; write register.    Another possible solution is to disable L2 data forwarding from the victim buffers. This can be programmed using the L2 Auxiliary Control Register bit[27], Load data forwarding disable as follows:    MRC p15, 1, r0, c9, c0, 2    ; read register    ORR r0, r0, #(1<<27)    ; L2 load data forwarding disable    MCR p15, 1, r0, c9, c0, 2    ; write register    Both workarounds can be implemented with little or no perceived performance impact in the majority of applications.    '
p92
sg7
S' '
p93
sg9
S' :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    25'
p94
sg11
g12
sg13
S' 11133      ARM: NEON load data can be incorrectly forwarded to a12SPACEJEEHEHsubsequent request      '
p95
sg15
S' :      Under very specific set of conditions, data from a Neon load request can be incorrectly forwarded to a subsequent, unrelated memory request.    The conditions are as follows:    \xe2\x80\xa2 Neon loads and stores must be in use    \xe2\x80\xa2 Neon L1 caching must be disabled    \xe2\x80\xa2 Trustzone must be configured and in use    \xe2\x80\xa2 The secure memory address space and the non-secure memory address space both use the same physical addresses, either as an alias or the same memory location or for separate memory locations    The issue is reported by ARM, erratum ID 468414, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, it is possible for a load request to receive the wrong data value which can likely result in incorrect operation of the program.    '
p96
sg17
S' NXP'
p97
sa(dp98
g3
S' Cortex-A8'
p99
sg5
S' :    The workaround for this erratum is to disable write-allocate by programming the L2 Auxiliary Control Register bit[22], Write allocate disable:    MRC p15, 1, r0, c9, c0, 2; read register    ORR r0, r0, #(1&lt;&lt;22); Write allocate disable    MCR p15, 1, r0, c9, c0, 2; write register    Disabling write allocate in the L2 cache could have a performance impact for some applications.    '
p100
sg7
S' '
p101
sg9
S' :    No fix scheduled    '
p102
sg11
g12
sg13
S' 11134      ARM: Under a specific set of conditions, processor deadlock can occur when L2 cache is servicing write allocate memory '
p103
sg15
S' :    If a load request is processed which misses the L2 cache, but cannot be immediately forwarded to the BIU, it encounters a special hazard which prevents the request from being required to access the L2 cache RAM again to save power. There can be multiple requestors with unique addresses, (that is, one address per cache line) with this special hazard. All write-allocate requests that access the L2 cache RAM, on port1, do not have address comparators to check for this special hazard condition. So, if a subsequent write-allocate request is issued to the L2 cache RAM on port1 and allocates a victim buffer, then all requests pending with this special hazard must be forced to perform a L2 cache RAM lookup again to maintain memory coherency. There is a 1-cycle window in which the write-allocate request must allocate to a victim buffer and a pending request to the BIU is not prohibited from going to the BIU, such that a deadlock can occur.    The conditions are as follows:    \xe2\x80\xa2 The processor must have L2 cache present and enabled.    \xe2\x80\xa2 The L2 cache must be configured to support the write allocate memory type.    The issue is reported by ARM, erratum ID 468416, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered and processor deadlock occurs, it can only be interrupted by asserting RESET on the processor.    '
p104
sg17
S' NXP'
p105
sa(dp106
g3
S' Cortex-A8'
p107
sg5
S' :    None    '
p108
sg7
S' '
p109
sg9
S' :    No fix is scheduled. A clarification will be added to the reference manual.    '
p110
sg11
g12
sg13
S' 11212      ARM: Clarification regarding the ALP bits in AMC register '
p111
sg15
S' :    In the register AMC of the Tiger/ARM Platform (0xBASE_0018) the bit ALPEN must be set to 1    and ALP[2:0] must be set to \xe2\x80\x98000\xe2\x80\x99. Other combinations are reserved and must be avoided.     Projected ImpactJEEHEHRECONSTRUCT:    Memory retention issues unless the guideline is followed.    '
p112
sg17
S' NXP'
p113
sa(dp114
g3
S' Cortex-A8'
p115
sg5
S' :    The main workaround is to poll the performance counter. The maximum increment in a single cycle for a given event is 2. Therefore, polling can be infrequent as no counter can increment by more than 232 in fewer than 2 billion cycles.    If the main usage model for performance counters is collecting values over a long period, then polling can be used to collect values (and reset the counter) rather than waiting for an overflow to occur. Polling can be done infrequently and overflow can be avoided.    If the main usage model for performance counters relies on presetting the counter to some value and waits for an overflow to occur, then polling can be used to detect when an overflow event is 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    30    Freescale Semiconductor10696      missed. An overflow can be determined to have been missed if the unsigned value in the counter is less than the value preset into the counter. Polling can be done infrequently because of the number of cycles it requires for this check to fail. If the erratum is triggered and an overflow event is missed, the counter sample can be thrown away or the true value can be reconstructed.    '
p116
sg7
S' '
p117
sg9
S' :    No fix scheduled    '
p118
sg11
g12
sg13
S' 10696      ARM: If a Perf Counter OVFL occurs simultaneously with an update to a CP14 or CP15 register, the OVFL status can be lost '
p119
sg15
S' :    If the PMU is in use and an overflow event occurs simultaneously with a write to one of the subsets of CP15 and CP14 registers, the overflow event can be lost.    The conditions are as follows:    1. The performance counters must be in use    2. The performance counter must have an overflow (counter value goes beyond 0xFFFF_FFFF) 3. Simultaneous with the counter overflow, a MCR instruction must be executed that writes to one of the following CP14/CP15 registers:    \xe2\x80\x94 Any PMU register other than PMU counter registers    \xe2\x80\x94 ThumbEE Configuration Register    \xe2\x80\x94 ThumbEE Handler Base Register    \xe2\x80\x94 System Control Register    \xe2\x80\x94 Auxiliary Control Register    \xe2\x80\x94 Secure Configuration Register    \xe2\x80\x94 Secure Debug Enable Register    \xe2\x80\x94 Nonsecure Access Control Register    \xe2\x80\x94 Context ID and Thread ID Registers    \xe2\x80\x94 Coprocessor Access Register    \xe2\x80\x94 Cache Size Select Register    The issue is reported by ARM, erratum ID 628216, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, the overflow status flag is not set for that counter in the Overflow Flag Status Register, and an interrupt request is not generated, even when the Interrupt Enable Set Register is configured to generate an interrupt on counter overflow.    '
p120
sg17
S' NXP'
p121
sa(dp122
g3
S' Cortex-A8'
p123
sg5
S' :    The only workaround for this erratum is to avoid accessing the Device type memory with Neon store instructions. (There should be no practical case for this, anyway). However, if needed, define the region as Strongly Ordered memory, instead.    '
p124
sg7
S' '
p125
sg9
S' :    No fix scheduled    '
p126
sg11
g12
sg13
S' 10729      ARM: A Neon store to device memory can result in dropping a previous store    '
p127
sg15
S' :    If a Neon store is done to Device type memory and is followed in instruction sequence by a load instruction to Device type memory, it is possible that an unrelated store instruction that is done to cacheable memory and hit the L1 cache has its data dropped and therefore not update memory.    There are three different memory types defined in the ARM architecture namely, Strongly Ordered, Device, or Normal. Device type memory is one of the three different memory types. This region is specified by the page table entries used by the MMU.    The conditions for this erratum are that relatively close in the instruction stream, the following must occur:    \xe2\x80\xa2 A Neon store is done to Device type memory.    \xe2\x80\xa2 A load is executed to Device type memory (any load to Device type memory region, not just from Neon), consecutive to the Neon store.    \xe2\x80\xa2 Several stores hit the L1 cache. (Any store that hit the L1 cache - Neon or integer core. The address does not matter.)    The issue is reported by ARM, erratum ID 507113, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, one or more cacheable stores that hit the L1 cache do not update the cache, leaving stale contents in memory. This is likely to cause observable, incorrect behavior in the application.    The Neon access to memory region marked as Device is not a practical case in general.    '
p128
sg17
S' NXP'
p129
sa(dp130
g3
S' Cortex-A8'
p131
sg5
S' :    A workaround for this erratum is, not to enable the IBE bit. ARM recommends that the IBE bit should not be enabled unless it is required for an erratum workaround.    If the IBE is to be enabled, then the L1 System Array Debug Register 0 should be initialized to a zero value. This register is for RAM array debug purposes and is not used as a part of normal functionality. It is only accessible in a privileged secure mode. Therefore, it can be statically initialized as a part of the boot code sequence. If the register is used for debug purposes, the value should be reset to zero when the debug sequence completes.    The code to initialize the L1 System Array Debug Register 0 is as follows: MOV r1, #0    MCR p15, 0, r1, c15, c1, 0 ; write instruction data 0 register MRC p15, 0, R1, c1, c0, 1 ; read Aux Ctl Register    ORR R1, R1 #(1 << 6) ; set IBE to 1    MCR p15, 0, R1, c1, c0, 1 ; write Aux Ctl Register    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX53, Rev. 6    34    Freescale Semiconductor10707      '
p132
sg7
S' '
p133
sg9
S' :      No fix scheduled    '
p134
sg11
g12
sg13
S' 10707      ARM: BTB invalidate by MVA operations do not work as    intended when the IBE bit is enabled    '
p135
sg15
S' :    All BTB invalidate operations, including BTB Invalidate by MVA operations, by default are implemented as a NOP in the Cortex-A8 processor. These operations can be executed as NOPs as flushing BTB entries are not required by the Cortex-A8 processor for correct functionality, and there is no additional performance penalty for an incorrect branch prediction versus a non-prediction. However, it is possible for BTB operations to be enabled by setting the IBE bit in the CP15 Auxiliary Control Register. When enabled in this fashion, BTB invalidate by MVA operations may not work as intended. Instead of writing zeros to the valid bit of the BTB entry matching the MVA provided, the CP15 \xe2\x80\x9cInvalidate Branch Predictor by MVA\xe2\x80\x9d operation writes the value currently in the \xe2\x80\x9cInstruction L1 System Array Debug Register 0.\xe2\x80\x9d This register is not initialized at the reset time and can only be written in secure, privileged modes when CP15SDISABLE is not set.    The conditions are as follows:    1. The branch predictor is enabled (SCTLR.Z = 1)    2. The Auxiliary Control Register IBE bit is set to 1    3. An invalidate Branch predictor by MVA operation is executed 4. The Instruction L1 System Array Debug Register 0 contains a non-zero value which sets the valid bit and clears the page cross bit.    The issue is reported by ARM, erratum ID 687067, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the non-zero value contained in L1 System Array Debug Register 0 sets the valid bit of the BTB    entry, then the entry is not invalidated as intended.    '
p136
sg17
S' NXP'
p137
sa(dp138
g3
S' Cortex-A8'
p139
sg5
S' :    The workaround for this erratum is to ensure that the debugger software handles the faulting address. When the debugger is signalled a watchpoint, and identifies that the page being accessed is subjected to an MMU fault, which it would like the OS to patch up before dealing with itself, it can perform the following actions:    \xe2\x80\xa2 Disable the watchpoint    \xe2\x80\xa2 Set vector catch on the local Data Abort exception (secure or non-secure, as appropriate)    \xe2\x80\xa2 Set the PC at the watchpointed instruction and restart execution The processor restarts, re-executes the instruction and generate the MMU fault. It then fetches the instruction from the Data Abort handler and re-enter Debug state because of the Vector Catch event. The debugger can then perform the following actions:    \xe2\x80\xa2 Re-enable the watchpoint    \xe2\x80\xa2 Disable the vector catch    \xe2\x80\xa2 Set the PC at the Data Abort vector and restart execution The processor restarts and re-executes the Data Abort vector instruction. The OS then patches up the MMU fault and attempts to re-execute the original instruction. Re-executing the instruction regenerates the Watchpoint debug event, but now the page is properly patched up.    '
p140
sg7
S' '
p141
sg9
S' :    No fix scheduled    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX53, Rev. 6    36    Freescale Semiconductor10730      '
p142
sg11
g12
sg13
S' 10730      ARM: Taking a watchpoint is incorrectly prioritized over a precise data abort if both occur simultaneously on the same address    '
p143
sg15
S' :    If a debug watchpoint and a precise data abort are both triggered from the same data access, the ARM Architecture specifies that the data abort should be prioritized. However, this does not occur on the Cortex-A8 and the watchpoint is taken instead.    The conditions for the erratum are as follows:    1. At least one debug watchpoint is programmed    2. A precise data abort occurs on the same address as the watchpoint The issue is reported by ARM, erratum ID 693270, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The implications of this erratum only affects the debug software. The data abort should take precedence over the watchpoint so that the OS has a chance to fix up paged-out memory before re-executing the instruction and presenting the debugger with the watchpointed address. Due to this erratum, this fix up does not occur and the debugger should be capable of handling a faulting address.    '
p144
sg17
S' NXP'
p145
sa(dp146
g3
S' Cortex-A8'
p147
sg5
S' :    The erratum only occurs if the floating point unit is configured in run fast mode with RP rounding.    The easiest workaround is to avoid using this particular mode combination. Round-to-Nearest (RN) is a common rounding mode used, but if RP functionality is desired, it should be done without using Default NaN and/or without Flush-to-zero enabled. Default NaN signalling, Flush-to-zero, and rounding mode are all configured using bits [25:22] of the FPSCR register. This register is typically configured by the system software and should not change within an application.    '
p148
sg7
S' '
p149
sg9
S' :    No fix scheduled    '
p150
sg11
g12
sg13
S' 10731      ARM: VCVT.f32.u32 can return wrong result for the input    0xFFFF_FF01 in one specific configuration of the floating point unit    '
p151
sg15
S' :    If the integer to floating point conversion operation, VCVT.f32.u32, is executed with the FPSCR    register configured for Default NaN and Flush-to-zero enabled, and the rounding mode used is RP    (Round-to-Positive infinity), it returns the incorrect result for the source operation 0xFFFF_FF01.    Specifically, it returns the result 0x0000_0000 instead of the correct result 0x4F80_0000. The erratum can occur only for this specific input value and this specific configuration of the FPSCR    register.    The conditions are as follows:    1. Default NaN is enabled (FPSCR[25] = 1\xe2\x80\x99b1)    2. Flush-to-zero is enabled (FPSR[24] = 1\xe2\x80\x99b1)    3. RP rounding mode is enabled (FPSR[23:22] = 2\xe2\x80\x99b01)    4. A VCVT.f32.u32 instruction is executed with the source operand 0xFFFF_FF01    5. The result of the instruction is incorrect 0x0000_0000 rather than 0x4F80_0000    The issue is reported by ARM, erratum ID 715847, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The incorrect result from the conversion operation can result in further incorrect results calculated and unexpected program behavior.    '
p152
sg17
S' NXP'
p153
sa(dp154
g3
S' Cortex-A8'
p155
sg5
S' :    There are two possible workarounds for this erratum.    The first workaround is to avoid performing the cache maintenance operations to non-cacheable addresses previously marked cacheable and therefore may be resident in the cache. If the address is present in the cache, it implies that the memory region is marked cacheable at some earlier point of time and explicitly changed to non-cacheable before the maintenance operation is performed. If the region type is not changed to non-cacheable before executing the maintenance operation, this erratum can be avoided. The value of changing a memory region from cacheable to non-cacheable 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    40    Freescale Semiconductor11206      before performing the maintenance operations is that this is the only way that the ARM v7    Architecture guarantees the line is not immediately placed back into the cache due to the possibility of data speculation. However, in Cortex-A8, this degree of data speculation is never done.    Therefore, changing the memory type to non-cacheable before executing the cache maintenance operation is not required to assure that the line is not immediately placed back into the cache.    However, if there is a code compatibility with other v7 implementations (that may exhibit this level of data speculation) is a concern, then this first workaround is insufficient, and the second workaround should be used.    The second workaround is to execute the loop of cache maintenance operations twice. Execute the loop once with the memory region still marked cacheable. Then change the page table entry to make the memory region non-cacheable and execute the loop for a second time. The first loop cleans the data from the cache in the Cortex-A8. On the Cortex-A8, the second loop is redundant as it misses on all lines in the cache, but resolves the data speculation issue that can occur on a different v7 architecture implementation. The existing cache maintenance code in a dynamically paged environment can be dependent on the maintenance operation triggering a page fault to set the correct page table entry. The workaround code must independently ensure that the correct page table entry is present.    '
p156
sg7
S' '
p157
sg9
S' :    No fix scheduled    '
p158
sg11
g12
sg13
S' 11206      ARM: Cache maintenance operations by MVA for a    non-cacheable memory region can result in processor deadlock '
p159
sg15
S' :    If a Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is performed in a memory region that is marked non-cacheable, device, or strongly ordered, it is possible for the processor to deadlock or have stale data left in the processor. This erratum occurs when the address hits the cache in a way that is not predicted by the Hash Virtual Address Buffer (HVAB), which is a cache way predictor inside the processor. This erratum can occur only for the cache maintenance operations that are performed by MVA. It does not occur for the set/way based cache maintenance operations.    The conditions are as follows:    1. A memory region is marked cacheable in a page table entry, and a cache line from that region is placed in the data cache    2. A second page table entry marks the same memory region as non-cacheable, device, or strongly ordered. This can occur by changing the memory attributes in the existing page table entry, or through an alternative page table entry that maps the same virtual to physical address but with non-cacheable, device, or strongly ordered attributes rather than cacheable 3. A Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is done to this address    4. The maintenance operation receives a false hit indication from the HVAB array 5. The maintenance operation receives a true hit indication from the Tag lookup, which implies that the data is present in the array, but located in a different way that is not predicted by the HVAB    6. An eviction of the dirty line has started but not finished, and the processor leaves stale data in the cache and can potentially enter a deadlock state    The issue is reported by ARM, erratum ID 728018, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If stale data is left in the cache, the processor does not work as intended. If deadlock state occurs, it can only be exited by asserting the RESET pin on the processor.    '
p160
sg17
S' NXP'
p161
sa(dp162
g3
S' Cortex-A8'
p163
sg5
S' :    Several software solutions can be proposed for this issue:    \xe2\x80\xa2 Use 8-bit Neon load with access size of less or equal to 8 bytes. For example: Vld1.8 {d0-d1}, [Rs]!    This solution results in some performance degradation.    \xe2\x80\xa2 Use 16 or 32-bit Neon load instructions instead. For example: Vst1.32 {d0 \xe2\x80\x93 d3}, [Rs]!    The limitation of this proposal is that the source data address must be 16 or 32-bit aligned.    \xe2\x80\xa2 Define the memory region as Normal Non-Cacheable type instead of Strongly Ordered or Device memory type. In this case, need to avoid potential memory consistence issues and perform Data Synchronization Barrier (DSB) before other DMA engine access the region for read, as the Write Buffer is enabled.    '
p164
sg7
S' '
p165
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    42    Freescale Semiconductor11209'
p166
sg11
g12
sg13
S' 11413      ARM: A Neon load from device memory type can result in data abort    '
p167
sg15
S' :    When Neon performs a single byte load from Strongly Ordered or Device type memory with an access size of more than 8 bytes, the system AXI bus issues a burst access which is longer than 8    beats of a single byte.    However, the M4IF is capable of supporting only access with a burst length of less than or equal to 8, as indicated in the i.MX53 Applications Processor Reference Manual (MCIMX53RM). When an access with burst length greater than 8 beat is detected by the M4IF, it is not forwarded to the memory controllers. Instead, a DECERR AXI bus error is indicated and data abort exception is sent back to the master.    Conditions for this issue:    1. A single byte Neon load is issued with more than 8 bytes access, for example: Vld1.8 {d0,d1,d2,d3}, [Rs]!    2. The source address is Strongly Ordered or Device memory type  Projected ImpactJEEHEHRECONSTRUCT:    The Neon access to memory region marked as Strongly Ordered or Device are not usually a practical case in general. Note that there are also other reported limitations for Neon access to    Device type memory such as ENGcm10729.    '
p168
sg17
S' NXP'
p169
sa(dp170
g3
S' Cortex-A8'
p171
sg5
S' :    The CCSR[8:7] bits can be modified only when step_clk is no longer selected. The ARM clock source selection should be done in two accesses. The CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].    '
p172
sg7
S' '
p173
sg9
S' :    No fix is scheduled. A clarification is added to the reference manual.    '
p174
sg11
g12
sg13
S' 11209      CCM: ARM clock source switch limitation    '
p175
sg15
S' :    There are two muxes which select a clock source for pll1_sw_clk (which is also the source for ARM clock). One of them is a regular mux (step select mux), and the other is a synchronous mux.    The clock sources are selected by a single register (CCSR). If the pll1_sw_clk_sel bit is cleared (CCSR[2]) and the selection of the regular mux (CCSR[8:7]) is changed at the same time, then the regular mux is likely to switch first and can cause a glitch on pll1_sw_clk and hence on ARM clock and possibly other clocks as well.    Due to above, the CCSR[8:7] bits may only be modified when step_clk is no longer selected.    Therefore, CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].     Projected ImpactJEEHEHRECONSTRUCT:    None, if the proposed workaround is implemented.    '
p176
sg17
S' NXP'
p177
sa(dp178
g3
S' Cortex-A8'
p179
sg5
S' :    None    '
p180
sg7
S' '
p181
sg9
S' :    No fix scheduled. A clarification is added to the reference manual.    Chip Errata for the i.MX53, Rev. 6    44    Freescale Semiconductor11154'
p182
sg11
g12
sg13
S' 11479      CCM: System hangs when EMI int1 clock is disabled    '
p183
sg15
S' :    When the emi_int1 clock in the CCM_CCGR5 register is disabled, the transaction to the CCM    passes through the INT1 channel of the EMI. However, the BRESP cannot be received by the ARM    because the clocks are already turned off. This causes the system to hang.     Projected ImpactJEEHEHRECONSTRUCT:    None. User should refrain from disabling the EMI int1 clock.    '
p184
sg17
S' NXP'
p185
sa(dp186
g3
S' Cortex-A8'
p187
sg5
S' :    When DMA is used for data transfers, the software can program the CSPI to only allow the interrupt generation during the overrun condition and not enable any other interrupt sources. In this way, whenever an interrupt comes from CSPI, the software can assume that it is the result of an Overrun condition.    '
p188
sg7
S' '
p189
sg9
S' :    No fix scheduled    '
p190
sg11
g12
sg13
S' 11154      CSPI: Incorrectly clears the overrun status bit    '
p191
sg15
S' :    The CSPI automatically clears the overrun error status bit when the RxFIFO is read. This bit should not be cleared. This bit is designed for the interrupt access mode, and not for the DMA access mode.    The conditions are as follows:    \xe2\x80\xa2 When the RO bit is cleared by an RxFIFO read, it does not cause a problem if no DMA accesses to the CSPI occur    \xe2\x80\xa2 When DMA is utilized, the interrupt status of RO can be lost because of uncontrolled RxFIFO    access by DMA     Projected ImpactJEEHEHRECONSTRUCT:    If the RxFIFO is read before reading the Overrun error status bit, it is possible to miss the Overrun and thus miss the data.    '
p192
sg17
S' NXP'
p193
sa(dp194
g3
S' Cortex-A8'
p195
sg5
S' :    A software delay for a fixed amount of time based on TOG_COUNT after the TOG_DIS bit is set.    '
p196
sg7
S' '
p197
sg9
S' :    No fix scheduled    '
p198
sg11
g12
sg13
S' 11152      DPLL: TOG_SEL bit not cleared after the TOG_DIS bit is set '
p199
sg15
S' :    Under certain conditions, the DPLL IP TOG_SEL bit is not cleared after the TOG_DIS bit is set.    This issue is random in nature.     Projected ImpactJEEHEHRECONSTRUCT:    The proposed workaround resolves the issue.    '
p200
sg17
S' NXP'
p201
sa(dp202
g3
S' Cortex-A8'
p203
sg5
S' :    There is no workaround except for not using the SSB_CTRL[x] = 1 option in the Slave mode. The accurate burst length should always be specified using the BURST_LENGTH parameter.    '
p204
sg7
S' '
p205
sg9
S' :    No fix scheduled    '
p206
sg11
g12
sg13
S' 10189      eCSPI Burst completion by SSB signal in Slave mode is not functional    '
p207
sg15
S' :    According to the eCSPI specifications, when eCSPI is set to operate in the Slave mode (CHANNEL_MODE[x] = 0), the SSB_CTRL[x] bit controls the behavior of burst completion.    In the Slave mode, the SSB_CTRL bit controls the behavior of SPI burst completion as follows:    \xe2\x80\xa2 0\xe2\x80\x94SPI burst completed when (BURST_LENGTH + 1) bits are received    \xe2\x80\xa2 1\xe2\x80\x94SPI burst completed when SSB input negated    Also, in BURST_LENGTH definition, it is stated \xe2\x80\x9cIn the Slave mode, this field takes effect in SPI transfer only when SSCTL is cleared.\xe2\x80\x9d    However, the mode SSB_CTRL[x] = 1 is not functional in Slave mode. Currently, BURST_LENGTH always defines the burst length.    According to the SPI protocol, negation of SSB always causes completion of the burst. However, due to the above issue, the data is not sampled correctly in RxFIFO when    {BURST_LENGTH+1}mod32 is not equal to {actual burst length}mod32.    Therefore, setting the BURST_LENGTH parameter to a value greater than the actual burst does not resolve the issue.     Projected ImpactJEEHEHRECONSTRUCT:    Slave mode with unspecified burst length cannot be supported due to this issue. The burst length should always be specified with the BURST_LENGTH parameter and the SSB_CTRL[x] should be set to zero.    '
p208
sg17
S' NXP'
p209
sa(dp210
g3
S' Cortex-A8'
p211
sg5
S' :    In the real applications, the Read command is to be issued after a watermark interrupt is issued to the Cortex. After the watermark interrupt is generated, the appropriate status register indicators should read as one to indicate the violated watermark region.    A workaround to the issue is to check the data that is read, and repeat the read command in case all the register bits values are read as zero.    '
p212
sg7
S' '
p213
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    48    Freescale Semiconductor11245'
p214
sg11
g12
sg13
S' 11038      EMI2.5: Read from M4IF Watermark status registers may have wrong result    '
p215
sg15
S' :    Due to non proper clock synchronization implementation, the WMIS0 and the WMIS1 watermark status registers can return wrong value.    The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    The watermark status and the interrupt indications can be read wrongly. The status bits can be read as zero instead of one (Reading one as zero does not likely to occur).    '
p216
sg17
S' NXP'
p217
sa(dp218
g3
S' Cortex-A8'
p219
sg5
S' :    None    '
p220
sg7
S' '
p221
sg9
S' :    No fix scheduled. A clarification is added in the reference manual.    '
p222
sg11
g12
sg13
S' 11245      EMI: WEIM 8-bit memory devices support clarification    '
p223
sg15
S' :    8-bit memory devices are supported by the WEIM interface, which is connected only to the EIM_D[31:24] pads.    Connection to the EIM_D[23:16] pads is not supported.    This erratum clarifies the statement in the i.MX53 Applications Processor Reference Manual (MCIMX53RM) , that only 16-bit and 32-bit memory devices are supported by the WEIM    interface.     Projected ImpactJEEHEHRECONSTRUCT:    WEIM 8-bit memory devices are supported according to above description.    '
p224
sg17
S' NXP'
p225
sa(dp226
g3
S' Cortex-A8'
p227
sg5
S' :    This can be bypassed by configuring the BCD of all the active chip selects (CS) to be equal to GBCD.    '
p228
sg7
S' '
p229
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    50    Freescale Semiconductor11028'
p230
sg11
g12
sg13
S' 11786      EMI: EIM BCLK in DEBUG mode is not functional when GBCD is zero and BCD is not zero    '
p231
sg15
S' :    EIM has a debug mode that enables BCLK to be a free running clock. This mode is selected by writing 1 to the BCM bit of the EIM\xe2\x80\x99s WCR register.    \xe2\x80\xa2 When BCM is 1, this clock can be divided by configuring the GBCD field.    \xe2\x80\xa2 When BCM is 0, this clock can be divided by configuring the BCD field.    Due to this error, when BCM is set, GBCD is not 0 and BCD = 0, the result will be a non-active clock.     Projected ImpactJEEHEHRECONSTRUCT:    Due to this erratum, the software specific combination of BCM,GBCD, & BCD is not working.    '
p232
sg17
S' NXP'
p233
sa(dp234
g3
S' Cortex-A8'
p235
sg5
S' :    Clock source should be changed only when the EPIT is disabled. A way to accomplish the same is as follows:    1. Disable EPIT\xe2\x80\x94EPITCR[0] = 0 (EN = 0), that is, disable EPIT    2. Disable EPIT output\xe2\x80\x94EPITCR[23:22] = 00 (OM = 00)    3. Disable EPIT capture interrupt\xe2\x80\x94EPITCR[2] = 0 (OCIEN = 0) 4. Change clock source\xe2\x80\x94EPITCR[25:24] (CLKSRC), determines which clock source is selected for running the counter    5. Clear status register\xe2\x80\x94EPITSR[0] (OCIF), this is a write one to clear register 6. Configure EPIT to start count once enabled from load value\xe2\x80\x94EPITCR[1] = 1 (ENMOD = 1) 7. Re-enable EPIT EPITCR[0] = 1 (EN = 1), that is, enable EPIT    8. Reconfigure output and interrupt    '
p236
sg7
S' '
p237
sg9
S' :    No fix scheduled    '
p238
sg11
g12
sg13
S' 11028      EPIT: Possibility of additional pulse on src_clk when switching between clock sources    '
p239
sg15
S' :    There is a possibility of an extra pulse on SCLK in the EPIT, when switching between the clock sources.     Projected ImpactJEEHEHRECONSTRUCT:    It can result in an incorrect counter increment in the EPIT.    '
p240
sg17
S' NXP'
p241
sa(dp242
g3
S' Cortex-A8'
p243
sg5
S' :    None    '
p244
sg7
S' '
p245
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    52    Freescale Semiconductor11213'
p246
sg11
g12
sg13
S' 11052      eSDCTL: Auto power down issues      '
p247
sg15
S' :    Two issues are observed with respect to the automatic power down in eSDCTL: 1. PWDT cycle amount in the specification should be divided by 2.    2. The PWDT should be individually enabled for each chip select, to gain maximum power saving. However a bug is observed, which resulted in read operation from one chip select, preventing the other chip select from entering the power down mode. Only if both chip selects are idle, the power down mode is observed.     Projected ImpactJEEHEHRECONSTRUCT:    The issue impacts the power saving optimization.    '
p248
sg17
S' NXP'
p249
sa(dp250
g3
S' Cortex-A8'
p251
sg5
S' :    A simple workaround is to disable the SD card clock before the software reset, and enable it when the module resumes the normal operation. The Host and the SD card are in a master-slave relationship. The Host provides clock and control transfer across the interface. Therefore, any existing operation is discarded when the Host controller is reset.    The recommended flow is as follows:    1. Software disable bit[3] of the System Control register    2. Trigger software reset and/or set clock divider    3. Check bit[3] of the Present State Register for stable clock 4. Enable bit[3] of the System Control register.    Using the above method, the eSDHC cannot send command or transfer data when there is a glitch in the clock line, and the glitch does not cause any issue.    '
p252
sg7
S' '
p253
sg9
S' :    The i.MX53 Applications Processor Reference Manual (MCIMX53RM) is updated with the workaround procedure, that requires the SDCLKEN bit to be disabled before setting software reset and/or setting clock divider, and then enabling the SDCLKEN bit, after SDSTB bit is set high (Clock stable flag).    '
p254
sg11
g12
sg13
S' 11213      eSDHC: Glitch is generated on card clock with software reset or clock divider change    '
p255
sg15
S' :    A glitch may occur on the SDHC card clock when the software sets the RSTA bit (software reset) in the system control register. It can also be generated by setting the clock divider value. The glitch produced can cause the external card to switch to an unknown state. The occurrence is not deterministic.     Projected ImpactJEEHEHRECONSTRUCT:    Potential disruption of SD card operation.    '
p256
sg17
S' NXP'
p257
sa(dp258
g3
S' Cortex-A8'
p259
sg5
S' :    When the ADMA1 or ADMA2 mode is used and the block size is not a multiple of 4, the software should set the block size to:    4    block size    \xe2\x8b\x85 ------------    4    In other words, the block size should be rounded to the next multiple of 4 bytes. In case of write, the software should add the corresponding number of bytes at each block end, before the write is initialized. In case of read, the software should remove the dummy bytes after the read is completed.    For example, if the original block length is 22 bytes, and there are several blocks to transfer, the software should set the block size to 24. The following data is written/stored in the external memory:    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    Chip Errata for the i.MX53, Rev. 6    54    Freescale Semiconductor11116      In this example, 48 (24 x 2) bytes are transferred instead of 44 bytes. The software should remove the dummy data.    Alternatively, the PIO mode can be used if the block size is non-4 byte aligned.    '
p260
sg7
S' '
p261
sg9
S' :    No fix scheduled    '
p262
sg11
g12
sg13
S' 11116      eSDHCv2/eSDHCv3: ADMA transfer error when the block size is not a multiple of four    '
p263
sg15
S' :    Issue in eSDHC ADMA mode operation. The eSDHC read transfer is not completed when block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2. The eSDHC DMA controller is stuck waiting for the TC bit in the interrupt status register.    The following examples trigger this issue:    1. Working with an SD card while setting ADMA1 mode in the eSDHC    2. Performing partial block read    3. Writing one block of length 0x200    4. Reading two blocks of length 0x22 each. Reading from the address where the write operation is performed. Start address is 0x512 aligned. Watermark is set as one word during read. This read is performed using only one ADMA1 descriptor in which the total size of the transfer is programmed as 0x44 (2 blocks of 0x22).     Projected ImpactJEEHEHRECONSTRUCT:    The issue exists only when the block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2.    '
p264
sg17
S' NXP'
p265
sa(dp266
g3
S' Cortex-A8'
p267
sg5
S' :    Software workaround is to always program TRANS descriptor as the last descriptor.    '
p268
sg7
S' '
p269
sg9
S' :    No fix scheduled    '
p270
sg11
g12
sg13
S' 11115      eSDHCv2/eSDHCv3: Problem when ADMA2 last descriptor is12SPACEJEEHEHLINK or NOP      '
p271
sg15
S" :      ADMA2 mode in the eSDHC is used for transfers to/from the SD card. There are three types of ADMA2 descriptors: TRANS, LINK or NOP. The eSDHC has a problem when the last descriptor (which has the End bit '1') is a LINK descriptor or a NOP descriptor.    In this case, the eSDHC completes the transfers associated with this descriptor set, whereas it does not even start the transfers associated with the new data command. For example, if a WRITE    transfer operation is performed on the card using ADMA2, and the last descriptor of the WRITE    descriptor set is a LINK descriptor, then the WRITE is successfully finished. Now, if a READ    transfer is programmed from the SD card using ADMA2, then this transfer does not go through.     Projected ImpactJEEHEHRECONSTRUCT:    Limitation for configuring the last descriptor as LINK or NOP.    "
p272
sg17
S' NXP'
p273
sa(dp274
g3
S' Cortex-A8'
p275
sg5
S' :    The workaround interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear CINT interrupt in IRQSTAT.    3. Clear and then set D3CD bit in the PROCTL register. Clearing D3CD bit sets the reverse signal of DAT1 to low, even if DAT1 is low. After D3CD bit is re-enabled, the eSDHC can catch the posedge of the reversed DAT1 signal, if the DAT1 line is still low.    4. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    '
p276
sg7
S' '
p277
sg9
S' :    No fix scheduled    '
p278
sg11
g12
sg13
S' 11186      eSDHCv2/eSDHCv3: eSDHC misses SDIO interrupt when CINT is disabled    '
p279
sg15
S' :    An issue is identified when interfacing the SDIO card. There is a case where an SDIO interrupt from the card is not recognized by the hardware, resulting in a hang.    If the SDIO card lowers the DAT1 line (which indicates an interrupt) when the SDIO interrupt is disabled in the eSDHC registers (that is, CINTEN bits in IRQSTATEN and IRQSIGEN are set to zero), then, after the SDIO interrupt is enabled (by setting the CINTEN bits in IRQSTATEN and IRQSIGEN registers), the eSDHC does not sense that the DAT1 line is low. Therefore, it fails to set the CINT interrupt in IRQSTAT even if DAT1 is low.    Generally, CINTEN bit is disabled in interrupt service.    The SDIO interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear the CINT interrupt in IRQSTAT.    3. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    If a new SDIO interrupt from the card occurs between step 2 and step 3, the eSDHC skips it.     Projected ImpactJEEHEHRECONSTRUCT:    The issue is relevant only for the SDIO card interrupt usage.    '
p280
sg17
S' NXP'
p281
sa(dp282
g3
S' Cortex-A8'
p283
sg5
S' :    Do not use the DLL_STS_REF_LOC as indicator. The DLL_STS_SLV_LOCK status bit is sufficient indicator for the software. The DLL_STS_SLV_LOCK represents slave delay-line lock status. It indicates that a valid calibration has been set to the slave-delay line and that the slave-delay line is implementing the programmed delay value.    '
p284
sg7
S' '
p285
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    58    Freescale Semiconductor11214'
p286
sg11
g12
sg13
S' 11406      eSDHCv3: DLL_STS_REF_LOCK status bit does not indicate12SPACEJEEHEHwhen DLL is locked      '
p287
sg15
S' :      DLL_STS_REF_LOCK bit in DLL Status Register (DLLSTS) does not indicate the reference DLL lock status properly. The DLL_STS_REF_LOCK bit function indicates that the DLL has detected and locked to a half-phase ref_clock shift, allowing the slave delay-line to perform programmed clock delays.    Because the timing delay of one tap cell in DLL is too short, a two cell delay period is not wide enough to allow phase_n and phase_p of the reference clock to straddle the high-pulse at the same time. As a result, the DLL_STS_REF_LOCK status bit cannot indicate the actual status.     Projected ImpactJEEHEHRECONSTRUCT:    The DLL functionality itself is not impacted, only the DLL_STS_REF_LOC indicator is not working properly.    '
p288
sg17
S' NXP'
p289
sa(dp290
g3
S' Cortex-A8'
p291
sg5
S' :    The FEC should use the DDR for its buffer.     WorkaroundsJEEHEHRECONSTRUCT:    None.    '
p292
sg7
S' '
p293
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    60    Freescale Semiconductor11029'
p294
sg11
g12
sg13
S' 11214      FEC: Fast Ethernet Controller (FEC) accesses to NAND Flash Controller (NFC) does not work    '
p295
sg15
S' :    The FEC only creates wrap burst accesses upon data access (non-buffer descriptor). The NFC    under EMIv2 cannot handle such accesses from the MAX (M2) input port.     DescriptionJEEHEHRECONSTRUCT:      The Tx Warning Interrupt and the Rx Warning Interrupt signals from the FLEXCAN module are not connected internally to the CPU. Therefore, if these interrupts are enabled, they will not work as documented in the i.MX53 reference manual.     Projected ImpactJEEHEHRECONSTRUCT:    The FEC cannot use the NFC to access memory.     Projected ImpactJEEHEHRECONSTRUCT:    The Tx Warning Interrupt and the Rx Warning Interrupt are not available for use in any application where the FLEXCAN module of the i.MX53 is used.    '
p296
sg17
S' NXP'
p297
sa(dp298
g3
S' Cortex-A8'
p299
sg5
S" :    Changing the clock source should only be done when the GPT is disabled. A way to accomplished this is as follows:    1. Disable GPT\xe2\x80\x94Write 1'b0 to EN bit of GPTCR    2. Disable interrupts\xe2\x80\x94Write 6'b000000 in Bits [5:0] of GPTIR    3. Configure Output Mode to unconnected/ disconnected\xe2\x80\x94Write zeros in OM3, OM2, OM1 in GPTCR    4. Disable Input Capture Modes\xe2\x80\x94Write zeros in IM1,IM2 in GPTCR    5. Change clock source CLKSRC in GPTCR    6. Clear Status register\xe2\x80\x94Write 003F in GPTSR    7. Set ENMOD in GPTCR    8. ENABLE GPT\xe2\x80\x94Write 1'b1 to EN bit of GPTCR. The GPTSR should not be read immediately after changing the clock source (a wait of at least one SCLK is required).    "
p300
sg7
S' '
p301
sg9
S' :    No fix scheduled    '
p302
sg11
g12
sg13
S' 11029      GPT: Possibility of additional pulse on src_clk when switching between clock sources    '
p303
sg15
S' :    There is a possibility of an extra pulse on SCLK in the GPT when switching between the clock sources.     DescriptionJEEHEHRECONSTRUCT:    In certain applications, the on-chip LDOs may not power up correctly. When the issue occurs, both internal LDO regulators do not drive the VDD_ANA_PLL and VDD_DIG_PLL supply outputs.    The potential for this outcome is aggravated at high temperatures (>50-60\xc2\xb0C) and slower VCC    supply ramp times.    Impacted units do not function properly due to incorrect operation of the TEST_MODE input. The device\xe2\x80\x99s offset latch circuit is designed to output a logic level zero, on application of VCC (logic power) and in the absence of NVCC_RESET (I/O power). The TEST_MODE circuit outputs an erroneous logic level one on application of VCC in the impacted units. This has the unintended effect of putting the device into test mode state which powers off the LDO regulators.    On impacted units, if the applied NVCC_RESET is not sourced from the internal LDO regulator then the output of the LDO is delayed till NVCC_RESET is applied. This LDO delay corresponds to the time it takes to bring up NVCC_RESET after VDD_REG.     Projected ImpactJEEHEHRECONSTRUCT:    The bug can produce an incorrect counter increment in the GPT when switching between the clock sources.     Projected ImpactJEEHEHRECONSTRUCT:    The impact depends on the system\xe2\x80\x99s power sequencing and supply connections as follows:    \xe2\x80\xa2 If the on-chip LDO regulator powers NVCC_RESET, it prevents the correct TEST_MODE    input value from reaching the LDO enable logic, thereby creating a deadlock situation in the impacted units. Both LDO regulators do not enable and drive the VDD_ANA_PLL and VDD_DIG_PLL supplies.    \xe2\x80\xa2 If an external regulator powers NVCC_RESET, and the power-up sequence complies with the data sheet then the issue does not occur. Externally supplying and correctly sequencing the NVCC_RESET supply allows the TEST_MODE logic to achieve the correct state. Thus, the LDOs are enabled.    \xe2\x80\xa2 If an external regulator powers NVCC_RESET, and comes up after VDD_REG , then a delayed LDO output enable is observed. Once NVCC_RESET comes up, it correctly resolves the state of the TEST_MODE input, thus enabling the internal LDO regulators. This delay is not a system issue since LDO\xe2\x80\x99s are fully functional and POR_B remains low while other supplies are sequenced.    Workaround:    Users must ensure that the NVCC_RESET supply is powered externally (not from the i.MX53    LDO VDD_ANA_PLL supply output) after VCC is stable and before other I/O supplies (NVCC_xxx) are powered up.    Silicon Fix:    Fixed in silicon revision 3N78C    Chip Errata for the i.MX53, Rev. 6    62    Freescale Semiconductor11127      .'
p304
sg17
S' NXP'
p305
sa(dp306
g3
S' Cortex-A8'
p307
sg5
S' :    Before entering the step-by-step mode, configure the EMI to the software LPMD and then read the LPACK register. The LPACK register indicates that the M4IF is idle and the step-by-step can be enabled. The difference between the regular procedure of LPMD and this procedure is that the EMI clocks remain ON.    '
p308
sg7
S' '
p309
sg9
S' :    No fix scheduled    '
p310
sg11
g12
sg13
S' 11127      M4IF: Step-by-step mechanism violates AXI protocol    '
p311
sg15
S" :    If the step-by-step mechanism is enabled while the M4IF is operational (there are transactions in the internal buffers), there can be a situation where one or more of the arbitrations' AXI protocol is violated in the \xe2\x80\x9cwrite address channel\xe2\x80\x9d or \xe2\x80\x9cread address channel.\xe2\x80\x9d     Projected ImpactJEEHEHRECONSTRUCT:    The M4IF violates the AXI protocol and crashes if step-by-step is set ON or OFF during the run-time.    "
p312
sg17
S' NXP'
p313
sa(dp314
g3
S' Cortex-A8'
p315
sg5
S' :    Initialization must be performed first, followed by enabling the M4IF power saving.    '
p316
sg7
S' '
p317
sg9
S' :    No fix scheduled    '
p318
sg11
g12
sg13
S' 10682      M4IF power-saving mode should not be enabled before DDR is ENGcm1094012SPACEJEEHEHconfigured      '
p319
sg15
S' :      Enabling the power-saving mode in M4IF before configuring the DDR module causes deadlock during DDR configuration.     Projected ImpactJEEHEHRECONSTRUCT:    None    '
p320
sg17
S' NXP'
p321
sa(dp322
g3
S' Cortex-A8'
p323
sg5
g12
sg7
S' '
p324
sg9
g12
sg11
g12
sg13
S' 11203      M4IF: Reading M4IF status registers of an inactive AXI master or slave stalls entire system    '
p325
sg15
S' :    Reading the M4IF status registers of an inactive AXI master or slave ports stalls the entire IC    system. This occurs when a specific master or slave clock is not provided to the M4IF, but the ARM/JTAG tries to read that master\xe2\x80\x99s status bits.    When the master or slave clock is not active, the read request fails to propagate the status bits that go through synchronization (IPG_CLK to *_clk), acknowledge never comes back, and the entire chip\xe2\x80\x99s IP bus is stuck.    Some M4IF status registers bundle the status of several masters or slaves. If one of the masters or slaves is inactive, accessing such a register stalls the entire system, even if the user is interested only in the status of other active ports.    Table 4 lists the impacted registers and the clock signals that should be active for read access to succeed.    Table 4. List of Impacted Registers12SPACEJEEHEHRegisters      Required Master/Slave to be Active for Read Action to Succeed MDCR    fast, slow, int1, int2    WMIS0    fast    WMIS1    fast    MLEN    m0, m1, m2, m3, m4, m5, m6, m7, fast, slow, int1, int2    FDPS    fast    SSRL0    fast    SSRL1    fast    SSRH0    fast    SSRH1    fast    MDSR0    The arbitration domain selected by MDCR/RARB    MDSR1    The arbitration domain selected by MDCR/RARB    MDSR2    The arbitration domain selected by MDCR/RARB    MDSR3    The arbitration domain selected by MDCR/RARB    MDSR4    The arbitration domain selected by MDCR/RARB    MDSR5    The arbitration domain selected by MDCR/RARB    MDSR6    The arbitration domain selected by MDCR/RARB    MDSR7    The arbitration domain selected by MDCR/RARB    MDSR8    The arbitration domain selected by MDCR/RARB    SBS0    The arbitration domain selected by MDCR/RARB    SBS1    The arbitration domain selected by MDCR/RARB    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    65'
p326
sg17
S' NXP'
p327
sa(dp328
g3
S' Cortex-A8'
p329
sg5
S' :    Enable the relevant M4IF masters or slaves clocks for the status read.    '
p330
sg7
S' '
p331
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    66    Freescale Semiconductor11215'
p332
sg11
g12
sg13
S' 11203      Table 4. List of Impacted Registers (continued)12SPACEJEEHEHRegisters      Required Master/Slave to be Active for Read Action to Succeed PSM0    m0,m1    PSM1    m2,m3    PSM2    m4,m5    PSM3    m6,m7    MDCR    fast, slow, int1, int2    MCR0    fast, slow, int1, int2    '
p333
sg15
S' :    No impact on regular functionality. The status registers are usually accessed for debugging purposes.    '
p334
sg17
S' NXP'
p335
sa(dp336
g3
S' Cortex-A8'
p337
sg5
S' :    None    '
p338
sg7
S' '
p339
sg9
S' :    No fix scheduled. The reference manual is updated accordingly.    '
p340
sg11
g12
sg13
S' 11215      NFC: 8-Sym ECC mode does not work with 512 byte page x1612SPACEJEEHEHbus NAND Flash      '
p341
sg15
S' :      When ECC_MODE = 1 the 8-sym error detection and correction does not work with 512 byte main area \xc3\x9716 NAND Flash.     Projected ImpactJEEHEHRECONSTRUCT:    The 8-sym ECC mode does not work with \xc3\x9716 bus width NAND. This mode works with \xc3\x978 bus width NAND. This restricts 8-sym ECC operation to 8-bit NAND devices.    '
p342
sg17
S' NXP'
p343
sa(dp344
g3
S' Cortex-A8'
p345
sg5
S' :    There are two options:    \xe2\x80\xa2 Perform the copy back through Atomic operations    \xe2\x80\xa2 Instead of copy back, perform a read operation followed by a write operation Both options affect the overall performance.    '
p346
sg7
S' '
p347
sg9
S' :    No fix scheduled. Clarification added to reference manual.    '
p348
sg11
g12
sg13
S' 10288      NFC: Copy back function destination address restriction    '
p349
sg15
S' :    The copy back feature of the NFC module does not work as expected. When trying to copy a page from source address to destination address, the destination address is always the successive page of the source address.     Projected ImpactJEEHEHRECONSTRUCT:    The copy back cannot be done to an address that is not successive to the source address.    '
p350
sg17
S' NXP'
p351
sa(dp352
g3
S' Cortex-A8'
p353
sg5
S' :    As there is no difference between LOCK and LOCK_TIGHT modes, the software should not use LOCK_TIGHT mode.    '
p354
sg7
S' '
p355
sg9
S' :    No fix scheduled    '
p356
sg11
g12
sg13
S' 11124      NFC: Block write-protect does not support lock-tight    '
p357
sg15
S' :    NFC offers a block-write-protect feature in which only a range of pre-defined blocks can be modified. This range of blocks can be set to UNLOCK (blocks that can be modified), LOCK    (blocks that cannot be modified) or LOCK_TIGHT (blocks that cannot be modified and the range cannot be changed).    Though switching to LOCK_TIGHT mode, the range of blocks can still be modified.     Projected ImpactJEEHEHRECONSTRUCT:    Lock cannot be trusted to prevent data from being overwritten. As the software does not use this feature (both WinCE and LINUX), there is no impact.    '
p358
sg17
S' NXP'
p359
sa(dp360
g3
S' Cortex-A8'
p361
sg5
S' :    It should be handled in the software, as it is done now for the Windows and Linux drivers.    '
p362
sg7
S' '
p363
sg9
S' :    No fix scheduled    '
p364
sg11
g12
sg13
S' 11217      NFC: Block write-protect does not work in automatic operations '
p365
sg15
S' :    NFC offers a block-write-protect mechanism. Only a configurable range of NAND blocks can be modified. Any erase/program operations on the blocks outside this range should be blocked by NFC. This mechanism does not work in automatic program and in automatic erase.     Projected ImpactJEEHEHRECONSTRUCT:    As there is no workaround for this bug, the write protect mechanism cannot be used.    '
p366
sg17
S' NXP'
p367
sa(dp368
g3
S' Cortex-A8'
p369
sg5
g12
sg7
S' '
p370
sg9
S' :    No fix scheduled    '
p371
sg11
g12
sg13
S' 11182      NFC: Copy-back does not work properly when addr_op = 01    '
p372
sg15
S' :    When working with addr_op = 01, and trying to perform a copy-back operation, the NFC ignores the destination address configured, and copies the page to \xe2\x80\x9csource address\xe2\x80\x9d +1. Additionally, the following automatic operation is carried out from address_register1 instead of address_register0.     Projected ImpactJEEHEHRECONSTRUCT:    Automatic operation is carried out from address_register1 instead of address_register0.    Workaround:    If the system requires to work in addr_op = 01, switch to addr_op = 11, before the copy-back operation, and switch back after the copy-back operation is complete.    '
p373
sg17
S' NXP'
p374
sa(dp375
g3
S' Cortex-A8'
p376
sg5
S' :    Do not to apply software reset for the above conditions.    '
p377
sg7
S' '
p378
sg9
S' :    No fix scheduled    '
p379
sg11
g12
sg13
S' 11126      NFC: Software reset does not work properly under certain conditions    '
p380
sg15
S' :    The software reset (setting the NFC_RST bit in NFC and then sending reset command 0xFF to NAND Flash) does not work correctly under the following conditions:    \xe2\x80\xa2 Reset between the read operations    \xe2\x80\xa2 With atomic program operation, the RESET command is not being issued    \xe2\x80\xa2 Auto program operation\xe2\x80\x94If reset occurs after writing data to the NFC and before the write confirm command, the CACK bit is not set after setting CREQ     Projected ImpactJEEHEHRECONSTRUCT:    The software reset does not work consistently, but the failure conditions are not common in real world applications.    '
p381
sg17
S' NXP'
p382
sa(dp383
g3
S' Cortex-A8'
p384
sg5
S' :    Workaround for this erratum:    \xe2\x80\xa2 In the Automatic mode, use RBB_MODE = 0    \xe2\x80\xa2 If RBB_MODE = 1 is to be used, then after the Automatic program, Automatic CopyBack0 and Automatic CopyBack1 operations, Status read should be done explicitly.    '
p385
sg7
S' '
p386
sg9
S' :    No fix scheduled    '
p387
sg11
g12
sg13
S' 11218      NFC: Status read does not occur at the end of the program, with RBB_MODE = 1    '
p388
sg15
S' :    After automatic Program operation the NFC is expected to perform a status read and store the status in STATUS_SUM register. With RBB_MODE = 1 (that is, NFC waiting using BSY_B signal), the status read does not occur at the end of the Program/CopyBack0 and CopyBack1 operations.     Projected ImpactJEEHEHRECONSTRUCT:    The status is not correct.    '
p389
sg17
S' NXP'
p390
sa(dp391
g3
S' Cortex-A8'
p392
sg5
S' :    Avoid combining the following parameters/conditions:    \xe2\x80\xa2 16-bit flash bus width    \xe2\x80\xa2 Symmetric mode    \xe2\x80\xa2 1:2 clock-ratio    '
p393
sg7
S' '
p394
sg9
S' :    No fix scheduled    '
p395
sg11
g12
sg13
S' 11219      NFC: Misses read data when working in Symmetric mode with clock ratio 1:2, and using a 16-bit Flash bus width    '
p396
sg15
S' :    When working in symmetric mode with a clock ratio 1:2, and using a 16-bit Flash bus width, the NFC reads data and organizes it using a shift in the internal RAM in such a way that the last 16 bits of the data block being transferred are not written to the memory.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data may be read.    '
p397
sg17
S' NXP'
p398
sa(dp399
g3
S' Cortex-A8'
p400
sg5
S' :    Do not use the combination of parameters/modes described above.    '
p401
sg7
S' '
p402
sg9
S' :    No fix scheduled    '
p403
sg11
g12
sg13
S' 11220      NFC: Cannot reach entire address space when addr_op = 1 or 3    '
p404
sg15
S" :    When the NFC is configured to addr_op = 1 or 3    \xe2\x80\xa2 If num_of_devices = 0\xe2\x80\x931, then the LSB of the page/blocks address section of the addr_group bits is not used for address generation.    \xe2\x80\xa2 If num_of_devices = 2\xe2\x80\x933, then the 2 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.    \xe2\x80\xa2 If num_of_devices = 4\xe2\x80\x937, then the 3 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.     Projected ImpactJEEHEHRECONSTRUCT:    Working in these addr_op modes has some limitations on the size of the devices (depending on the number of devices). Such large devices do not exist at this time. This can be an issue when using larger devices that may become available in future.12SPACEJEEHEHNOTE      addr_op = 0 works as designed with any combination.    "
p405
sg17
S' NXP'
p406
sa(dp407
g3
S' Cortex-A8'
p408
sg5
S' :    To reduce the failure significantly, treat the case where NFC reports NOBER = T as uncorrectable error. This implies that if the number of errors is equal to T, the software must invalidate the block.    It is a common practice for the software to mark the block as bad in advance when the number of reported errors approaches T.    '
p409
sg7
S' '
p410
sg9
S' :    No fix scheduled    '
p411
sg11
g12
sg13
S' 11221      NFC: ECC mechanism may fail to report uncorrectable error situation    '
p412
sg15
S' :    The NFC error correction mechanism is based on BCH error correction codes. The BCH error correction code allows correction up to a particular number of errors (T = 4 or 8 depending on the configuration), and detection in case of higher number of error bits. In a situation where the number of errors (NOBER) is larger than the number of errors the NFC can correct (T), the NFC should report on uncorrectable error.    Due to a theoretical limitation, the BCH code can fail in detecting the error when the number of actual error bits is much larger than the number of correctable bits. The failure depends on the location of the errors (related to Hamming distance), and its probability is very small. The detection failure probability can be calculated using the formula as follows: P    1    e = --------    T! 2T    \xe2\x8b\x85    where T is number of correctable errors.    \xe2\x80\xa2 For 4-bit ECC, the calculated probability for a decoder error is 1 : 384    \xe2\x80\xa2 For 8-bit ECC, the calculated probability for a decoder error is 1 : 10,321,920    In case of failure, the NFC reports only on T or less errors (NOBER=T) and tries to correct them.    As a result the data is damaged and the NFC does not report on it.     Projected ImpactJEEHEHRECONSTRUCT:    There is a small probability for failure in detection of the errors by the ECC mechanism due to theoretical limitation of the ECC code.    '
p413
sg17
S' NXP'
p414
sa(dp415
g3
S' Cortex-A8'
p416
sg5
S' :    The recommended workaround is to set RBB_MODE = 0. This also frees up the NANDF_RBx pads for other usages. The NFC monitors the ready-busy status by performing a status-read command.    Another option is to work with ADD_OP other than 01, allowing to work automatically with a single device other than device0.    See, NAND_FLASH_CONFIG Register Field '
p417
sg7
S' '
p418
sg9
S' :    No fix scheduled    '
p419
sg11
g12
sg13
S' 11002      NFC can miss the sampling of the ready/busy signal (R/B) when RBB_MODE = 1    '
p420
sg15
S' :    The NFC may not properly sample the ready/busy (R/B) signal under the following conditions: 1. RBB_MODE = 1 (Ready-Busy mode 1 - NFC monitors ready-busy status by checking NANDF_RBx (R/B) signals)    2. ADD_OP = 01 (Addressing Option 01 - NFC uses only address_group0 with single NAND    device    3. enfc_clk period is less than twb/3 (twb is the period from WE write enable signal HIGH to R/B    ready/busy signal assertion)    If RBB_MODE = 1 and ADD_OP = 01, the NFC may miss the sampling of the ready/busy signal (R/B) if the enfc_clk is too fast. According to the NAND flash protocol, the NAND device should enter the busy mode and assert the R/B signal (driving R/B signal to zero) after the maximum time period of twb after the deassertion of the WE signal (driving write enable to one).    The NFC samples the R/B signal after a fixed time of 3 enfc_clk cycles after the deassertion of WE.    Typically, the twb period is 100 ns. When the enfc_clk is set to less than 33 ns period, the NFC may miss sampling the R/B.     DescriptionJEEHEHRECONSTRUCTs table in the i.MX53 Applications Processor Reference Manual (MCIMX53RM) for detailed modes description.    If the above two options are not feasible, the enfc_clk frequency can be reduced such that clock period is larger than twb/3. This results in small performance degradation as the supported ONFI1.0    NAND can run at up to 40 MHz.     Projected ImpactJEEHEHRECONSTRUCT:    Violation of NAND interface protocol can result in data corruption. The implementation of the proposed workaround may have insignificant performance impact.    '
p421
sg17
S' NXP'
p422
sa(dp423
g3
S' Cortex-A8'
p424
sg5
S' :    Avoid the above described situation. Note that, in current WinCE and Linux BSP releases from Freescale, the SDMA Multi-Page mode read from NFC is not activated.    '
p425
sg7
S' '
p426
sg9
S' :    No fix scheduled    '
p427
sg11
g12
sg13
S' 11053      SDMA multi-page read from the NFC, when the WEIM is    operating, can result in data corruption or EMI hanging    '
p428
sg15
S' :    Data corruption or EMI hanging can occur on SDMA Multi-Page read from the NFC in case of simultaneous read access by other master from WEIM. Use of SDMA is relevant for a case of multiple pages read from the NFC (that is, setting NUM_OF_ITERATION to a value greater than zero and setting NO_SDMA to zero in NFC for automatic interleave mode).     Projected ImpactJEEHEHRECONSTRUCT:    SDMA read access from NFC may be corrupted in case other masters perform read from WEIM    at same time.    There are no issues in following cases:    \xe2\x80\x94 ARM accesses the NFC when WEIM is accessed by any other master in the system    \xe2\x80\x94 SDMA accesses the NFC when the WEIM is idle    \xe2\x80\x94 NFC is idle and WEIM is accessed by any master in the system '
p429
sg17
S' NXP'
p430
sa(dp431
g3
S' Cortex-A8'
p432
sg5
S' :    Take measures to avoid such cases. Leaving the unused interface supply open, does not cause any issue. The issue occurs only when a supply is grounded through a small resistor. The best design practice is to apply power to all the supply rails.    '
p433
sg7
S' '
p434
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    79'
p435
sg11
g12
sg13
S' 11180      Grounding nonfunctional UHVIO IO pads power rails can cause malfunction in other UHVIO IO cells    '
p436
sg15
S' :    If the power supply of an unused UHVIO pad power group is pulled down, it can cause malfunction in the other functional UHVIO IO cells. The UHVIO IO cells (that support signal levels above 3 V) are used in interfaces such as SD card, NAND Flash. For example, grounding SD2 power supply rail through a small resistor (say 470 \xce\xa9) causes boot issues from the SD1 interface. This is caused due to a particular HVIO IO cell design limitation.     Projected ImpactJEEHEHRECONSTRUCT:    Pay attention to this limitation during board design. An unintentional grounding can occur because of nonfunctional or disabled voltage supply device connected to the UHVIO based interface VCC    line.    '
p437
sg17
S' NXP'
p438
sa(dp439
g3
S' Cortex-A8'
p440
sg5
S' :    In case the UHVIO based interface operates at voltage level in the 1.95 V to 3.1 V range, configure the pads for manual voltage level selection by setting the IOMUX pad control register bit VDOEN1    for manual voltage selection and the HVEOVERWRITE bit to 1.    To guarantee no timing issues occur during boot on an external interface operating at a voltage level in the 1.95 V to 3.1 V range, disable the fast boot mode by burning the corresponding e-fuse.    E-fuses exist in both NAND Flash and SDHC boot modes, and select either a fast or slow boot option.    '
p441
sg7
S' '
p442
sg9
S' :    No fix scheduled    1. Note the erratum ENGcm11851 related to VDOEN bit polarity. The polarity of the bit in i.MX53 revision 2.0 is different from revision 1.0.    Chip Errata for the i.MX53, Rev. 6    80    Freescale Semiconductor11851'
p443
sg11
g12
sg13
S' 11642      UHVIO pads automatic supply voltage level detect function may not work for voltage between 1.95 V to 3.1 V    '
p444
sg15
S' :    UHVIO pads have an automatic power supply voltage level detector mechanism that should detect if the interface voltage is high (3.0 V \xe2\x80\x93 3.6 V) or low (1.65 V \xe2\x80\x93 3.1 V), and configure the pad accordingly.    This detector may not work correctly for voltage levels between 1.95 V and 3.1 V. It detects this range as high voltage when it should be low. This impacts the pad timing performance, adding a propagation delay of up to 2.5 ns.     Projected ImpactJEEHEHRECONSTRUCT:    UHVIO pads are used by several interfaces such as NAND Flash, SDHC, EIM, FEC, Keypad, PATA, CSI, and some GPIOs. For general functionality the impact is not significant because the pads can be configured appropriately by setting the IOMUX pad control register bit VDOEN1 to manual voltage selection and the HVEOVERWRITE bit to 1. However, during the boot, the pads are configured by default to enable the automatic supply voltage detection. As a result, UHVIO pad base interfaces cannot use the fast boot mode if they are in the 1.95 V \xe2\x80\x93 3.1 V voltage range. This limitation applies particularly to NANDF and SDHC interfaces.    '
p445
sg17
S' NXP'
p446
sa(dp447
g3
S' Cortex-A8'
p448
sg5
S' :    1. Boot from SATA when working in external clock mode can be used.    2. Use Low Power Boot Mode (LPB) and force low power condition using pull-ups or pull-downs. LPB is used in the following way:    \xe2\x80\x94 Blow BT_LPB fuse.    \xe2\x80\x94 Do one of the following options:    \xe2\x80\x93 Pull-up PATA_DIOW pad to imitate low power condition and blow BT_LPB_POLARITY fuse    \xe2\x80\x93 Pull-down PATA_DIOW pad to imitate low power condition and avoid blowing BT_LPB_POLARITY    '
p449
sg7
S' '
p450
sg9
S' :    No fix planned    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    81'
p451
sg11
g12
sg13
S' 11851      ROM (Boot): Boot from SATA fails when internal clock mode is used    '
p452
sg15
S' :    SATA can work in two clock modes: internal and external. Due to an error in the ROM code, boot from SATA when using the internal clock mode is not working. SATA can be used in internal clock mode if boot is done from another source.     Projected ImpactJEEHEHRECONSTRUCT:    Boot from SATA when working in internal clock mode is not working.    '
p453
sg17
S' NXP'
p454
sa(dp455
g3
S' Cortex-A8'
p456
sg5
S' :    None. Avoid using the memory region unlock feature in the TrustZone code.    '
p457
sg7
S' '
p458
sg9
S' :    No fix scheduled    '
p459
sg11
g12
sg13
S' 10971      f      ENGcm10971      RTICv3 memory region unlock feature can cause the RTICv3 to hang    '
p460
sg15
S' :    The RTICv3 feature that allows the TrustZone software to disable the run-time check of the selected memory regions (region unlock), can cause the RTICv3 to hang and stop the run time integrity check of other regions.     Projected ImpactJEEHEHRECONSTRUCT:    The RTICv3 feature that allows the TrustZone software to disable run-time check of the selected memory regions cannot be utilized.    '
p461
sg17
S' NXP'
p462
sa(dp463
g3
S' Cortex-A8'
p464
sg5
S' :    Avoid using a ratio of 1:1 between AHB and IP buses clock frequencies. Other software workarounds are considered, but not yet confirmed.    '
p465
sg7
S' '
p466
sg9
S' :    No fix scheduled    '
p467
sg11
g12
sg13
S' 10363      SAHARA/CCM: Frequency ratio restriction for AHB and IP buses in SAHARA    '
p468
sg15
S' :    SAHARA does not work properly if AHB:IP buses clock ratio is 1:1. It works fine with AHB:IP    buses clock ratio 2:1.     Projected ImpactJEEHEHRECONSTRUCT:    Adds limitation on system configuration for the clock ratio of 1:1 between AHB and IP buses.    '
p469
sg17
S' NXP'
p470
sa(dp471
g3
S' Cortex-A8'
p472
sg5
S' :    None    '
p473
sg7
S' '
p474
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    84    Freescale Semiconductor10975'
p475
sg11
g12
sg13
S' 10417      SATA: IS.INFS bit is not set when ERR_C is set    '
p476
sg15
S' :    The AHCI specification states that the IS.INFS bit should be set when ERR_C is set, which does not occur. ERR_C is set when a Phy_not_ready condition is detected during non-data FIS reception or transmission.     Projected ImpactJEEHEHRECONSTRUCT:    None. In addition to ERR_C, a Phy_not_ready condition also causes the IS.PRCS bit to be set.    IS.PRCS = 0 and SSTS.DET = 0 (indicates device disconnect) supersede other errors and should be handled by the software. Setting IFS/INFS is redundant and does not give any more useful information to the software.    The severity is low. Medium probability.    '
p477
sg17
S' NXP'
p478
sa(dp479
g3
S' Cortex-A8'
p480
sg5
S' :    Host software issues port reset (COMRESET) or global reset, if IS.IPMS interrupt is received.    '
p481
sg7
S' '
p482
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    85'
p483
sg11
g12
sg13
S' 10975      SATA: Unknown FIS with incorrect PMP field received    '
p484
sg15
S' :    When an unknown FIS (UFIS) is received and the PMP field is incorrect (does not correspond to the command header CH.PMP field), both PDMA and TSM state machines lock-up, and IS.IPMS    interrupt is generated.     Projected ImpactJEEHEHRECONSTRUCT:    A UFIS is received in the RxFIFO and the IS.IPMS bit is set, generating IPMS intrq. Therefore, PDMA and TSM state machines lock-up.    The severity is medium. The probability of occurrence is low. Receiving an unknown FIS is an error scenario. This should not happen in the normal operation.    '
p485
sg17
S' NXP'
p486
sa(dp487
g3
S' Cortex-A8'
p488
sg5
S' :    Software can either retry the command or generate COMRESET.    '
p489
sg7
S' '
p490
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    86    Freescale Semiconductor10982'
p491
sg11
g12
sg13
S' 10983      SATA: Erroneous detection of Read Overflow condition    '
p492
sg15
S' :    Under a certain condition (small data transfer of 20 bytes with two Data FISes (12 bytes + 8 bytes + \xe2\x80\x9cend-status\xe2\x80\x9d is delayed a little) and four PRDs (4 + 4 + 4 + 8 bytes)), it is possible that a read overflow condition can be detected erroneously when such a condition is not present. As a result the P#IS.OFS is set.     Projected ImpactJEEHEHRECONSTRUCT:    A P#IS.OFS interrupt is generated erroneously. The Host controller is not affected otherwise. So the normal operation can continue.    The severity is low. The probability is low.    '
p493
sg17
S' NXP'
p494
sa(dp495
g3
S' Cortex-A8'
p496
sg5
S' :    The software should use Port Reset (COMRESET) instead.    '
p497
sg7
S' '
p498
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    87'
p499
sg11
g12
sg13
S' 10982      SATA: Soft Reset not sent when issued by the software during on-going transfer    '
p500
sg15
S' :    The SRST FIS is not read from the system memory, when the ST bit clears during an on-going transfer and the core locks up. This happens only during certain conditions (for example, when a DMA read transfer takes a long time due to a large burst being converted into multiple single transfers).    There are two parts to this problem:    1. TSM locks up in HT_PIOOTRANS2 (PIO) or in HT_DMAOTRANS2 (DMA) when software wants to send a SRST and clears the CMD.ST bit    2. PDMA unsuccessfully requests an SRST command header when the current read transfer is not finished and p_dma_req = 1     Projected ImpactJEEHEHRECONSTRUCT:    The PDMA/TSM module lockup.    The severity is medium. The probability is low.    '
p501
sg17
S' NXP'
p502
sa(dp503
g3
S' Cortex-A8'
p504
sg5
S' :    Port reset/COMRESET after time-out.     WorkaroundsJEEHEHRECONSTRUCT:    When IS.IPMS is set and TFD.STS.BSY is not cleared, no further transfers can be made until a COMRESET is issued. Determine the presence/absence of the Port Multiplier using IPMS intrq. If it is set, the PM is not attached and SRST with PMP = 0h must be issued.    '
p505
sg7
S' '
p506
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    88    Freescale Semiconductor11084-1    ENGcm11084-1    SATA: PMP field checked when CMD.PMA = 0     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    89'
p507
sg11
g12
sg13
S' 11018      SATA: Problems with phy_reset when Staggered Spin-Up12SPACEJEEHEHsupported      '
p508
sg15
S' :      Under certain conditions (combination of core clock values and software delays), the core can generate a phy_reset indefinitely.    It occurs during one of the following cases:    1. If Global reset causes CMD.SUD = 0, then the software writes CMD.SUD = 1 to spin-up to the device    2. Under normal operation, when CMD.SUD = 1 and when the software issues a port reset by toggling SCTL.DET = 0 \xe2\x86\x92 1 \xe2\x86\x92 0     DescriptionJEEHEHRECONSTRUCT:    The SATA AHCI specification states that the software should issue a soft reset with 0xF in the PMP field, to check if a port multiplier is connected to the Host controller. If a device is connected directly to the Host controller, without a port multiplier, the returned FIS has a value of 0x0 in the PMP field. As the values of the PMP field in the Soft Reset FIS and the returned Signature FIS    from the device are different, the Host controller reports an error and sets the IS.IPMS bit.    The PDMA module is supposed to check the PMP field of the incoming FIS only when CMD.PMA = 1. As CMD.PMA is set to zero initially, the controller should accept the signature FIS from the device even with PMP = 0xF. Currently, PMA is not used/ignored.     Projected ImpactJEEHEHRECONSTRUCT:    The top-level port phy_reset is asserted indefinitely. This is a synchronous reset, typically used only when the PHY handles TX OOB.    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    If a port multiplier is connected, problem does not arise. When the software attempts to enumerate the port multiplier, the port multiplier returns a FIS with 0xF in the PMP field, which is expected by the controller. If a device is connected directly to the Host without a port multiplier, the PMP    field in the returned FIS contains 0x0, as opposed to 0xF in the soft reset FIS issued by the software.    This causes the IS.IPMS bit to be set, and the TFD.STS.BSY bit is never cleared.    The severity is medium. The probability is low.    '
p509
sg17
S' NXP'
p510
sa(dp511
g3
S' Cortex-A8'
p512
sg5
S' :    Ensure that there are no outstanding data commands, before clearing the CMD.ST bit.     WorkaroundsJEEHEHRECONSTRUCT:    None    '
p513
sg7
S' '
p514
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    90    Freescale Semiconductor11084-3    ENGcm11084-3    SATA: Supported AHCI version is incorrect     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    91'
p515
sg11
g12
sg13
S' 11084-2    ENGcm11084-2    SATA: Data FIS received when CMD.ST = 0    '
p516
sg15
S' :    If CMD.ST = 0 and the PDMA of eofdata_q register is set due to a Data FIS received, it can cause data corruption on the AHB bus during the next initiated transfer (the current transfer is aborted, as expected). It happens if the software clears the CMD.ST bit to send a soft reset while there is still an outstanding data command.     DescriptionJEEHEHRECONSTRUCT:    The VS.MNR field (Minor Version Number) reset value is 0x0100. The correct value should be 0x0300 indicating support for AHCI 1.3.     Projected ImpactJEEHEHRECONSTRUCT:    Data corruption on the AHB bus (same data is written twice on consecutive addresses).    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    None. The severity is low.    '
p517
sg17
S' NXP'
p518
sa(dp519
g3
S' Cortex-A8'
p520
sg5
S' :    None     WorkaroundsJEEHEHRECONSTRUCT:    None    '
p521
sg7
S' '
p522
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    92    Freescale Semiconductor11084-5    ENGcm11084-5    SATA: Host does not detect disconnect in    L_TMPartial/L_TMSlumber states     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    93'
p523
sg11
g12
sg13
S' 11084-4    ENGcm11084-4    SATA: DMA Setup FIS with inactive slot reception    '
p524
sg15
S" :    When DMASTP FIS with inactive slot (TAG with corresponding P#SACT bit is zero) is received, it is currently posted to the memory and the data transfer phase is initiated from the wrong slot location. The correct behavior should generate IFS intrq and transition to Fatal state.     DescriptionJEEHEHRECONSTRUCT:    When the Device and the Host send PMREQ at the exact same time, but the Device is disconnected before the Host actually detects a PMACK or PMNAK in the deframer, the Host core remains in the power state (L_TPMPartial or L_TPMSLumber) until a COMINIT is received. Also, in this case, the Host core does not flag this as a 'phy not ready' error condition to the Host firmware and the SERR.ERR_C register does not get updated to indicate loss of communication.     Projected ImpactJEEHEHRECONSTRUCT:    IFS is not asserted when DMASTP with inactive slot is received, 'bad' DMASTP FIS is posted to the memory, and data transfer operation is initiated resulting in wrong data transfer and likely bus error or other errors (such as incorrect PRD and so forth).    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    The Host remains in the L_TPMPartial/L_TPMSlumber state, indefinitely transmitting PMREQ, though there is no Device connected to it, until COMINIT is received from the Device. In addition, the SERR.ERR_C register does not get updated to indicate loss of communication.    The severity is low. The probability is low.    "
p525
sg17
S' NXP'
p526
sa(dp527
g3
S' Cortex-A8'
p528
sg5
S' :    None     WorkaroundsJEEHEHRECONSTRUCT:    None    '
p529
sg7
S' '
p530
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    94    Freescale Semiconductor11084-7    ENGcm11084-7    SATA: Incorrect interpretation of A-bit in BIST Activate FIS     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    95'
p531
sg11
g12
sg13
S' 11084-6    ENGcm11084-6    SATA: Possible core lockup after switching from the low power mode    '
p532
sg15
S' :    A problem is identified with the BCM 30 Datastream FIFO, where it has approximately a 1/8 or a 1/16 chance of losing the first data, causing a lock up after a low power mode, due to a problem with the reset logic. When the problem occurs, the FIFO loses the first data that contains alignment information. This results in the core locking on the first non-ALIGN Primitives and the core being locked. The only recovery at this point is a software time-out and the Host issued COMRESET.     DescriptionJEEHEHRECONSTRUCT:    As per the SATA specification, in the far-end Tx-only responder mode, the BIST Activate FIS    A-bit means ALIGN Bypass (do not transmit ALIGN primitives) when A = 1. The AHCI controller only accepts A = 0 and does not send ALIGNs. A = 1 causes the controller to R_ERR    the BIST Activate FIS. This behavior is opposite to what the specification requires.    The correct behavior should be:    \xe2\x80\x94 A = 0 - R_ERR    \xe2\x80\x94 A = 1 - R_OK (no ALIGNs sent)     Projected ImpactJEEHEHRECONSTRUCT:    The Device locks-up after it switches from the low power mode.The severity is high.     Projected ImpactJEEHEHRECONSTRUCT:    None    '
p533
sg17
S' NXP'
p534
sa(dp535
g3
S' Cortex-A8'
p536
sg5
S' :    Disable the spread spectrum clocking (SSC) on the Host side.     WorkaroundsJEEHEHRECONSTRUCT:    The core can come out of this hang condition if software issues another COMRESET.    Additionally, if the Device supports Asynchronous Signal Recovery, after 10ms, the Device reissues COMINIT and OOB completes successfully at that point.    '
p537
sg7
S' '
p538
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    96    Freescale Semiconductor11084-9    ENGcm11084-9    SATA: Host may not wake up from low power mode     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    97'
p539
sg11
g12
sg13
S' 11084-8    ENGcm11084-8    SATA: BIST responder re-timed loopback mode may drop data due to FIFO overflow    '
p540
sg15
S' :    The DWC SATA AHCI core removes and replaces all ALIGNs in the far-end re-timed BIST    responder loopback mode. This can cause overflow in the BIST FIFO, if the Tx frequency of the device is faster than the Host Tx frequency (clk_asic). According to the SATA specification, the link can consume up to two ALIGNs and prevent the overflow.     DescriptionJEEHEHRECONSTRUCT:    Under certain conditions, the Host controller fails to wake up from the low power mode. The problem arises when the Host issues a COMRESET (software requested reset of system) at the exact time when the Device is disconnected and then reconnected, and when both the Host and the Device were previously in the power down mode. The series of events to cause this error are described as follows:    1. The Host sends a partial power mode request.    2. The Device issues a partial power mode request (collision).    3. The Host backs off and accepts the device power mode request.    4. Both the Host and the Device go into slumber power mode (phy_slumber asserted).    5. The Device is disconnected and reconnected, after which it sends COMINIT.    6. The Host does not respond to COMINIT as it issued a COMRESET from the application software at the exact time COMINIT is detected.    7. The Host does not detect COMINIT, but phy_slumber is de-asserted and asserted again and remains asserted.    8. The Host hangs in the power down mode.    This problem is caused by signals from the clk_asic clock domain remaining asserted after clk_asic is restored, and the signals cause another power mode to be asserted.     Projected ImpactJEEHEHRECONSTRUCT:    The loopback data is corrupted when the BIST FIFO overflows.    The severity is high. The probability is medium.     Projected ImpactJEEHEHRECONSTRUCT:    The Host may not wake up from the low power mode.    The severity is medium. The probability is low.    '
p541
sg17
S' NXP'
p542
sa(dp543
g3
S' Cortex-A8'
p544
sg5
S' :    None     WorkaroundsJEEHEHRECONSTRUCT:    COMRESET after time-out.    '
p545
sg7
S' '
p546
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    98    Freescale Semiconductor11084-11    ENGcm11084-11 SATA: SYNC in Rx Data FIS causes PDMA FSM lock up  Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    99'
p547
sg11
g12
sg13
S' 11084-10    ENGcm11084-10 SATA: Injected primitive error inside FIS causes CRC error '
p548
sg15
S' :    A CRC error is incorrectly asserted for a subsequent FIS after a SYNC primitive is injected inside the incoming FIS. As per the SATA specification, if a SYNCp is received, the other side should not finish the FIS (SATA specification violation). This error condition represents an extremely rare case of data or non SYNCp Primitive being corrupted to be SYNCp, and then the FIS is completed.     DescriptionJEEHEHRECONSTRUCT:    If a SYNC is inserted immediately after the first Rx Data FIS DWord (46h header), the PDMA locks up, as it expects the next DWord to be data.     Projected ImpactJEEHEHRECONSTRUCT:    The Host responds to the subsequent FIS with R_ERR. This error is handled by the system in the usual fashion. For a non-data FIS, the FIS is tried again. For data FIS, the command fails and the error should be handled by the software.    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    The PDMA locks in DR_Receive_prerd state. SERR.DIAG_S bit is set, but interrupt is not generated.    The severity is low. The probability is low.    '
p549
sg17
S' NXP'
p550
sa(dp551
g3
S' Cortex-A8'
p552
sg5
S' :    Do not clear the P#CMD.ST bit when new commands are issued and the aggressive PM is enabled.    Alternatively, issue COMRESET when the command times out when this condition is detected.    '
p553
sg7
S' '
p554
sg9
S' :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    100    Freescale Semiconductor12374'
p555
sg11
g12
sg13
S' 11084-12    ENGcm11084-12 SATA: Synchronizer misses last wake pulse when CMD.ST bit is cleared in aggressive power mode    '
p556
sg15
S' :    If the P#CMD.ST bit is cleared immediately after the core enters the low power mode using aggressive power management (after the last outstanding command is finished as reported by the CI bits for non-NCQ commands or the SACT bits for NCQ commands), issuing a new command by setting P#CMD.ST and P#CI bits can cause the core to get stuck trying to wake up.     Projected ImpactJEEHEHRECONSTRUCT:    The PDMA state machine (portsm_cs) remains in PM_WakeLink state as the three pulses (two acks and one wake) generated are close to each other on the pulse synchronizer (pm_host_ack/wake) causing the synchronizer to miss the last wake pulse. The core does not process any new commands issued.    Under the normal operation, the P#CMD.ST bit is not cleared.    The severity is low. The probability is low.    '
p557
sg17
S' NXP'
p558
sa(dp559
g3
S' Cortex-A8'
p560
sg5
g12
sg7
S' '
p561
sg9
g12
sg11
g12
sg13
S' 12374      SRTC loses data while powering up/down    '
p562
sg15
S' :    In rare cases the Secured Real Time Counter (SRTC) module can incorrectly invalidate its counters. During a power up or down sequence, the SRTC module supply source is shifted between a coin cell (NVCC_SRTC_POW) and VDDA. The signal that initiates the supply switch from NVCC_SRTC_POW to VDDA is generated based on the output of the LDO regulator which powers up when VDD_REG is applied. If VDDA is not present before VDD_REG, the logic switches to the power supply that\xe2\x80\x99s not available yet. When this occurs, the SRTC module may incorrectly report a security violation causing the data (counter and register values) to be lost.    Devices may not function properly due to incorrect toggling of the TEST_MODE input (refer to    erratum ENGcm12374). For security reasons, toggling of the TEST_MODE signal causes the register contents of the SRTC to be cleared.     Projected ImpactJEEHEHRECONSTRUCT:    \xe2\x80\xa2 The SRTC module may experience an inadvertent register reset during power up or power down events of the IC. A clock tampering security violation is incorrectly recorded in the SRTC status register.    \xe2\x80\xa2 The loss of register contents during a power cycle prevents the module from maintaining the time of day functionality.    \xe2\x80\xa2 Both the secure and non-secure operation of the SRTC module are impacted.    \xe2\x80\xa2 The SRTC module can still be used for applications that do not require the registers to be preserved over a power cycle.    Workaround:    There is no guaranteed workaround that prevents the SRTC counter reset issue from occurring.    Hence it is recommended to use an external RTC solution (PMIC or standalone RTC) to completely avoid the issue. To reduce the likelihood of the SRTC data loss issue, a modified power up/down sequence can be used:    \xe2\x80\x94 The NVCC_RESET supply must ramp up along with the VCC supply.    \xe2\x80\x94 The power up sequence must bring up the supplies in the following order: VCC => VDDA => VDD_REG    The ramping supply must be fully powered up and stable per the datasheet before ramping up the next supply in the above sequence.    The power down sequence must shut down the supplies in the following order: VCC => VDD_REG => VDDA or    VCC => VDDA => VDD_REG12SPACEJEEHEHNOTE      The above power sequences reduce the likelihood of the SRTC data loss issue, however does not guarantee that the issue can be completely avoided.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    101'
p563
sg17
S' NXP'
p564
sa(dp565
g3
S' Cortex-A8'
p566
sg5
S' :    The data should be shifted to the right location by the SDMA script or by the software in case of direct access to the register.    '
p567
sg7
S' '
p568
sg9
S' :    No fix scheduled    '
p569
sg11
g12
sg13
S' 11129      SSI: In AC97, 16-bit mode, received data is shifted by four bit locations    '
p570
sg15
S' :    In AC97, 16-bit mode, the Rx data is received in bits [19:4] of RxFIFO, instead of [15:0] bits.     Projected ImpactJEEHEHRECONSTRUCT:    The SDMA script should be updated accordingly to perform the shift to the right location on the fly during data transfer. If the data register is accessed directly by software, it should account for the shifted data and perform shifting to the right location.    '
p571
sg17
S' NXP'
p572
sa(dp573
g3
S' Cortex-A8'
p574
sg5
S' :    This should not happen in real system because when configured correctly, the USB should not get an error response. If it happens, then Garbage In Garbage Out.    '
p575
sg7
S' '
p576
sg9
S' :    No fix scheduled    '
p577
sg11
g12
sg13
S' 11151      USB: Erroneous descriptor handling by USBOH module    '
p578
sg15
S' :    The USBOH core uses the erroneous hrdata (when hresp is high) and results in the false USB    transfer at the external Interface.     Projected ImpactJEEHEHRECONSTRUCT:    False transfer of USB.    '
p579
sg17
S' NXP'
p580
sa(dp581
g3
S' Cortex-A8'
p582
sg5
S' :    None. Need to add transceiver for on board connection.     WorkaroundsJEEHEHRECONSTRUCT:    1. Set Stream Disable bit (SDIS) in the USBMODE register. This forces the controller to load an entire packet in the FIFO before starting to transmit on the USB bus. Hence, the FIFO never underruns. This somewhat reduces the max bandwidth of the USB since there is idle time as the controller waits for the entire packet to be loaded.    2. Instead of setting SDIS, the FIFO threshold can be increased so that more data is in the FIFO    before a packet transmit is started. This increases the tolerance to bus latency and avoids FIFO    underrun. The threshold can be increased by using higher values for the TXTHRESHOLD    filed in the TXFILLTUNING register. The default value is 2 bursts (64 bytes if burst size=8).    '
p583
sg7
S' '
p584
sg9
S' :    No fix scheduled. Feature is removed from the reference manual.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    10512SPACEJEEHEHERR00630812SPACEJEEHEHERR006308      USB: Host controller lock-up issue       Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    106    Freescale Semiconductor10380'
p585
sg11
g12
sg13
S' 11331      USB: High Speed Transceiverless Logic interface (HS-TLL) and Full Speed Transceiverless Logic interface (FS-TLL) USB12SPACEJEEHEHinterfaces are not supported      '
p586
sg15
S' :      HS-TLL and FS-TLL are not supported. These features will be removed from the specification.     DescriptionJEEHEHRECONSTRUCT:    The USB host controller can lock up when a FIFO underrun occurs on a non-32-bit aligned data buffer. This applies to both the Host controller and the OTG controller in Host mode.     Projected ImpactJEEHEHRECONSTRUCT:    Removed support for the option of on board USB connection without transceiver.     Projected ImpactJEEHEHRECONSTRUCT:    Ethernet over USB is sensitive to trigger this issue since the data buffers in this case are usually not 32-bit aligned (in Linux).    '
p587
sg17
S' NXP'
p588
sa(dp589
g3
S' Cortex-A8'
p590
sg5
S' :    None. There is no firmware workaround fix for this erratum.    '
p591
sg7
S' '
p592
sg9
S' :    No fix scheduled    '
p593
sg11
g12
sg13
S' 10380      VPU: JPEG decoder does not support different AC/DC Huffman tables for Cb and Cr    '
p594
sg15
S' :    There is a limitation when selecting different Huffman tables for AC/DC coefficients for the two chrominance components, Cb and Cr. The JPEG decoder design cannot handle two different Huffman tables for Cb and Cr. Cb and Cr are assumed to use the same Huffman table, which is true in most cases.     Projected ImpactJEEHEHRECONSTRUCT:    The bug occurs when the two chroma components, Cb and Cr, use different Huffman tables for AC/DC coefficients. Therefore, if Cb and Cr use the same Huffman table, this problem does not occur. Normally, JPEG streams use the same Huffman tables for Cb and Cr. It should be rare for JPEG streams to use different Huffman tables for the two chroma components.    There is a large visual quality degradation. However, in reality, the probability of using two different Huffman tables for Cb and Cr is low. As a result, the overall impact for JPEG decoding should not be significant.    '
p595
sg17
S' NXP'
p596
sa(dp597
g3
S' Cortex-A8'
p598
sg5
S' :    Do not activate the automatic clock gating and use the software implementation for VPU clock gating, instead. The VPU clock is gated on before sending a command and gated off after receiving interrupt of the command.    '
p599
sg7
S' '
p600
sg9
S' :    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    108    Freescale Semiconductor11856'
p601
sg11
g12
sg13
S' 11195      VPU may miss generating encoding/decoding interrupt when automatic clock gating is activated    '
p602
sg15
S' :    If the CMEOR bit in CCM is not overridden, the VPU clock can be gated off automatically by the vpu_idle signals, while the VPU enters idle state. The VPU may miss generating the decoding/encoding done interrupt when the clock is automatically gated off by the vpu_idle signal.     Projected ImpactJEEHEHRECONSTRUCT:    The automatic clock gating can be disabled and replaced by software controlled clock gating with minor impact to power saving.    '
p603
sg17
S' NXP'
p604
sa(dp605
g3
S' Cortex-A8'
p606
sg5
S' :    None    '
p607
sg7
S' '
p608
sg9
S' :    Fixed in i.MX53 revision 2.1.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    109'
p609
sg11
g12
sg13
S' 11856      IPU and VPU may present some artifacts when running at12SPACEJEEHEH200MHz      '
p610
sg15
S' :      Due to a memory timing problem on memories used in the i.MX53 IPU and VPU, these blocks may miscalculate incoming data for decoding. The problem occurs when the IPU and VPU are running at max frequency of 200MHz.     Projected ImpactJEEHEHRECONSTRUCT:    Some artifacts may be seen on the decoded image.    '
p611
sg17
S' NXP'
p612
sa(dp613
g3
S' Cortex-A8'
p614
sg5
g12
sg7
S' '
p615
sg9
g12
sg11
g12
sg13
S' 12290      eSDHCv3 on eSDHC3 port has setup timing issue in SD SDR12SPACEJEEHEHmode      '
p616
sg15
S' :      When eSDHC3 port is used in single data rate (SDR) SD mode, it cannot meet the required setup time to operate at a maximum frequency of 50MHz. In this mode it can support up to 45MHz for SD clock frequency. In EMMC4.4 mode, the required setup time is smaller, thus there is no issue and up to 52MHz is supported.     Projected ImpactJEEHEHRECONSTRUCT:    For SD cards, which can support 50MHz clock, this frequency may not be achieved on the eSDHC3 port in SDR mode thus affecting bandwidth. Nevertheless, no issue has been reported so far using 50MHz. There is no impact on other SD ports.    Software Workaround:    Use a SD clock frequency up to 45MHz for this port when SD card is used.    Silicon Fix:    No plan to fix.    '
p617
sg17
S' NXP'
p618
sa(dp619
g3
S' Cortex-A8'
p620
sg5
g12
sg7
S' '
p621
sg9
g12
sg11
g12
sg13
S' 12360      eSDHC AutoCMD12 and R1b polling problem    '
p622
sg15
S' :    Occurs when a pending command which issues busy is completed. For a command with R1b response, the proper software sequence is to poll the DLA for R1b commands to determine busy state completion. The DLA polling is not working properly for the ESDHC module. This is relevant for all eSDHC ports (eSDHC1-4 ports).     Projected ImpactJEEHEHRECONSTRUCT:    DLA bit in PRSSTAT register cannot be polled to wait for busy state completion.    Software Workaround:    Updated block guide to reflect that DLA is not applicable to detect busy state, instead, should poll bit 24 in PRSSTAT register (DLSL[0] bit) to check that wait busy state is over.    Silicon Fix:    No plan to fix.    '
p623
sg17
S' NXP'
p624
sa(dp625
g3
S' Cortex-A8'
p626
sg5
g12
sg7
S' '
p627
sg9
g12
sg11
g12
sg13
S' 12354      SCC key fusing with a non-unique value    '
p628
sg15
S' :    The 256-bit SCC fuse (SCC_KEY[255:0]) has been programmed with the same value across i.MX53 devices. The SCC key should be unique per device, to ensure that data encrypted with one i.MX53 cannot be decrypted by another i.MX53.     Projected ImpactJEEHEHRECONSTRUCT:    A non-unique SCC_KEY means that the binding of the encrypted data to the IC is no longer unique to that IC. This affects the secure off-chip key storage functionality. Secure off-chip key storage may be used to protect data that is persistent in nature. Secure off-chip key storage is only enabled when the IC has been booted using the secure functionality. If the IC is not securely booted then secure off-chip key storage is not an available feature and thus the IC is not affected by this erratum.    Software Workaround:    None.    Silicon Fix:    No silicon fix required. The unique SCC_Key has been implemented.    Contact factory for additional information.    Chip Errata for the i.MX53, Rev. 6    112    Freescale Semiconductor12363'
p629
sg17
S' NXP'
p630
sa(dp631
g3
S' Cortex-A8'
p632
sg5
g12
sg7
S' '
p633
sg9
g12
sg11
g12
sg13
S' 12363      NFC wrong indication of ECC uncorrectable error occurrence after reading the spare area    '
p634
sg15
S' :    In the event that an uncorrectable ECC error occurs while reading Main/Main+Spare from the NAND device, then all spare read operations would fail until the next successful Main/Main+Spare read operation.     Projected ImpactJEEHEHRECONSTRUCT:    The NFC wrongly indicates ECC error.    Software Workaround:    Read main or main+spare after first uncorrectable error.    Silicon Fix:    No hardware fix scheduled. This issue will be addressed in the next BSP release.    '
p635
sg17
S' NXP'
p636
sa(dp637
g3
S' Cortex-A8'
p638
sg5
g12
sg7
S' '
p639
sg9
g12
sg11
g12
sg13
S' 12377      ESDCTLv2 might fail to wait the minimal time between DDR clk    & clk enable    '
p640
sg15
S' :    The DDR2 JEDEC standard requires the DDR clock (SDCLK) to start toggling at least 200 \xce\xbcS    before the clock enable (SDCKE) signal rise. For DDR3, the minimum time is 500 \xce\xbcS. In the ESDCTLv2 IP implementation, the actual number that is counted is actually a half CKIL cycle less than described in the eSDCTL chapter in i.MX53 RM. Thus, when programming the recommended value in SDE_to_RST field, the result is a half CKIL cycle less than expected, thus violating the above JEDEC requirement. Note that CKIL is a 32 KHz clock.    Impact:    So far, no issue has been seen.    Software Workaround:    For DDR2, in the RST_to_CKE field (ESDCTL_ESDOR[5:0]), program a value of 10 h, to toggle SDCLK at least 7 CKIL cycles before SDCKE assertion. For DDR3, program a value of 23 h to toggle SDCLK at least 33 CKIL cycles before SDCKE assertion.    Silicon Fix:    No hardware fix is required. The i.MX53 RM and the BSP will be updated accordingly.    Chip Errata for the i.MX53, Rev. 6    114    Freescale Semiconductor12379'
p641
sg17
S' NXP'
p642
sa(dp643
g3
S' Cortex-A8'
p644
sg5
g12
sg7
S' '
p645
sg9
g12
sg11
g12
sg13
S' 12379      EIM: AUS mode is non functional for devices larger than 32MB    '
p646
sg15
S' :    When the AUS bit is set, the address lines of the EIM are un-shifted. By default, AUS bit is cleared and address lines are shifted according to port size (8, 16 or 32 bits). Due to an error the address bits 27:24 are shifted when AUS=1. For example, CPU address: 0xBD00_0000 ([A27:20]=1101    0000 becomes: 0xB600_0000 ([A27:20]=0110 0000) on the EIM bus. Since A[27:25] is shifted to    [A26:24] and A[23:0] is not shifted. As a result A[24] is missed.    Impact:    If the memory used does not exceed 32 MB, there is no impact.    This mode is related to a unique memory configuration that is not often used. Most systems can work in the default mode (AUS=0). Board designers should connect the EIM address bus without a shift (for example, A0\xe2\x86\x92A0 and A1\xe2\x86\x92A1), while working in AUS=0 mode.    Software Workaround:    \xe2\x80\xa2 Use the AUS = 0 mode (default) while connecting the address signals without a shift (for example, A0\xe2\x86\x92A0 and A1\xe2\x86\x92A1).    \xe2\x80\xa2 For AUS=1, for devices larger than 32 MB, need to build a memory map that takes this shifting into consideration and does not include A[24] line.    Silicon Fix:    No hardware fix is scheduled.    '
p647
sg17
S' NXP'
p648
sa(dp649
g3
S' Cortex-A8'
p650
sg5
g12
sg7
S' '
p651
sg9
g12
sg11
g12
sg13
S' 12385      ESAI: Channel misalignment may happen in ESAI transmitter data stream when TIEN bit is zero    '
p652
sg15
S' :    When the TIEN bit is set to low, the ESAI transmitter may misalign the data with the desired channels, regardless of the number of pre-loaded data written to ETDR register. As a result, the audio may be transmitted to the wrong channel, causing a channel mismatch. In case of two channels, the channels could be swapped. If TIEN bit is set to high, and the number of pre-loaded data is equal to the number of channels, the data will be sent to the correct channel.     Projected ImpactJEEHEHRECONSTRUCT:    The audio may be transmitted to the wrong channel when TIEN=0.    Workaround:    Set TIEN bit, and write the proper initial words to ETDR register.12SPACEJEEHEH'
p653
sg17
S' NXP'
p654
sa(dp655
g3
S' Cortex-A8'
p656
sg5
g12
sg7
S' '
p657
sg9
g12
sg11
g12
sg13
S' 12386      ETB may not function properly at 1.2GHz    '
p658
sg15
S' :    The operation of the Embedded Trace Buffer (ETB) is not guaranteed at 1.2 GHz. This issue does not occur on most i.MX53 parts.     Projected ImpactJEEHEHRECONSTRUCT:    In some cases, the ETB cannot be used at above 1 GHz, by using the default ARM voltage settings.    Workaround:    \xe2\x80\xa2 Increase the ARM voltage during debug at 1.2 GHz, maintaining the voltage limits specified in the datasheet.    \xe2\x80\xa2 Perform the debug at 1 GHz instead of at 1.2 GHz.    Silicon Fix:    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    117'
p659
sg17
S' NXP'
p660
sa(dp661
g3
S' Cortex-A8'
p662
sg5
S' :    Make only aligned accesses to the AIPS internal registers.    '
p663
sg7
S' '
p664
sg9
S' :    No fix scheduled    '
p665
sg11
g12
sg13
S' 07298    ENGcm07298    AIPS: Unaligned access causes abort on writes to the internal registers    '
p666
sg15
S' :    Unaligned access to AIPS can be driven high by SAHARA, DAP, and FEC. If they access the AIPS    internal registers during an unaligned access, an ABORT occurs.     Projected ImpactJEEHEHRECONSTRUCT:    Unaligned accesses to the AIPS internal registers fail.    '
p667
sg17
S' NXP'
p668
sa(dp669
g3
S' Cortex-A8'
p670
sg5
S' :    The erratum occurs only for the shared device memory regions and not for the non-shared device memory regions. Therefore, this problem can be worked around by using the remap registers to remap all the shared device transactions to the non-shared device. The only difference between the shared device and the non-shared device is the attributes produced for the transaction on the AXI interface. Therefore, the user does not experience any impact in terms of performance from this workaround.    Another possible use of the TEX remap is to map the shared device regions to the strongly ordered transactions. This second remapping option is less desirable as it affects the performance, as strongly ordered transactions are not buffered.    The following code sequence is required to setup and enable the TEX remap. This should be done before enabling the MMU.    ; Setup PRRR so device is always mapped to non-shared    MRC p15, 0, r0, c10, c2, 0; Read Primary Region Remap Register BIC r0,#3<<16    MCR p15, 0, r0, c10, c2, 0; Write Primary Region Remap Register    ; Enable TEX remap    MRC p15, 0, r0, c1, c0, 0; Read Control Register    ORR r0,r0,#1<<28    MCR p15, 0, r0, c1, c0, 0; Write Control Register    Another valid workaround is to place a data memory barrier (DMB) between all the memory    accesses to the device regions, where ordering is required between a store and a subsequent load to    a different physical address.    '
p671
sg7
S' '
p672
sg9
S' :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    12    Freescale Semiconductor09830    '
p673
sg11
g12
sg13
S' 09830    ENGcm09830    ARM: Load and Store operations on the shared device memory regions may not complete in program order    '
p674
sg15
S' :    If a sequence of load and store operations are performed to different address locations in a memory region that is marked as shared device, then a load can incorrectly bypass a store.    The issue is reported by ARM, erratum ID 709718, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the load address and store address are mapped to access the memory region of the same device, and the device relies on memory operations to occur in program order, then this device may not operate as intended.    '
p675
sg17
S' NXP'
p676
sa(dp677
g3
S' Cortex-A8'
p678
sg5
S' :    If a workaround for this erratum is desired, there are two options. The first simple option is to add a NOP immediately following the MCR register write in any case where encountering this erratum may be a concern. By adding a single NOP, the minimum required cycle window is guaranteed and the erratum does not occur.    The second option is to set bit 16 in the CP15 Auxiliary Control Register. This causes a pipeline flush on every write to the CP15 register and ensures that the RAW hazard condition does not occur.    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX51, Rev. 5    14    Freescale Semiconductor07788    The second workaround has the advantage of requiring just one change to the CPU configuration that can be done statically. The disadvantage is that it has some impact on the performance of write updates to CP15 registers that would not otherwise require a pipeline flush. This second workaround can be implemented using the following code sequence to be executed in the Secure state:    MRC p15, 0, R1, c1, c0, 1    ; read Aux Ctl Register    ORR R1, R1 #(1 << 16)    ; set bit 16 to 1    MCR p15, 0, R1, c1, c0, 1    ; write Aux Ctl Register    '
p679
sg7
S' '
p680
sg9
S' :    No fix scheduled    '
p681
sg11
g12
sg13
S' 07788    ENGcm07788    ARM: A RAW hazard on certain CP15 registers can result in a stale register read    '
p682
sg15
S' :    Under certain conditions, a sequence of instructions where an MCR instruction that writes a CP15    register is closely followed by an MRC that reads the same register, are executed such that the RAW    hazard is not detected and the MRC reads the old value of the register. This scenario can only occur for accesses to one of the following four CP15 registers:    \xe2\x80\xa2 CacheSizeSelection Register    \xe2\x80\xa2 Thread and ProcessID user read/write    \xe2\x80\xa2 Thread and ProcessID user read only    \xe2\x80\xa2 Thread and ProcessID privilege only    These registers are both readable and writable and have been optimized to execute in a single cycle.    Furthermore, this scenario occurs only when a specific sequence of instructions is executed between the MCR and the MRC. The sequence must meet two criteria:    \xe2\x80\xa2 It must take less than three cycles to execute    \xe2\x80\xa2 It must have one of the instructions in the following list:    \xe2\x80\x94 ARM PLD with [Rn, -Rm, <shift>] addressing mode    \xe2\x80\x94 ARM or Thumb PLD with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    \xe2\x80\x94 Thumb or ThumbEE load/store instruction with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    \xe2\x80\x94 Thumb TBB instruction    The issue is reported by ARM, erratum ID 588115, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, the old stale value of the register is read rather than the newly written value, in which case the system software may appear to behave incorrectly. However, the usage model for such a software sequence is unclear, and hence the likelihood of encountering it in practice is very low, especially considering the requirement of the second unrelated instruction that must also fall between the MCR and the MRC.    '
p683
sg17
S' NXP'
p684
sa(dp685
g3
S' Cortex-A8'
p686
sg5
S' :    As the processor directly does not make use of ARPROT[0], any workaround would be specific to the device that makes use of the values broadcast on ARPROT[0]. The most likely usage would be some form of system memory protection unit. If such protection unit exists, it may need to filter out any access to the page tables from the address space that is protected to operate properly. This implies that the external protection unit cannot provide additional protection for the page tables.    For example, the page table cannot be inserted in a Secure RAM which cannot be accessed in User mode, as in this case, an additional protection is added beside the MMU. Alternatively, the CSU    can be configured to transform User access to Privileged on addresses used by PAGE TABLE.    '
p687
sg7
S' '
p688
sg9
S' :    No fix scheduled    '
p689
sg11
g12
sg13
S' 04786    ENGcm04786    ARM: ARPROT[0] is incorrectly set to indicate a USER    transaction for memory accesses generated from user    tablewalks    '
p690
sg15
S' :    All memory transactions performed as part of a tablewalk should be considered Privileged, even in the User mode. However, Cortex-A8 incorrectly marks memory transactions generated from tablewalks performed in User mode as the user transactions on the AXI bus. This indication is given by the ARPROT[0] signal, which is set to zero during the transaction.    The conditions are as follows:    \xe2\x80\xa2 Cortex-A8 must be in user mode    \xe2\x80\xa2 A memory transaction (instruction or data) misses in the TLB and causes a tablewalk    \xe2\x80\xa2 The address for the page table entry is not found in the L2 cache, resulting in an external memory request    \xe2\x80\xa2 This erratum occurs when APROT[0] incorrectly indicates a user transaction for this memory request on the AXI bus.    The issue is reported by ARM, erratum ID 488063.     Projected ImpactJEEHEHRECONSTRUCT:    As the values broadcast on ARPROT[0] are completely transparent to the software, the implications for this erratum are only on a specific subset of the processor systems, specifically for a system that includes some form of system level memory protection unit, that uses the ARPROT    bits to determine if a memory request can be allowed. For any system that does include such a unit, that unit may report false errors on page table accesses due to this erratum.    '
p691
sg17
S' NXP'
p692
sa(dp693
g3
S' Cortex-A8'
p694
sg5
S' :    When transitioning security state, the secure monitor software should save the current CSSELR    value (corresponding to the security state the processor is transitioning out of) and restore the previously saved CSSELR value (corresponding to the security state the processor is transitioning into).     WorkaroundsJEEHEHRECONSTRUCT:    There are two feasible workarounds that can be used for this erratum. The first workaround is to place a DMB or DSB barrier at the end of each cache clean routine or preload engine memory clean sequence. This barrier operation ensures that the cleaned line goes out and is seen by main memory before the store is executed and therefore guarantees that the clean is done correctly and memory contains the correct final value.    This workaround is consistent with the ARM recommended practice for ending the maintenance routine. The above workaround is convenient to implement and should work for all expected usage models. However, there is still the possibility that an interrupt can be taken during the clean routine, and the interrupt handler can perform a store operation to the line just cleaned, allowing for the scenario which can lead to the erratum.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    19'
p695
sg7
S' '
p696
sg9
S' :    No fix scheduled    '
p697
sg11
g12
sg13
S' 04785    ENGcm04785    ARM: C15 Cache Selection Register (CSSELR) is not banked    '
p698
sg15
S' :    ARMv7 architecture specifies that the CSSELR should be banked between Secure and Non-secure states. Cortex-A8 does not currently bank this register.    The conditions are as follows:    \xe2\x80\xa2 The system should have an active process in secure state and an active process in non-secure state at the same time.    \xe2\x80\xa2 The system should perform cache maintenance operations in both secure and non-secure processes.    The issue is reported by ARM, erratum ID 485963, Category 21.     DescriptionJEEHEHRECONSTRUCT:    When a Clean to Point of Coherency (PoC) by MVA operation is performed, or the Preload Engine is programmed to clean a region of memory from the L2 cache, a cache line from that region can be corrupted with a stale copy of memory, and a memory store operation is lost.    The conditions are as follows:    \xe2\x80\xa2 A Cache Clean by MVA to the PoC instruction is executed to clean cache line A, or the preload engine is configured to clean a memory region which includes cache line A. Either of the operations result in the placement of cache line A into a victim buffer for writeback to external memory. It also keeps the line still valid in the L2 cache.    \xe2\x80\xa2 A memory store operation is performed to the same cache line A that is evicted by the cache clean operation. This operation results in a modification of cache line A in the L2 cache (but not to the copy of the line that may still remain in the victim buffer if memory response is slow).    \xe2\x80\xa2 A cache eviction is done of cache line A due to an unrelated memory request to load cache line B. The modified copy of cache line A is placed in a victim buffer. At this point, the two victim buffers may contain two different versions of cache line A. As each victim buffer uses a different AXI ID and arbitrates independently for the AXI bus, there is no guarantee for the order in which the memory updates occur, and the store operation may be overwritten by the cache clean operation, leaving the external memory with stale contents.    The issue is reported by ARM, erratum ID 586323, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    A cache cleaning sequence that reads the CSSELR may not work as expected. The published sequence for cleaning the entire cache (see ARM Architecture Reference Manual) includes setting the CSSELR followed by a read from the selected Cache Size ID register (CCSIDR). If the non-secure side executes this sequence, and is encountered by a secure interrupt between the setting of the CSSELR and the reading of the selected CCSIDR, then there is a possibility that the secure side may also use the CSSELR. On returning to the non-secure side, the CSSELR value may have changed, which makes the cache cleaning sequence to malfunction. Similarly, a non-secure interrupt can cause a secure cache cleaning sequence to malfunction.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, one or more store operations are lost, resulting in incorrect program behavior. This can occur for any application which either uses the preload engine to clean a memory region, or uses Clean by MVA to PoC maintenance operations to clean a region of memory.    '
p699
sg17
S' NXP'
p700
sa(dp701
g3
S' Cortex-A8'
p702
sg5
S' :    If full PIPT caching support is not required by the operating system, or the processor includes a 16 Kbyte L1 data cache, then no workaround is required. If alias conditions can occur, then the workaround is to guarantee that a cache maintenance operation is not immediately preceded by a non-cacheable memory request. This is guaranteed by initiating every cache maintenance by MVA routine with a cacheable load or store request immediately preceding the main loop and ending with a DSB barrier operation at the end of the loop. The load or store that precedes the loop can be done to any cacheable memory location. In addition, both interrupts and aborts should be masked during the cache maintenance routine. Interrupt masking is required to prevent a non-cacheable memory request, either fully executed or in a branch shadow, from initiating the sequence that can 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    21'
p703
sg7
S' '
p704
sg9
S' :    No fix scheduled    '
p705
sg11
g12
sg13
S' 07784    Another workaround that avoids even the case mentioned above, is to convert all Clean by MVA to PoC operations to Clean and Invalidate by MVA to PoC as described in the code sequence as follows:    \xe2\x80\xa2 Replace all uses of: MCR p15, 0, <Rn>, c7, c10, 1;    \xe2\x80\xa2 Clean Data cache line by MVA to PoC with this instruction: MCR p15, 0, <Rn>, c7, c14, 1;    \xe2\x80\xa2 Clean and Invalidate cache line by MVA to PoC.    There is no Preload Engine equivalent for the second workaround option as it is not possible to configure the preload engine to perform a clean and invalidate operation. Therefore, if there are concerns that the DSB based workaround is insufficient, then it is advisable to not use the Preload Engine for cleaning memory regions. The preload engine can be configured such that it is not accessible at user/privilege and nonsecure/secure level of granularity.    For more information on Preload Engine configurability, see Cortex-A8 Technical Reference Manual.    '
p706
sg15
S' :    If a non-cacheable memory request is subsequently followed by any cache maintenance operation done by MVA, then the memory can be corrupted.    The conditions are as follows:    \xe2\x80\xa2 The L1 data cache must be of size 32 Kbyte    \xe2\x80\xa2 The L1 data cache hardware alias checks are enabled (the L1ALIAS bit in the Auxiliary Control Register is set to 0)    \xe2\x80\xa2 The virtual memory management used by the operating system does not follow the page coloring guidelines and allows virtual to physical address alias cases to exist on bit 12 of the address    \xe2\x80\xa2 A non-cacheable memory request to normal, device, or strongly ordered memory is subsequently followed by a cache maintenance operation done by MVA without any cacheable memory operations executed in between. The non-cacheable memory request can be fully executed, or can be a speculative instruction in the branch shadow that subsequently is flushed.    When the above conditions are met and the cache maintenance operation is performed to generate a hash alias scenario on its cache lookup, memory corruption or a false parity error can occur.    The issue is reported by ARM, erratum ID 586324, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, then memory can be corrupted or a false parity error can be generated. In addition, even if the workaround as described below is implemented, it is possible that a nonsecure maintenance operation could result in the invalidation of a secure memory location. Therefore, this could possibly be viewed as an avenue for a security attack.    However, the contents of secure memory cannot be viewed as a direct result of this erratum and the lack of consistent repeatability makes it very difficult for the user to make use of this erratum as a security attack.    '
p707
sg17
S' NXP'
p708
sa(dp709
g3
S' Cortex-A8'
p710
sg5
S' :    The software workaround for this erratum is to disable the write allocate in the L2 cache, as shown in the following instruction sequence:    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg Disabling the write allocate in the L2 cache can impact the performance of some applications. If this performance impact is deemed to be very high, there are two other software workarounds that can be used. The first is to disable write allocate around each sequence of clean by MVA to PoC or clean/invalidate by MVA to PoC instructions, as shown in the following instruction sequence: MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg    <perform sequence of MVA operations here>    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg BIC <Rd>, <Rd>, #(1 << 22); clear the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg The final workaround that can be implemented is to perform each maintenance operation twice with interrupts disabled. By performing the operation twice in back-to-back successions with no other memory operations executed in between, it can be assured that the line is evicted from both L1 and L2 cache and written out to main memory.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    23'
p711
sg7
S' '
p712
sg9
S' :    No fix scheduled    '
p713
sg11
g12
sg13
S' 07786    result in this erratum. If there are concerns about the interrupt latency, the maintenance loop can be amended to enable and disable the interrupts directly around the maintenance operation. This impacts the time taken to complete the maintenance loop.    To workaround any concerns of a potential security attack due to this erratum, all secure memory should be marked as inner write through. This can be done either by using the caching attributes in the page tables for all secure page tables or by making use of the secure banked version of the remap registers. Apart from making all secure memory write through, a routine should be run out of reset to completely fill the cache with dummy data, to prevent invalid, uninitialized data in the cache from being written out to memory and potentially corrupting secure memory. Making all secure memory inner write through guarantees that even if the invalidation of a secure line in the L1 cache occurs due to this erratum, the correct data is not lost.    '
p714
sg15
S' :    When a Clean to Point of Coherency or Clean and Invalidate to Point of Coherency by MVA operation is performed, it is possible that the line remains present in the L2 cache and any dirty data is not pushed out on to the AXI bus to main memory. This can occur whenever the requested address is present in the L1 cache but not the L2 cache.    The conditions are as follows:    \xe2\x80\xa2 The memory region being cleaned is configured in write allocate mode    \xe2\x80\xa2 The cache line being cleaned is initially present in the L1 cache and not in the L2 cache The issue is reported by ARM, erratum ID 586320, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If a Clean or Clean and Invalidate operation does not operate as intended, and leaves the data present in the L2 cache, the memory coherency in the system can no longer be guaranteed.    Therefore, this erratum impacts any code sequence used to maintain the system coherence.    '
p715
sg17
S' NXP'
p716
sa(dp717
g3
S' Cortex-A8'
p718
sg5
S' :    There are two viable workarounds for this erratum. One workaround is, not to configure the L2    cache as an inner cache, but maintain the default setting as an outer cache. The second workaround is to use the remap registers to remap the inner cache attributes from write allocate to write back instead.    '
p719
sg7
S' '
p720
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p721
sg11
g12
sg13
S' 07782    Perform the following steps:    1. Disable the interrupts and the imprecise aborts    2. Execute the maintenance operation first pass    3. Execute the same maintenance operation, second pass12SPACEJEEHEH4. Enable the interrupts and the imprecise aborts      Repeat the above sequence for each cache maintenance operation. Interrupts can remain disabled for a longer sequence of maintenance operations, but this has a negative effect on interrupt latency.    This workaround has a performance impact on the execution time of cache maintenance operations.    '
p722
sg15
S' :    Under specific set of conditions, the stale data saved in the L2 cache can be erroneously returned to the processor on a subsequent load instruction.    The conditions are as follows:    \xe2\x80\xa2 The L2 cache must be configured as an inner cache rather than as an outer cache    \xe2\x80\xa2 The L2 cache must be configured to use write allocate memory type The issue is reported by ARM, erratum ID 468413, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum occurs, stale data can be read by a subsequent load instruction, resulting in an incorrect program behavior.    '
p723
sg17
S' NXP'
p724
sa(dp725
g3
S' Cortex-A8'
p726
sg5
S' :    One software workaround for this erratum is, not to use the swap instructions. If swap instructions are to be used in the code base, the other software workaround is to disable the PLD instructions and make them a NOP. The code required to implement this workaround is as follows: MRC p15, 0, r0, c1, c0, 1; read register    ORR r0, r0, #(1<<9); PLDNOP - force PLD to be NOP    MCR p15, 0, r0, c1, c0, 1; write register    This workaround has some performance impact on the peak memory copy bandwidth.    '
p727
sg7
S' '
p728
sg9
S' :    No fix scheduled    '
p729
sg11
g12
sg13
S' 04761    ENGcm04761    ARM: Swap instruction, preload instruction, and instruction fetch request can interact and cause deadlock    '
p730
sg15
S' :    Three memory requests in the L2 cache can interact and result in a deadlock condition. The exact scenario involves a dependency chain of three requests, an instruction fetch request, a memory preload instruction (PLD) and a swap instruction (SWP). In this dependency loop, no request can progress as each one of them is dependent on the next request. That is, the PLD request cannot complete as the IF request is pending to use the BIU. The IF request cannot complete because of the pending SWP request, and the SWP request is not allowed to complete as it is waiting on the PLD to complete before obtaining the lock on the bus.    The conditions are as follows:    \xe2\x80\xa2 PLD instructions must be used by the processor    \xe2\x80\xa2 SWP instructions must be used by the processor    The issue is reported by ARM, erratum ID 468415, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    This erratum only impacts the users of swap instructions. Swap instructions have been deprecated from the ARMv7 version of the ARM Architecture as its functional use in terms of setting up semaphores is now replaced from the ARMv6 architecture forwards by the LDREX and STREX    instructions. If this erratum is encountered and the processor deadlock occurs, it can only be interrupted by resetting the processor.    '
p731
sg17
S' NXP'
p732
sa(dp733
g3
S' Cortex-A8'
p734
sg5
S' :    There are many software solutions for this erratum and only one has to be applied. The recommended solution, if possible, is to map cacheable areas of memory so that both secure and non-secure do not share the same physical address space.    Another possible solution is to force NEON to cache in the L1 data cache. This can be programmed using the Auxiliary Control Register bit [5], L1NEON, as follows: MRC p15, 0, r0, c1, c0,    1; read register    ORR r0, r0, #(1<<5)    ; L1NEON caching enable    MCR p15, 0, r0, c1, c0, 1    ; write register.    Another possible solution is to disable L2 data forwarding from the victim buffers. This can be programmed using the L2 Auxiliary Control Register bit[27], Load data forwarding disable as follows:    MRC p15, 1, r0, c9, c0, 2    ; read register    ORR r0, r0, #(1<<27)    ; L2 load data forwarding disable    MCR p15, 1, r0, c9, c0, 2    ; write register    Both workarounds can be implemented with little or no perceived performance impact in the majority of applications.    '
p735
sg7
S' '
p736
sg9
S' :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    28    Freescale Semiconductor04759    '
p737
sg11
g12
sg13
S' 04759    ENGcm04759    ARM: NEON load data can be incorrectly forwarded to a    subsequent request    '
p738
sg15
S' :    Under very specific set of conditions, data from a Neon load request can be incorrectly forwarded to a subsequent, unrelated memory request.    The conditions are as follows:    \xe2\x80\xa2 Neon loads and stores must be in use    \xe2\x80\xa2 Neon L1 caching must be disabled    \xe2\x80\xa2 Trustzone must be configured and in use    \xe2\x80\xa2 The secure memory address space and the non-secure memory address space both use the same physical addresses, either as an alias or the same memory location or for separate memory locations    The issue is reported by ARM, erratum ID 468414, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, it is possible for a load request to receive the wrong data value which can likely result in incorrect operation of the program.    '
p739
sg17
S' NXP'
p740
sa(dp741
g3
S' Cortex-A8'
p742
sg5
S' :    The workaround for this erratum is to disable write-allocate by programming the L2 Auxiliary Control Register bit[22], Write allocate disable:    MRC p15, 1, r0, c9, c0, 2; read register    ORR r0, r0, #(1&lt;&lt;22); Write allocate disable    MCR p15, 1, r0, c9, c0, 2; write register    Disabling write allocate in the L2 cache could have a performance impact for some applications.    '
p743
sg7
S' '
p744
sg9
S' :    No fix scheduled    '
p745
sg11
g12
sg13
S' 04760    ENGcm04760    ARM: Under a specific set of conditions, processor deadlock can occur when L2 cache is servicing write allocate memory '
p746
sg15
S' :    If a load request is processed which misses the L2 cache, but cannot be immediately forwarded to the BIU, it encounters a special hazard which prevents the request from being required to access the L2 cache RAM again to save power. There can be multiple requestors with unique addresses, (that is, one address per cache line) with this special hazard. All write-allocate requests that access the L2 cache RAM, on port1, do not have address comparators to check for this special hazard condition. So, if a subsequent write-allocate request is issued to the L2 cache RAM on port1 and allocates a victim buffer, then all requests pending with this special hazard must be forced to perform a L2 cache RAM lookup again to maintain memory coherency. There is a 1-cycle window in which the write-allocate request must allocate to a victim buffer and a pending request to the BIU is not prohibited from going to the BIU, such that a deadlock can occur.    The conditions are as follows:    \xe2\x80\xa2 The processor must have L2 cache present and enabled.    \xe2\x80\xa2 The L2 cache must be configured to support the write allocate memory type.    The issue is reported by ARM, erratum ID 468416, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered and processor deadlock occurs, it can only be interrupted by asserting RESET on the processor.    '
p747
sg17
S' NXP'
p748
sa(dp749
g3
S' Cortex-A8'
p750
sg5
S' :    None     WorkaroundsJEEHEHRECONSTRUCT:    The main workaround is to poll the performance counter. The maximum increment in a single cycle for a given event is 2. Therefore, polling can be infrequent as no counter can increment by more than 232 in fewer than 2 billion cycles.    If the main usage model for performance counters is collecting values over a long period, then polling can be used to collect values (and reset the counter) rather than waiting for an overflow to occur. Polling can be done infrequently and overflow can be avoided.    If the main usage model for performance counters relies on presetting the counter to some value and waits for an overflow to occur, then polling can be used to detect when an overflow event is 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    33'
p751
sg7
S' '
p752
sg9
S' :    No fix is scheduled. A clarification will be added to the reference manual.    '
p753
sg11
g12
sg13
S' 10230    ENGcm10230    ARM: Clarification regarding the ALP bits in AMC register '
p754
sg15
S' :    In the register AMC of the Tiger/ARM Platform (0xBASE_0018) the bit ALPEN must be set to 1    and ALP[2:0] must be set to \xe2\x80\x98000\xe2\x80\x99. Other combinations are reserved and must be avoided.     DescriptionJEEHEHRECONSTRUCT:    If the PMU is in use and an overflow event occurs simultaneously with a write to one of the subsets of CP15 and CP14 registers, the overflow event can be lost.    The conditions are as follows:12SPACEJEEHEH1. The performance counters must be in use      2. The performance counter must have an overflow (counter value goes beyond 0xFFFF_FFFF) 3. Simultaneous with the counter overflow, a MCR instruction must be executed that writes to one of the following CP14/CP15 registers:    \xe2\x80\x94 Any PMU register other than PMU counter registers    \xe2\x80\x94 ThumbEE Configuration Register    \xe2\x80\x94 ThumbEE Handler Base Register    \xe2\x80\x94 System Control Register    \xe2\x80\x94 Auxiliary Control Register    \xe2\x80\x94 Secure Configuration Register    \xe2\x80\x94 Secure Debug Enable Register    \xe2\x80\x94 Nonsecure Access Control Register    \xe2\x80\x94 Context ID and Thread ID Registers    \xe2\x80\x94 Coprocessor Access Register    \xe2\x80\x94 Cache Size Select Register    The issue is reported by ARM, erratum ID 628216, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    Memory retention issues unless the guideline is followed.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, the overflow status flag is not set for that counter in the Overflow Flag Status Register, and an interrupt request is not generated, even when the Interrupt Enable Set Register is configured to generate an interrupt on counter overflow.    '
p755
sg17
S' NXP'
p756
sa(dp757
g3
S' Cortex-A8'
p758
sg5
S' :    The only workaround for this erratum is to avoid accessing the Device type memory with Neon store instructions. (There should be no practical case for this, anyway). However, if needed, define the region as Strongly Ordered memory, instead.    '
p759
sg7
S' '
p760
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p761
sg11
g12
sg13
S' 10700    missed. An overflow can be determined to have been missed if the unsigned value in the counter is less than the value preset into the counter. Polling can be done infrequently because of the number of cycles it requires for this check to fail. If the erratum is triggered and an overflow event is missed, the counter sample can be thrown away or the true value can be reconstructed.    '
p762
sg15
S' :    If a Neon store is done to Device type memory and is followed in instruction sequence by a load instruction to Device type memory, it is possible that an unrelated store instruction that is done to cacheable memory and hit the L1 cache has its data dropped and therefore not update memory.    There are three different memory types defined in the ARM architecture namely, Strongly Ordered, Device, or Normal. Device type memory is one of the three different memory types. This region is specified by the page table entries used by the MMU.    The conditions for this erratum are that relatively close in the instruction stream, the following must occur:    \xe2\x80\xa2 A Neon store is done to Device type memory.    \xe2\x80\xa2 A load is executed to Device type memory (any load to Device type memory region, not just from Neon), consecutive to the Neon store.    \xe2\x80\xa2 Several stores hit the L1 cache. (Any store that hit the L1 cache - Neon or integer core. The address does not matter.)    The issue is reported by ARM, erratum ID 507113, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, one or more cacheable stores that hit the L1 cache do not update the cache, leaving stale contents in memory. This is likely to cause observable, incorrect behavior in the application.    The Neon access to memory region marked as Device is not a practical case in general.    '
p763
sg17
S' NXP'
p764
sa(dp765
g3
S' Cortex-A8'
p766
sg5
S' :    A workaround for this erratum is, not to enable the IBE bit. ARM recommends that the IBE bit should not be enabled unless it is required for an erratum workaround.    If the IBE is to be enabled, then the L1 System Array Debug Register 0 should be initialized to a zero value. This register is for RAM array debug purposes and is not used as a part of normal functionality. It is only accessible in a privileged secure mode. Therefore, it can be statically initialized as a part of the boot code sequence. If the register is used for debug purposes, the value should be reset to zero when the debug sequence completes.    The code to initialize the L1 System Array Debug Register 0 is as follows: MOV r1, #0    MCR p15, 0, r1, c15, c1, 0 ; write instruction data 0 register MRC p15, 0, R1, c1, c0, 1 ; read Aux Ctl Register    ORR R1, R1 #(1 << 6) ; set IBE to 1    MCR p15, 0, R1, c1, c0, 1 ; write Aux Ctl Register    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    37'
p767
sg7
S' '
p768
sg9
g12
sg11
g12
sg13
S' 10716    The memory which is Device Shared should be mapped as Normal Outer/Inner Non-Cacheable.    This is the preferred memory type for RAM memory mapped as NCB. Customer software must avoid Device memory types.    Chip Errata for the i.MX51, Rev. 5    36    Freescale Semiconductor10701    ENGcm10701    ARM: BTB invalidate by MVA operations do not work as intended when the IBE bit is enabled    '
p769
sg15
S' :    All BTB invalidate operations, including BTB Invalidate by MVA operations, by default are implemented as a NOP in the Cortex-A8 processor. These operations can be executed as NOPs as flushing BTB entries are not required by the Cortex-A8 processor for correct functionality, and there is no additional performance penalty for an incorrect branch prediction versus a non-prediction. However, it is possible for BTB operations to be enabled by setting the IBE bit in the CP15 Auxiliary Control Register. When enabled in this fashion, BTB invalidate by MVA operations may not work as intended. Instead of writing zeros to the valid bit of the BTB entry matching the MVA provided, the CP15 \xe2\x80\x9cInvalidate Branch Predictor by MVA\xe2\x80\x9d operation writes the value currently in the \xe2\x80\x9cInstruction L1 System Array Debug Register 0.\xe2\x80\x9d This register is not initialized at the reset time and can only be written in secure, privileged modes when CP15SDISABLE is not set.    The conditions are as follows:    1. The branch predictor is enabled (SCTLR.Z = 1)    2. The Auxiliary Control Register IBE bit is set to 1    3. An invalidate Branch predictor by MVA operation is executed 4. The Instruction L1 System Array Debug Register 0 contains a non-zero value which sets the valid bit and clears the page cross bit.    The issue is reported by ARM, erratum ID 687067, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the non-zero value contained in L1 System Array Debug Register 0 sets the valid bit of the BTB    entry, then the entry is not invalidated as intended.    '
p770
sg17
S' NXP'
p771
sa(dp772
g3
S' Cortex-A8'
p773
sg5
S' :    The workaround for this erratum is to ensure that the debugger software handles the faulting address. When the debugger is signalled a watchpoint, and identifies that the page being accessed is subjected to an MMU fault, which it would like the OS to patch up before dealing with itself, it can perform the following actions:    \xe2\x80\xa2 Disable the watchpoint    \xe2\x80\xa2 Set vector catch on the local Data Abort exception (secure or non-secure, as appropriate)    \xe2\x80\xa2 Set the PC at the watchpointed instruction and restart execution The processor restarts, re-executes the instruction and generate the MMU fault. It then fetches the instruction from the Data Abort handler and re-enter Debug state because of the Vector Catch event. The debugger can then perform the following actions:    \xe2\x80\xa2 Re-enable the watchpoint    \xe2\x80\xa2 Disable the vector catch    \xe2\x80\xa2 Set the PC at the Data Abort vector and restart execution    The processor restarts and re-executes the Data Abort vector instruction. The OS then patches up the MMU fault and attempts to re-execute the original instruction. Re-executing the instruction regenerates the Watchpoint debug event, but now the page is properly patched up.    '
p774
sg7
S' '
p775
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    39'
p776
sg11
g12
sg13
S' 10701    '
p777
sg15
S' :    If a debug watchpoint and a precise data abort are both triggered from the same data access, the ARM Architecture specifies that the data abort should be prioritized. However, this does not occur on the Cortex-A8 and the watchpoint is taken instead.    The conditions for the erratum are as follows:12SPACEJEEHEH1. At least one debug watchpoint is programmed      2. A precise data abort occurs on the same address as the watchpoint The issue is reported by ARM, erratum ID 693270, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The implications of this erratum only affects the debug software. The data abort should take precedence over the watchpoint so that the OS has a chance to fix up paged-out memory before re-executing the instruction and presenting the debugger with the watchpointed address. Due to this erratum, this fix up does not occur and the debugger should be capable of handling a faulting address.    '
p778
sg17
S' NXP'
p779
sa(dp780
g3
S' Cortex-A8'
p781
sg5
S' :    The erratum only occurs if the floating point unit is configured in run fast mode with RP rounding.    The easiest workaround is to avoid using this particular mode combination. Round-to-Nearest (RN) is a common rounding mode used, but if RP functionality is desired, it should be done without using Default NaN and/or without Flush-to-zero enabled. Default NaN signalling, Flush-to-zero, and rounding mode are all configured using bits [25:22] of the FPSCR register. This register is typically configured by the system software and should not change within an application.    '
p782
sg7
S' '
p783
sg9
S' :    No fix scheduled    '
p784
sg11
g12
sg13
S' 10703    '
p785
sg15
S' :    If the integer to floating point conversion operation, VCVT.f32.u32, is executed with the FPSCR    register configured for Default NaN and Flush-to-zero enabled, and the rounding mode used is RP    (Round-to-Positive infinity), it returns the incorrect result for the source operation 0xFFFF_FF01.    Specifically, it returns the result 0x0000_0000 instead of the correct result 0x4F80_0000. The erratum can occur only for this specific input value and this specific configuration of the FPSCR    register.    The conditions are as follows:    1. Default NaN is enabled (FPSCR[25] = 1\xe2\x80\x99b1)    2. Flush-to-zero is enabled (FPSR[24] = 1\xe2\x80\x99b1)    3. RP rounding mode is enabled (FPSR[23:22] = 2\xe2\x80\x99b01)    4. A VCVT.f32.u32 instruction is executed with the source operand 0xFFFF_FF01    5. The result of the instruction is incorrect 0x0000_0000 rather than 0x4F80_0000    The issue is reported by ARM, erratum ID 715847, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The incorrect result from the conversion operation can result in further incorrect results calculated and unexpected program behavior.    '
p786
sg17
S' NXP'
p787
sa(dp788
g3
S' Cortex-A8'
p789
sg5
S' :    There are two possible workarounds for this erratum.    The first workaround is to avoid performing the cache maintenance operations to non-cacheable addresses previously marked cacheable and therefore may be resident in the cache. If the address is present in the cache, it implies that the memory region is marked cacheable at some earlier point of time and explicitly changed to non-cacheable before the maintenance operation is performed. If the region type is not changed to non-cacheable before executing the maintenance operation, this erratum can be avoided. The value of changing a memory region from cacheable to non-cacheable 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    43'
p790
sg7
S' '
p791
sg9
g12
sg11
g12
sg13
S' 10724    mode which is another condition for this erratum. Our FP support comes from a DLL provided by ARM. The ARM DLL should avoid the specific rounding mode associated with the erratum. Need to ensure RP rounding mode is not enabled.    Chip Errata for the i.MX51, Rev. 5    42    Freescale Semiconductor11205    ENGcm11205    ARM: Cache maintenance operations by MVA for a    non-cacheable memory region can result in processor deadlock '
p792
sg15
S' :    If a Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is performed in a memory region that is marked non-cacheable, device, or strongly ordered, it is possible for the processor to deadlock or have stale data left in the processor. This erratum occurs when the address hits the cache in a way that is not predicted by the Hash Virtual Address Buffer (HVAB), which is a cache way predictor inside the processor. This erratum can occur only for the cache maintenance operations that are performed by MVA. It does not occur for the set/way based cache maintenance operations.    The conditions are as follows:    1. A memory region is marked cacheable in a page table entry, and a cache line from that region is placed in the data cache    2. A second page table entry marks the same memory region as non-cacheable, device, or strongly ordered. This can occur by changing the memory attributes in the existing page table entry, or through an alternative page table entry that maps the same virtual to physical address but with non-cacheable, device, or strongly ordered attributes rather than cacheable 3. A Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is done to this address    4. The maintenance operation receives a false hit indication from the HVAB array 5. The maintenance operation receives a true hit indication from the Tag lookup, which implies that the data is present in the array, but located in a different way that is not predicted by the HVAB    6. An eviction of the dirty line has started but not finished, and the processor leaves stale data in the cache and can potentially enter a deadlock state    The issue is reported by ARM, erratum ID 728018, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If stale data is left in the cache, the processor does not work as intended. If deadlock state occurs, it can only be exited by asserting the RESET pin on the processor.    '
p793
sg17
S' NXP'
p794
sa(dp795
g3
S' Cortex-A8'
p796
sg5
S' :    Several software solutions can be proposed for this issue:    \xe2\x80\xa2 Use 8-bit Neon load with access size of less or equal to 8 bytes. For example: Vld1.8 {d0-d1}, [Rs]!    This solution results in some performance degradation.    \xe2\x80\xa2 Use 16 or 32-bit Neon load instructions instead. For example: Vst1.32 {d0 \xe2\x80\x93 d3}, [Rs]!    The limitation of this proposal is that the source data address must be 16 or 32-bit aligned.    \xe2\x80\xa2 Define the memory region as Normal Non-Cacheable type instead of Strongly Ordered or Device memory type. In this case, need to avoid potential memory consistence issues and perform Data Synchronization Barrier (DSB) before other DMA engine access the region for read, as the Write Buffer is enabled.    '
p797
sg7
S' '
p798
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    45'
p799
sg11
g12
sg13
S' 11205    before performing the maintenance operations is that this is the only way that the ARM v7    Architecture guarantees the line is not immediately placed back into the cache due to the possibility of data speculation. However, in Cortex-A8, this degree of data speculation is never done.    Therefore, changing the memory type to non-cacheable before executing the cache maintenance operation is not required to assure that the line is not immediately placed back into the cache.    However, if there is a code compatibility with other v7 implementations (that may exhibit this level of data speculation) is a concern, then this first workaround is insufficient, and the second workaround should be used.    The second workaround is to execute the loop of cache maintenance operations twice. Execute the loop once with the memory region still marked cacheable. Then change the page table entry to make the memory region non-cacheable and execute the loop for a second time. The first loop cleans the data from the cache in the Cortex-A8. On the Cortex-A8, the second loop is redundant as it misses on all lines in the cache, but resolves the data speculation issue that can occur on a different v7 architecture implementation. The existing cache maintenance code in a dynamically paged environment can be dependent on the maintenance operation triggering a page fault to set the correct page table entry. The workaround code must independently ensure that the correct page table entry is present.    '
p800
sg15
S' :    When Neon performs a single byte load from Strongly Ordered or Device type memory with an access size of more than 8 bytes, the system AXI bus issues a burst access which is longer than 8    beats of a single byte.    However, the M4IF is capable of supporting only access with a burst length of less than or equal to 8, as indicated in the i.MX51 Multimedia Applications Processor Reference Manual ( MCIMX51).    The AXI bus access with burst length larger than 8 beat cannot complete. The results can be unpredictable and may lead to system hang. The MLEN bit indicates on an error, but it may not be possible to read it if the system hangs.    Conditions for this issue:    1. A single byte Neon load is issued with more than 8 bytes access, for example: Vld1.8 {d0,d1,d2,d3}, [Rs]!    2. The source address is Strongly Ordered or Device memory type  Projected ImpactJEEHEHRECONSTRUCT:    The Neon access to memory region marked as Strongly Ordered or Device are not usually a practical case in general. Note that there are also other reported limitations for Neon access to Device type memory such as ENGcm10716.    '
p801
sg17
S' NXP'
p802
sa(dp803
g3
S' Cortex-A8'
p804
sg5
S' :    The CCSR[8:7] bits can be modified only when step_clk is no longer selected. The ARM clock source selection should be done in two accesses. The CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].     WorkaroundsJEEHEHRECONSTRUCT:    None    '
p805
sg7
S' '
p806
sg9
S' :    No fix is scheduled. A clarification is added to the reference manual.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled. A clarification is added to the reference manual.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    47'
p807
sg11
g12
sg13
S' 11208    ENGcm11208    CCM: ARM clock source switch limitation    '
p808
sg15
S' :    There are two muxes which select a clock source for pll1_sw_clk (which is also the source for ARM clock). One of them is a regular mux (step select mux), and the other is a synchronous mux.    The clock sources are selected by a single register (CCSR). If the pll1_sw_clk_sel bit is cleared (CCSR[2]) and the selection of the regular mux (CCSR[8:7]) is changed at the same time, then the regular mux is likely to switch first and can cause a glitch on pll1_sw_clk and hence on ARM clock and possibly other clocks as well.    Due to above, the CCSR[8:7] bits may only be modified when step_clk is no longer selected.    Therefore, CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].     DescriptionJEEHEHRECONSTRUCT:    When the emi_int1 clock in the CCM_CCGR5 register is disabled, the transaction to the CCM    passes through the INT1 channel of the EMI. However, the BRESP cannot be received by the ARM    because the clocks are already turned off. This causes the system to hang.     Projected ImpactJEEHEHRECONSTRUCT:    None, if the proposed workaround is implemented.     Projected ImpactJEEHEHRECONSTRUCT:    None. User should refrain from disabling the EMI int1 clock.    '
p809
sg17
S' NXP'
p810
sa(dp811
g3
S' Cortex-A8'
p812
sg5
S' :    When DMA is used for data transfers, the software can program the CSPI to only allow the interrupt generation during the overrun condition and not enable any other interrupt sources. In this way, whenever an interrupt comes from CSPI, the software can assume that it is the result of an Overrun condition.     WorkaroundsJEEHEHRECONSTRUCT:    Ensure the core is in the active mode and the debug IPs are accessed through the core.    '
p813
sg7
S' '
p814
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p815
sg11
g12
sg13
S' 08209    ENGcm08209    CSPI: Incorrectly clears the overrun status bit    '
p816
sg15
S' :    The CSPI automatically clears the overrun error status bit when the RxFIFO is read. This bit should not be cleared. This bit is designed for the interrupt access mode, and not for the DMA access mode.    The conditions are as follows:    \xe2\x80\xa2 When the RO bit is cleared by an RxFIFO read, it does not cause a problem if no DMA accesses to the CSPI occur    \xe2\x80\xa2 When DMA is utilized, the interrupt status of RO can be lost because of uncontrolled RxFIFO    access by DMA     DescriptionJEEHEHRECONSTRUCT:    There is a synchronization mechanism at the DAP AHB access port (AHB-AP) between the clock domains connected at the SoC level (PCLKDBG and HCLK for dap_sys).The problem occurs in DAPAHBAp DapSync module when synchronizing AhbStateDbg HCLK to AhbStateSyncPCLK.    This is a 3-bit bus and each bit is being sampled twice. This method does not ensure valid data on output bus.     Projected ImpactJEEHEHRECONSTRUCT:    If the RxFIFO is read before reading the Overrun error status bit, it is possible to miss the Overrun and thus miss the data.     Projected ImpactJEEHEHRECONSTRUCT:    Invalid data may appear on the output bus.    The DapStateSync bus is also implemented in the same way and suffers from the same issue ZEffectZ: preventing reliable access of the IPs by DAP without CPU intervention.    '
p817
sg17
S' NXP'
p818
sa(dp819
g3
S' Cortex-A8'
p820
sg5
S' :    The scan chain must either be manually built or an external RVI script must be used.     WorkaroundsJEEHEHRECONSTRUCT:    A software delay for a fixed amount of time based on TOG_COUNT after the TOG_DIS bit is set.    '
p821
sg7
S' '
p822
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p823
sg11
g12
sg13
S' 09395    ENGcm09395    DAP: Debug ROM address in DAP design is incorrect    '
p824
sg15
S' :    Debug ROM address is defined wrong in DAP design (0x8000_0000 instead of 0x6000_0000).     DescriptionJEEHEHRECONSTRUCT:    Under certain conditions, the DPLL IP TOG_SEL bit is not cleared after the TOG_DIS bit is set.    This issue is random in nature.     Projected ImpactJEEHEHRECONSTRUCT:    When RVI (the debugger) connects to the i.MX51 (the target), the scan chain can not automatically be built.     Projected ImpactJEEHEHRECONSTRUCT:    The proposed workaround resolves the issue.    '
p825
sg17
S' NXP'
p826
sa(dp827
g3
S' Cortex-A8'
p828
sg5
S' :    There are two workarounds, as follows:    \xe2\x80\xa2 The software solution applies to channels configured as SSB_POL = 1. After the data transaction is complete, the SS signal must be reconfigured as a GPIO. The GPIO must be programmed to a low level.    \xe2\x80\xa2 A hardware solution is to place an inverter on the SS signal and program SSB_POL = 0.     WorkaroundsJEEHEHRECONSTRUCT:    There is no workaround except for not using the SSB_CTRL[x] = 1 option in the Slave mode. The accurate burst length should always be specified using the BURST_LENGTH parameter.    '
p829
sg7
S' '
p830
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p831
sg11
g12
sg13
S' 09397    ENGcm09397    eCSPI: Slave select remains asserted after transfer is complete when the SSB POL = 1    '
p832
sg15
S' :    When the SSB_POL is set to \xe2\x80\x981\xe2\x80\x99 the associated slave select does not automatically return to an inactive state after the data transaction is complete.    NOTE    This bug only applies to eCSPI modules and is not present in CSPI modules.    The BGA signals CSPI1_MOSI, CSPI1_MISO, CSPI1_SSO, CSPI1_SS1, and CSPI1_RDY are not labeled correctly. The actual source for these signals is one of the on-chip eCSPI modules.     DescriptionJEEHEHRECONSTRUCT:    According to the eCSPI specifications, when eCSPI is set to operate in the Slave mode (CHANNEL_MODE[x] = 0), the SSB_CTRL[x] bit controls the behavior of burst completion.    In the Slave mode, the SSB_CTRL bit controls the behavior of SPI burst completion as follows:    \xe2\x80\xa2 0\xe2\x80\x94SPI burst completed when (BURST_LENGTH + 1) bits are received    \xe2\x80\xa2 1\xe2\x80\x94SPI burst completed when SSB input negated    Also, in BURST_LENGTH definition, it is stated \xe2\x80\x9cIn the Slave mode, this field takes effect in SPI transfer only when SSCTL is cleared.\xe2\x80\x9d    However, the mode SSB_CTRL[x] = 1 is not functional in Slave mode. Currently, BURST_LENGTH always defines the burst length.    According to the SPI protocol, negation of SSB always causes completion of the burst. However, due to the above issue, the data is not sampled correctly in RxFIFO when    {BURST_LENGTH+1}mod32 is not equal to {actual burst length}mod32.    Therefore, setting the BURST_LENGTH parameter to a value greater than the actual burst does not resolve the issue.     Projected ImpactJEEHEHRECONSTRUCT:    This issue produces an undesired behavior in the channels configured to SSB_POL = 1. The ports operate properly when SSB_POL = 0.     Projected ImpactJEEHEHRECONSTRUCT:    Slave mode with unspecified burst length cannot be supported due to this issue. The burst length should always be specified with the BURST_LENGTH parameter and the SSB_CTRL[x] should be set to zero.    '
p833
sg17
S' NXP'
p834
sa(dp835
g3
S' Cortex-A8'
p836
sg5
S' :    None.     WorkaroundsJEEHEHRECONSTRUCT:    Exclusive access to EMI works only if the tagged address is accessed directly. The access detection mechanism fails if the tagged location is written by consecutive burst access.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    55'
p837
sg7
S' '
p838
sg9
S' :    No fix scheduled.    '
p839
sg11
g12
sg13
S' 09421    ENGcm09421    EMI/SRC: Warm reset can not be issued in sleep mode    '
p840
sg15
S' :    There is a problem in WARM_RESET during sleep mode. The WARM_RESET flow is as follows: 1. SRC recognize WARM_RESET case (for example, RESET_IN_B)    2. SRC issues dvfs_req to EMI12SPACEJEEHEH3. SRC wait to dvfs_ack      4. If after some time the acknowledge does not arrive a counter in SRC recognizes it and SRC    issues a cold RESET. When in Sleep Mode, EMI does not get clocks and therefore results in the issue.     DescriptionJEEHEHRECONSTRUCT:    The exclusive accesses are used as a semaphore mechanism in the AXI protocol. The basic process of an exclusive access is as follows:    1. A master performs an exclusive read from an address location.    2. At some later time a master tries to complete the exclusive operation by performing an exclusive write to the same address location.    3. The exclusive write of a master is signaled as:    \xe2\x80\x94 Successful, if no other master has written to that location between the read and write accesses.    \xe2\x80\x94 Failed, if another master has written to that location between the read and write accesses.    In this case the address location is not update.    On some occasions the EMI fails to detect a write access to the location tagged by the exclusive read and does not report on failure at exclusive write. This is happens when the tagged location is accessed indirectly in the middle of a burst.    For example, assume the following sequence:    \xe2\x80\xa2 Master A tags address nn by performing exclusive read access    \xe2\x80\xa2 Master B writes to address mm    \xe2\x80\xa2 Master A tags performs exclusive write to address nn    If address nn = mm, the exclusive tag is cleared (exclusive write is not successful) - as expected.    If master B performs a burst with the first address of the burst is equal nn, the exclusive tag is also cleared as expected.    However, if master B performs a burst where the first address of the burst is not nn, but during the burst it does cross address nn, the exclusive tag is not cleared (exclusive write succeeds) - not as expected.     Projected ImpactJEEHEHRECONSTRUCT:    Any reset arriving in sleep mode even if it is supposed to be a warm reset is treated as cold reset, for example resetting all EMI registers. DDR content is preserved even though a cold reset is issued because in Sleep mode the memory is already in self refresh.     Projected ImpactJEEHEHRECONSTRUCT:    In i.MX51 based systems, only the Cortex-A8 is capable generating exclusive access.    The exclusive access of the core to non-shared memory locations are all handled internally within the Cortex-A8 (CA8) monitor and do not propagate to the EMI.    The exclusive access based semaphore mechanism between the core and other masters in the system is not utilized in practice.    In case this mechanism is still required, it can be successfully operated with non-burst access.    '
p841
sg17
S' NXP'
p842
sa(dp843
g3
S' Cortex-A8'
p844
sg5
S' :    None    '
p845
sg7
S' '
p846
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled. A clarification is added in the reference manual.    '
p847
sg11
g12
sg13
S' 09424    The issue can be avoided if the software constrains the regular write to the tagged location to use non-burst access or use and addresses corresponding to the first word in the burst.    '
p848
sg15
S' :    8-bit memory devices are supported by WEIM interface connecting only to one of the following three locations:    \xe2\x80\xa2 EIM_DA[7:0] pads    \xe2\x80\xa2 EIM_DA[15:8] pads    \xe2\x80\xa2 EIM_D[31:24] pads    Connection to the EIM_D[23:16] pads is not supported.    This erratum clarifies the statement in the MCIMX51 Multimedia Applications Processor Reference Manual (MCIMX51RM) that only 16-bit and 32-bit memory devices are supported by the WEIM interface.     Projected ImpactJEEHEHRECONSTRUCT:    WEIM 8-bit memory devices are supported according to above description.    '
p849
sg17
S' NXP'
p850
sa(dp851
g3
S' Cortex-A8'
p852
sg5
S' :    Clock source should be changed only when the EPIT is disabled. A way to accomplish the same is as follows:    1. Disable EPIT\xe2\x80\x94EPITCR[0] = 0 (EN = 0), that is, disable EPIT    2. Disable EPIT output\xe2\x80\x94EPITCR[23:22] = 00 (OM = 00)    3. Disable EPIT capture interrupt\xe2\x80\x94EPITCR[2] = 0 (OCIEN = 0)    4. Change clock source\xe2\x80\x94EPITCR[25:24] (CLKSRC), determines which clock source is selected for running the counter    5. Clear status register\xe2\x80\x94EPITSR[0] (OCIF), this is a write one to clear register 6. Configure EPIT to start count once enabled from load value\xe2\x80\x94EPITCR[1] = 1 (ENMOD = 1) 7. Re-enable EPIT EPITCR[0] = 1 (EN = 1), that is, enable EPIT12SPACEJEEHEH8. Reconfigure output and interrupt       WorkaroundsJEEHEHRECONSTRUCT:    None required, as the performace degradation is approximately 0.1%.    '
p853
sg7
S' '
p854
sg9
S' :      No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p855
sg11
g12
sg13
S' 04773    ENGcm04773    EPIT: Possibility of additional pulse on src_clk when switching between clock sources    '
p856
sg15
S' :    There is a possibility of an extra pulse on SCLK in the EPIT, when switching between the clock sources.     DescriptionJEEHEHRECONSTRUCT:    After application of write commands, tWR clocks are required between the last written data until the precharge command to same bank. In cases where there is also an access to bank x followed by a back-to-back write access to bank y, bank x does not accept a precharge command until the data write of the second access (to bank y) is completed. According to the JEDEC standard, the precharge command to bank x should only be held until it has finished its own data and tWR.     Projected ImpactJEEHEHRECONSTRUCT:    It can result in an incorrect counter increment in the EPIT.     Projected ImpactJEEHEHRECONSTRUCT:    Due to the bug, writes to a bank are influenced by data writes to other banks. This results in minor performance degradation.    In a situation where two masters are accessing two different DDR banks and one of the masters performs a new access to a different row, a precharge sent to the first row must be performed before the master can access the new row. In that case the second master must finish its access before the precharge can be issued. This situation also can occur in the case of one master making multiple accesses one after another to two different rows. This produces a minor performance decrease, because the new access is waiting for a precharge command to be issued. Some precharge commands are delayed a few extra clocks. In cases where missed access to any of the banks occurred between the time of the last access and the access to the original bank there is no impact and this limitation does not occur.    '
p857
sg17
S' NXP'
p858
sa(dp859
g3
S' Cortex-A8'
p860
sg5
S' :    None.     WorkaroundsJEEHEHRECONSTRUCT:    Do not set WML to 1. The eSDHC does not allow WML as 1 for CPU polling reads. This scenario is unusual even for single access. A read when WML is set to 2 can still be split into two successive reads.    '
p861
sg7
S' '
p862
sg9
S' :    No fix scheduled. The reference manual is updated accordingly.    Chip Errata for the i.MX51, Rev. 5    60    Freescale Semiconductor06545    ENGcm06545    eSDHC: Buffer overrun prevents CPU polling reads when WML    is set as 1     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p863
sg11
g12
sg13
S' 08971    ENGcm08971    eSDCTL: ESDGPR register bits 19 to 31 are not readable    '
p864
sg15
S' :    The Enhanced SDRAM General Purpose Register (ESDGPR register at address 0xBASE+0x1034) bits 19 through 31 do not return correct value on read.    The write operation works according to the specification.     DescriptionJEEHEHRECONSTRUCT:    For slow CPU read polling with WML (Water Mark Level) as 1, excessive data can be read from the card due to the presence of a flop between the buffer and the system bus. This causes the read buffer to overrun and by this halting the data transfer at both the sides and hanging the operation.     Projected ImpactJEEHEHRECONSTRUCT:    No functional impact.     Projected ImpactJEEHEHRECONSTRUCT:    CPU polling reads when WML is set to 1 can not be supported.    '
p865
sg17
S' NXP'
p866
sa(dp867
g3
S' Cortex-A8'
p868
sg5
S' :    Do not use stop-at-block-gap during write operations.     WorkaroundsJEEHEHRECONSTRUCT:    After sending CMD12 to abort the data transfer, poll the card clock status to see if it is stopped. If it is stopped, write to the XFER_TYPE register to issue the CMD12 as normal, and make several accesses (write or read, depending on the current transfer direction) to the buffer until the clock is restored.    '
p869
sg7
S' '
p870
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p871
sg11
g12
sg13
S' 09111    ENGcm09111    eSDHC: Cannot finish a write operation after a block gap stop '
p872
sg15
S' :    After stopping at a block gap during a write operation, when the transfer is resumed, the data transfer can not complete and the transfer complete status bit is not set.     DescriptionJEEHEHRECONSTRUCT:    When eSDHC attempts to stop the transmission by sending CMD12, the clock does not always stop even though the data transfer is aborted.     Projected ImpactJEEHEHRECONSTRUCT:    The eSDHC can not finish write operations after encountering a block gap stop.     Projected ImpactJEEHEHRECONSTRUCT:    The result is communication with the SD/MMC card is lost    '
p873
sg17
S' NXP'
p874
sa(dp875
g3
S' Cortex-A8'
p876
sg5
S' :    The following software workaround can be used instead of the infinite block mode: 1. Set BCEN bit to one and enable block count    2. Set the BLKCNT to the maximum value in Block Attributes Register (BLKATTR) (0xFFFF    for 65535 blocks)     WorkaroundsJEEHEHRECONSTRUCT:    Do not use SDMA with the HS-I2C.    '
p877
sg7
S' '
p878
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p879
sg11
g12
sg13
S' 09107    ENGcm09107    eSDHC: Does not support Infinite Block Transfer Mode    '
p880
sg15
S' :    The eSDHC does not support infinite data transfers, if the Block Count register is set to one, even when block count enable is not set.     DescriptionJEEHEHRECONSTRUCT:    When HS-I2C is used with SDMA (for example with a camera sensor) along with a read/write to/from an SD card, the eSDHC does not appear to forward the interrupt event to the TZIC    (Cortex\xe2\x80\x99s interrupt controller).     Projected ImpactJEEHEHRECONSTRUCT:    The eSDHC does not support infinite Block Transfer Mode.    There is no limitation for single block transfers (with Multi/Single Block Select set to zero, Block Count Enable set to zero, and Block Count set to one).     Projected ImpactJEEHEHRECONSTRUCT:    The software ISR is never signaled, and as a result the read/write to the SD card causes it to hang.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    '
p881
sg17
S' NXP'
p882
sa(dp883
g3
S' Cortex-A8'
p884
sg5
S' :    Set HCKEN bit before starting DMA read operation, to disable hclk auto-gating feature; after the DINT and TC bit received when read operation is done, clear HCKEN bit to re-enable the hclk auto-gating feature.     WorkaroundsJEEHEHRECONSTRUCT:    Do not use RD_WML and [{(BLK_SIZE + 3) \xc3\xb7 4}% RD_WML = 1) configuration for read operations.    '
p885
sg7
S' '
p886
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p887
sg11
g12
sg13
S' 09403    ENGcm09403    eSDHC: Software can not clear DMA interrupt status bit after read operation    '
p888
sg15
S' :    After DMA read operation, if hclk is automatically gated off, the DINT status can not be cleared by software.     DescriptionJEEHEHRECONSTRUCT:    Corrupted data is read if the buffer RAM is read until it is empty and the buffer register only contains one word. At this time, the buffer ready is still active when the Watermark level is 1    (RD_WML register bits is 1 or [{(BLK_SIZE + 3) \xc3\xb7 4}% RD_WML = 1).     Projected ImpactJEEHEHRECONSTRUCT:    Can not clear bit     Projected ImpactJEEHEHRECONSTRUCT:    Corrupted data is read from a buffer when the buffer RAM is read.    '
p889
sg17
S' NXP'
p890
sa(dp891
g3
S' Cortex-A8'
p892
sg5
S' :    A simple workaround is to disable the SD card clock before the software reset, and enable it when the module resumes the normal operation. The Host and the SD card are in a master-slave relationship. The Host provides clock and control transfer across the interface. Therefore, any existing operation is discarded when the Host controller is reset.    The recommended flow is as follows:    1. Software disable bit[3] of the System Control register    2. Trigger software reset and/or set clock divider    3. Check bit[3] of the Present State Register for stable clock 4. Enable bit[3] of the System Control register.    Using the above method, the eSDHC cannot send command or transfer data when there is a glitch in the clock line, and the glitch does not cause any issue.     WorkaroundsJEEHEHRECONSTRUCT:    The software should avoid setting ADMA type last descriptor (TRANS descriptor with END flag) to data length less than or equal to 4 bytes. In ADMA1 mode, if needed, a last NOP descriptor can be appended to the descriptors list. In ADMA2 mode this workaround is not feasible due to    ENGcm11161.    '
p893
sg7
S' '
p894
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p895
sg11
g12
sg13
S' 10407    ENGcm10407    eSDHC: Glitch is generated on card clock with software reset or clock divider change    '
p896
sg15
S' :    A glitch may occur on the SDHC card clock when the software sets the RSTA bit (software reset) in the system control register. It can also be generated by setting the clock divider value. The glitch produced can cause the external card to switch to an unknown state. The occurrence is not deterministic.     DescriptionJEEHEHRECONSTRUCT:    A possible data corruption or incorrect bus transactions on the internal AHB bus, causing possible system corruption or a stall, can occur under the combination of the following conditions: 1. ADMA2 or ADMA1 type descriptor12SPACEJEEHEH2. TRANS descriptor with END flag      3. Data length is less than or equal to 4 bytes (the length field of the corresponding descriptor is set to 1, 2, 3, or 4) and the ADMA transfers one 32-bit word on the bus 4. Block Count Enable mode     Projected ImpactJEEHEHRECONSTRUCT:    Potential disruption of SD card operation.     Projected ImpactJEEHEHRECONSTRUCT:    Data corruption or incorrect bus transactions on the internal AHB bus, causing possible system corruption or a stall.    '
p897
sg17
S' NXP'
p898
sa(dp899
g3
S' Cortex-A8'
p900
sg5
S' :    When the ADMA1 or ADMA2 mode is used and the block size is not a multiple of 4, the software should set the block size to:    4    block size    \xe2\x8b\x85 ------------    4    In other words, the block size should be rounded to the next multiple of 4 bytes. In case of write, the software should add the corresponding number of bytes at each block end, before the write is initialized. In case of read, the software should remove the dummy bytes after the read is completed.    For example, if the original block length is 22 bytes, and there are several blocks to transfer, the software should set the block size to 24. The following data is written/stored in the external memory:    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    Chip Errata for the i.MX51, Rev. 5    70    Freescale Semiconductor11104    In this example, 48 (24 x 2) bytes are transferred instead of 44 bytes. The software should remove the dummy data.    Alternatively, the PIO mode can be used if the block size is non-4 byte aligned.    '
p901
sg7
S' '
p902
sg9
S' :    No fix scheduled    '
p903
sg11
g12
sg13
S' 11104    ENGcm11104    eSDHCv2: ADMA transfer error when the block size is not a multiple of four    '
p904
sg15
S' :    Issue in eSDHC ADMA mode operation. The eSDHC read transfer is not completed when block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2. The eSDHC DMA controller is stuck waiting for the TC bit in the interrupt status register.    The following examples trigger this issue:    1. Working with an SD card while setting ADMA1 mode in the eSDHC    2. Performing partial block read12SPACEJEEHEH3. Writing one block of length 0x200      4. Reading two blocks of length 0x22 each. Reading from the address where the write operation is performed. Start address is 0x512 aligned. Watermark is set as one word during read. This read is performed using only one ADMA1 descriptor in which the total size of the transfer is programmed as 0x44 (2 blocks of 0x22).     Projected ImpactJEEHEHRECONSTRUCT:    The issue exists only when the block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2.    '
p905
sg17
S' NXP'
p906
sa(dp907
g3
S' Cortex-A8'
p908
sg5
S' :    Software workaround is to always program TRANS descriptor as the last descriptor.     WorkaroundsJEEHEHRECONSTRUCT:    The workaround interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear CINT interrupt in IRQSTAT.    3. Clear and then set D3CD bit in the PROCTL register. Clearing D3CD bit sets the reverse signal of DAT1 to low, even if DAT1 is low. After D3CD bit is re-enabled, the eSDHC can catch the posedge of the reversed DAT1 signal, if the DAT1 line is still low.    4. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    '
p909
sg7
S' '
p910
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p911
sg11
g12
sg13
S' 11161    ENGcm11161    eSDHCv2: Problem when ADMA2 last descriptor is LINK or NOP    '
p912
sg15
S" :    ADMA2 mode in the eSDHC is used for transfers to/from the SD card. There are three types of ADMA2 descriptors: TRANS, LINK or NOP. The eSDHC has a problem when the last descriptor (which has the End bit '1') is a LINK descriptor or a NOP descriptor.    In this case, the eSDHC completes the transfers associated with this descriptor set, whereas it does not even start the transfers associated with the new data command. For example, if a WRITE    transfer operation is performed on the card using ADMA2, and the last descriptor of the WRITE    descriptor set is a LINK descriptor, then the WRITE is successfully finished. Now, if a READ    transfer is programmed from the SD card using ADMA2, then this transfer does not go through.     DescriptionJEEHEHRECONSTRUCT:    An issue is identified when interfacing the SDIO card. There is a case where an SDIO interrupt from the card is not recognized by the hardware, resulting in a hang.    If the SDIO card lowers the DAT1 line (which indicates an interrupt) when the SDIO interrupt is disabled in the eSDHC registers (that is, CINTEN bits in IRQSTATEN and IRQSIGEN are set to zero), then, after the SDIO interrupt is enabled (by setting the CINTEN bits in IRQSTATEN and IRQSIGEN registers), the eSDHC does not sense that the DAT1 line is low. Therefore, it fails to set the CINT interrupt in IRQSTAT even if DAT1 is low.    Generally, CINTEN bit is disabled in interrupt service.    The SDIO interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear the CINT interrupt in IRQSTAT.    3. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    If a new SDIO interrupt from the card occurs between step 2 and step 3, the eSDHC skips it.     Projected ImpactJEEHEHRECONSTRUCT:    Limitation for configuring the last descriptor as LINK or NOP.     Projected ImpactJEEHEHRECONSTRUCT:    The issue is relevant only for the SDIO card interrupt usage.    "
p913
sg17
S' NXP'
p914
sa(dp915
g3
S' Cortex-A8'
p916
sg5
S' :    The recommendation is to not set FIFO watermark level to a too small value in order to reduce frequency of clock pauses.    The problem is identified by receiving the CMD CRC error and CMD Index error. Once this issue occurs, one can send the same CMD again until operation is successful.     WorkaroundsJEEHEHRECONSTRUCT:    The FEC should use the DDR for its buffer.    '
p917
sg7
S' '
p918
sg9
S' :    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    74    Freescale Semiconductor04798    ENGcm04798    FEC: Fast Ethernet Controller (FEC) accesses to NAND Flash Controller (NFC) does not work     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p919
sg11
g12
sg13
S' 11403    '
p920
sg15
S' :    ENGcm11403    eSDHCv2: Erroneous CMD CRC error and CMD Index error may    occur on sending new CMD during data transfer    When sending new, non data CMD during data transfer between the eSDHC and EMMC card, the module may return an erroneous CMD CRC error and CMD Index error. This occurs when the CMD response has arrived at the moment the FIFO clock is stopped. The following bits after the start bit of the response are wrongly interpreted as index, generating the CRC and Index errors.    The data transfer itself is not impacted.    The rate of occurrence of the issue is very small, as there is a need for the following combination of conditions to occur at the same cycle:    \xe2\x80\xa2 The FIFO clock is stopped due to FIFO full or FIFO empty    \xe2\x80\xa2 The CMD response start bit is received     DescriptionJEEHEHRECONSTRUCT:    The FEC only creates wrap burst accesses upon data access (non-buffer descriptor). The NFC    under EMIv2 cannot handle such accesses from the MAX (M2) input port.     Projected ImpactJEEHEHRECONSTRUCT:    Sending new, non data CMD during data transfer between eSDHC and EMMC card may not succeed with indication on CRC and Index errors.     Projected ImpactJEEHEHRECONSTRUCT:    The FEC cannot use the NFC to access memory.    '
p921
sg17
S' NXP'
p922
sa(dp923
g3
S' Cortex-A8'
p924
sg5
S" :    Changing the clock source should only be done when the GPT is disabled. A way to accomplished this is as follows:    1. Disable GPT\xe2\x80\x94Write 1'b0 to EN bit of GPTCR    2. Disable interrupts\xe2\x80\x94Write 6'b000000 in Bits [5:0] of GPTIR    3. Configure Output Mode to unconnected/ disconnected\xe2\x80\x94Write zeros in OM3, OM2, OM1 in GPTCR    4. Disable Input Capture Modes\xe2\x80\x94Write zeros in IM1,IM2 in GPTCR12SPACEJEEHEH5. Change clock source CLKSRC in GPTCR      6. Clear Status register\xe2\x80\x94Write 003F in GPTSR12SPACEJEEHEH7. Set ENMOD in GPTCR      8. ENABLE GPT\xe2\x80\x94Write 1'b1 to EN bit of GPTCR. The GPTSR should not be read immediately after changing the clock source (a wait of at least one SCLK is required).     WorkaroundsJEEHEHRECONSTRUCT:    This issue will be fixed in the software driver libraries resolving the visual artifacts. There is no customer-side workaround for earlier driver versions.    "
p925
sg7
S' '
p926
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No hardware fix scheduled. This issue will be addressed in the software drivers in the next driver release.    '
p927
sg11
g12
sg13
S' 07200    ENGcm07200    GPT: Possibility of additional pulse on src_clk when switching between clock sources    '
p928
sg15
S' :    There is a possibility of an extra pulse on SCLK in the GPT when switching between the clock sources.     DescriptionJEEHEHRECONSTRUCT:    Due to an issue with ALU precision, several features of the GPU2D hardware incur accumulation of errors, which can result in visual artifacts. This can affect gradient rendering for certain step values and image transformation for larger render target sizes.     Projected ImpactJEEHEHRECONSTRUCT:    The bug can produce an incorrect counter increment in the GPT when switching between the clock sources.     Projected ImpactJEEHEHRECONSTRUCT:    The issue can cause artifacts in gradient rendering for certain step values and image transformation for larger render target sizes.    '
p929
sg17
S' NXP'
p930
sa(dp931
g3
S' Cortex-A8'
p932
sg5
S' :    The workaround is to ensure that the above addresses are not used while configuring the hardware on the board.     WorkaroundsJEEHEHRECONSTRUCT:    There are two software workarounds, as follows:    \xe2\x80\xa2 Replace the simple write in FIFO register with the following code: while(MEM_GET_BITS16(HSI2C_HISR, BIT1)!=0) {MEM_WRITE16(HSI2C_HITDR, *data)    \xe2\x80\xa2 Generate the start signal only after filling both HIMADR and HITDR with data. This workaround is under review.    '
p933
sg7
S' '
p934
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p935
sg11
g12
sg13
S' 09194    ENGcm09194    HS-I2C: Address Issue    '
p936
sg15
S' :    When HS-I2C is configured for 7-bit address master mode operation, and the slave does not acknowledge the address, the HS-I2C starts generating high frequency clocks on the SCL line. This bug is only applicable to certain addresses, as follows:    00_00001\xe2\x80\x94This combination is reserved for CBUS operation.    01_00001\xe2\x80\x94Issue address    10_00001\xe2\x80\x94Issue address    11_00001\xe2\x80\x94 Issue address    There is no issue with other addresses.     DescriptionJEEHEHRECONSTRUCT:    When writing the WA(0x15) in the FIFO (HITDR), the bit TDE remains asserted, the write in the FIFO is not detected.     Projected ImpactJEEHEHRECONSTRUCT:    The impact of this bug is minor (loss of 3 addresses out of 127) and it is unlikely that amount of devices that are attached to the HS-I2C bus in an actual application reaches that number.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard 2    I C modules.     Projected ImpactJEEHEHRECONSTRUCT:    During data transfers the device address is sent twice (instead of the address + WA). but, if the FIFO    is written a second time just after the first FIFO write, the TDE is cleared and the read works as expected.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    '
p937
sg17
S' NXP'
p938
sa(dp939
g3
S' Cortex-A8'
p940
sg5
S' :    Use the HICR[RSTA] bit for repeat start. There is a NOACK status (HISR[RXAK]) bit. The corresponding interrupt should always be enabled and AUTO_RSTA should be disabled.     WorkaroundsJEEHEHRECONSTRUCT:    The workaround is to use the GPIO alternate input to the I2C1_CLK pad to detect when the external device has released the clock and only after sending the STOP signal.    '
p941
sg7
S' '
p942
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p943
sg11
g12
sg13
S' 07892    ENGcm07892    HS-I2C: Auto Restart not working    '
p944
sg15
S' :    In HS-I2C, the purpose of the HICR[AUTO_RSTA] bit is to generate a repeat start when NOACK    is received in Master mode Tx operation with FIFO enabled or FIFO and DMA enabled mode.    When the HICR[AUTO_RSTA] (AUTO repeat start generation) bit is set and NOACK is received in address phase. The HS-I2C is not generating the repeat start.     DescriptionJEEHEHRECONSTRUCT:    If the slave device uses clock stretching to delay the HS-I2C controller after every byte is sent, the i.MX51 waits for the clock to go high between bytes but does not wait between the final byte and the STOP signal. Because of this, no valid STOP signal is seen on the bus.    In other words, the use of HIRDCR automatically generates a stop condition on the data bus (HIRDCR[RDC_RSTA] = 0) after the final byte of data is received regardless of whether the slave is in a condition to accept it. If the slave device holds the clock low (clock stretch) after the final byte of data is transferred, the slave never receives the immediate STOP condition from the i.MX51.     Projected ImpactJEEHEHRECONSTRUCT:    The auto-restart feature does not work.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     Projected ImpactJEEHEHRECONSTRUCT:    TBD    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    '
p945
sg17
S' NXP'
p946
sa(dp947
g3
S' Cortex-A8'
p948
sg5
S' :    Use the individual interrupt mask bits of the status register in the Interrupt Mask Register (HIIMR) or disable them in TZIC.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     WorkaroundsJEEHEHRECONSTRUCT:    See \xe2\x80\x9c7-Bit/10-Bit Address Master Transmit\xe2\x80\x9d section of the \xe2\x80\x9cHigh Speed Inter IC (HS_I2C)\xe2\x80\x9d    chapter in the i.MX51 Applications Processor Reference Manual (MCIMX51RM). Item 6 in the section reads: \xe2\x80\x9cWrite one Byte of DATA to be transmitted to the Tx Data Register (HITDR).\xe2\x80\x9d    Before the Start condition, data must be written to HITDR and the second data has to be written to HITDR after the ADDRESS phase of Byte Transfer Done (BTD). Going forward, Data must be written to the HITDR in advance before the BTD of previous data has been issued.    '
p949
sg7
S' '
p950
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p951
sg11
g12
sg13
S' 07894    ENGcm07894    HS-I2C: HICR[HIIEN] bit does not mask the interrupts    '
p952
sg15
S' :    The HICR[HIIEN] bit that should operate as a interrupt enable bit, does not mask the interrupts.     DescriptionJEEHEHRECONSTRUCT:    Read after write from an external device fails randomly     Projected ImpactJEEHEHRECONSTRUCT:    The HICR[HIIEN] bit does not work.     Projected ImpactJEEHEHRECONSTRUCT:    The first data is not written before START condition therefore the Read after write from an external device fails randomly    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    '
p953
sg17
S' NXP'
p954
sa(dp955
g3
S' Cortex-A8'
p956
sg5
S' :    There are two software workarounds, as follows:    1. Use the mask bit to clear the HS-I2C interrupt and enable it again after generating the start (MSTA bit setting) condition when required.    2. Avoid this issue by eliminating the use of the RDC and TDC counters.     WorkaroundsJEEHEHRECONSTRUCT:    The I2C protocol works with range of frequencies and an accurate frequency is not a requirement.    In I2C protocol FS mode, bit by bit clock stretching by slave device is possible.    If a very accurate frequency is required, software may need to execute the following steps: 1. Configure HIFSFDR according to the SCL clock frequency required.    2. Check if it works.    3. If it does not work, configure for a lower division frequency until it works.    '
p957
sg7
S' '
p958
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p959
sg11
g12
sg13
S' 07886    ENGcm07886    HS-I2C: TDC_ZERO and RDC_ZERO status bits are not cleared '
p960
sg15
S' :    In the HS-I2C module the HISR[RDC_ZERO] status bit is not cleared when HIRDCR[RDC_RSTA] is not set.     DescriptionJEEHEHRECONSTRUCT:    When 9 is written to the HIFSFDR, the ipg_hsi2c_clk should be divided by 72, but the output is incorrect.     Projected ImpactJEEHEHRECONSTRUCT:    The HS-I2C Interrupt may occur unexpectedly.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     Projected ImpactJEEHEHRECONSTRUCT:    Specifically when the ipg_hsi2c_clk = 26/3 MHz the expected output is 120 kHz (approximately) where as the actual output is approximately 103.3 kHz.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    '
p961
sg17
S' NXP'
p962
sa(dp963
g3
S' Cortex-A8'
p964
sg5
S' :    None.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     WorkaroundsJEEHEHRECONSTRUCT:    The workaround is to use any value between 0x0 to 0xFE and to avoid the usage of 0xFF.    '
p965
sg7
S' '
p966
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p967
sg11
g12
sg13
S' 09113    ENGcm09113    HS-I2C: High Speed mode of HS-I2C does not work    '
p968
sg15
S' :    The HS-I2C module does not operate in high speed mode.     DescriptionJEEHEHRECONSTRUCT:    If the alpha value is set to 0xFF for IC (Image Converter) combining, combining result is incorrect.    This is relevant to the IC module only.     Projected ImpactJEEHEHRECONSTRUCT:    The high speed mode of the HS-I2C module can not be used.     Projected ImpactJEEHEHRECONSTRUCT:    Very minor difference in result because we do not use full masking visible only in very special case.    '
p969
sg17
S' NXP'
p970
sa(dp971
g3
S' Cortex-A8'
p972
sg5
S' :    Configure IPU for DVFS changes only on pixel boundary.     WorkaroundsJEEHEHRECONSTRUCT:    The CSC function in the IC requires 3 cycles per pixels. The CSC function in the DP (Display Processor) requires one cycle per pixel.    Due to the very high load on the IC module when CSC2 is used, it was never planned to use CSC2.    If a second CSC is required, the DP should be used instead.    In a use case where CSC has to be done twice, the user should perform the first CSC in the IC and the second one in the DP.    '
p973
sg7
S' '
p974
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p975
sg11
g12
sg13
S' 09131    ENGcm09131    IPU/CCM: Configuration for DVFS_PER operation    (pixel/EOL/EOF)    '
p976
sg15
S" :    When the IPU frequency change is configured to End-of-Line or End-of-Frame operation, the frequency change ready ack is stuck due to and early EMI ACK to the DVFS frequency change request (EMI stops transfers until the frequency changes). When the IPU frequency change is configured to \xe2\x80\x9cpixel clock\xe2\x80\x9d, the ACK from the IPU to the CCM is granted rapidly (before the EMI can stop the transfer) and system functions correctly at the new DVFS frequency. In order to support End-of-Line or End-of-Frame configuration, the CCM must send the DVFS frequency change request to the EMI after all the ACKs are received from other masters (IPU, HSC).     DescriptionJEEHEHRECONSTRUCT:    This issue applies to the Image Processing Unit's Pre-processing and Post-processing. When the flow of CSC1 + Combining + CSC2 is activated in the Image Convertor and the input to CSC1 is in YUV (4:2:0 or 4:2:2) format, then every second pixel in the output is black resulting in 50%    black columns on the screen.    The issue is observed for CSC1 outputs of YUV or RGB.    The issue disappears if CSC2 is off. In addition, the issue disappears if the input to CSC1 is RGB    (8:8:8 or 5:6:5).    The combined picture is not impacted by black pixels     Projected ImpactJEEHEHRECONSTRUCT:    There is no support for End-of-Line and End-of-Frame IPU frequency changes when using DVFS.     Projected ImpactJEEHEHRECONSTRUCT:    Two CSC (color space conversions) can not be performed in the IC (Image Converter) if the input to the first CSC is in YUV format.    "
p977
sg17
S' NXP'
p978
sa(dp979
g3
S' Cortex-A8'
p980
sg5
S' :    1. Use global alpha for combining.    2. Perform one of the combining tasks in the DP.    3. Run the flows through the IC in consecutive order.     WorkaroundsJEEHEHRECONSTRUCT:    Setup the registers accordingly.    '
p981
sg7
S' '
p982
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p983
sg11
g12
sg13
S' 10295    ENGcm10295    IPU: Error while combining in IC when two simultaneous tasks are involved    '
p984
sg15
S' :    The problem can happen under the following conditions:    1. Two simultaneous tasks are running in the IC.    2. Both tasks perform combining.    3. Local alpha is used.    The IC reads a set of 4 pixels and 4 alpha values. The IC has a 2 bit pointer that points to the current alpha value to be used (out of 4).    Due to an error during task switching there\xe2\x80\x99s a situation where the alpha pointer is not updated correctly. As a result the pointer of task1 is used for task2. Hence, a wrong alpha value is used.    The IPU overcomes the problem on the following task switching.     DescriptionJEEHEHRECONSTRUCT:    The registers setup described in Table 4 is required for proper display and sensor interfaces operation. This configuration bypasses the unsupported HSC module (removed from specification) and configures the system for legacy mode operation.    Table 4 shows bypass mode registers setup.    Table 4. Bypass Mode Registers Setup    Required    Register    Address    Access    Reset Value    Bypass Value    MCG Control Designation Register (MCD)    0x83FD_C000    R/W    0x0000_0000    0x0000_0F00    MCG CCM Control Register (MCCMC)    0x83FD_C0D8    R/W    0x0000_0000    0x0000_000C    MXT Configuration Register (MXT_CONF)    0x83FD_C800    R/W    0x0000_0000    0xF003_008B     Projected ImpactJEEHEHRECONSTRUCT:    The actual visual impact is very small as the problem may happen sporadically and the IPU    overcomes it on the next task switching. The problem affects the correctness of the data only so wrong data can be displayed for a short period of time.     Projected ImpactJEEHEHRECONSTRUCT:    None.    '
p985
sg17
S' NXP'
p986
sa(dp987
g3
S' Cortex-A8'
p988
sg5
S' :    Before entering the step-by-step mode, configure the EMI to the software LPMD and then read the LPACK register. The LPACK register indicates that the M4IF is idle and the step-by-step can be enabled. The difference between the regular procedure of LPMD and this procedure is that the EMI clocks remain ON.     WorkaroundsJEEHEHRECONSTRUCT:    Initialization must be performed first, followed by enabling the M4IF power saving.    '
p989
sg7
S' '
p990
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p991
sg11
g12
sg13
S' 07168    ENGcm07168    M4IF: Step-by-step mechanism violates AXI protocol    '
p992
sg15
S" :    If the step-by-step mechanism is enabled while the M4IF is operational (there are transactions in the internal buffers), there can be a situation where one or more of the arbitrations' AXI protocol is violated in the \xe2\x80\x9cwrite address channel\xe2\x80\x9d or \xe2\x80\x9cread address channel.\xe2\x80\x9d     DescriptionJEEHEHRECONSTRUCT:    Enabling the power-saving mode in M4IF before configuring the DDR module causes deadlock during DDR configuration.     Projected ImpactJEEHEHRECONSTRUCT:    The M4IF violates the AXI protocol and crashes if step-by-step is set ON or OFF during the run-time.     Projected ImpactJEEHEHRECONSTRUCT:    None    "
p993
sg17
S' NXP'
p994
sa(dp995
g3
S' Cortex-A8'
p996
sg5
S' :    M4IF and DDR control programing must meet this restriction:    tXSR (DDR parameter) + tRFC (DDR parameter) < 8 \xc3\x97 FPST (M4IF parameter) '
p997
sg7
S' '
p998
sg9
S' :    No fix scheduled.    '
p999
sg11
g12
sg13
S' 10709    ENGcm10709    M4IF: Power-saving restriction on FPST due to DDR    '
p1000
sg15
S' :    The FPST (Fast arbitration Power Saving Timer) control bit field in the M4IF MCR1 register defines the timer value of the power saving mode of the fast arbitration. The value in this field represents clock cycles of the fast memory arbitration clock multiplied by 8.    The minimum value for FPST in MCR1 reg is defined as follows: The minimum time interval between LPMD/DVFS requests requires that two refreshes be sent to memory during that interval. So the minimum time is tXSR + tRFC, which is the time from exit self-refresh to first refresh command and the time from first refresh to second refresh.     DescriptionJEEHEHRECONSTRUCT:    Reading the M4IF status registers of an inactive AXI master or slave ports stalls the entire IC    system. This occurs when a specific master or slave clock is not provided to the M4IF, but the ARM/JTAG tries to read that master\xe2\x80\x99s status bits.    When the master or slave clock is not active, the read request fails to propagate the status bits that go through synchronization (IPG_CLK to *_clk), acknowledge never comes back, and the entire chip\xe2\x80\x99s IP bus is stuck.    Some M4IF status registers bundle the status of several masters or slaves. If one of the masters or slaves is inactive, accessing such a register stalls the entire system, even if the user is interested only in the status of other active ports.    Table 5 lists the impacted registers and the clock signals that should be active for read access to succeed.    Table 5. List of Impacted Registers    Registers    Required Master/Slave to be Active for Read Action to Succeed MDCR    fast, slow, int1, int2    WMIS0    fast    WMIS1    fast    MLEN    m0, m1, m2, m3, m4, m5, m6, m7, fast, slow, int1, int2    FDPS    fast    SSRL0    fast    SSRL1    fast    SSRH0    fast    SSRH1    fast    MDSR0    The arbitration domain selected by MDCR/RARB    MDSR1    The arbitration domain selected by MDCR/RARB    MDSR2    The arbitration domain selected by MDCR/RARB    MDSR3    The arbitration domain selected by MDCR/RARB    MDSR4    The arbitration domain selected by MDCR/RARB    MDSR5    The arbitration domain selected by MDCR/RARB    MDSR6    The arbitration domain selected by MDCR/RARB    MDSR7    The arbitration domain selected by MDCR/RARB    MDSR8    The arbitration domain selected by MDCR/RARB    SBS0    The arbitration domain selected by MDCR/RARB    SBS1    The arbitration domain selected by MDCR/RARB    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    95 Projected ImpactJEEHEHRECONSTRUCT:    None.    '
p1001
sg17
S' NXP'
p1002
sa(dp1003
g3
S' Cortex-A8'
p1004
sg5
S' :    Enable the relevant M4IF masters or slaves clocks for the status read.     WorkaroundsJEEHEHRECONSTRUCT:    The software must launch a status-read command at the end of auto_erase, auto_prog or copy_back operations.    '
p1005
sg7
S' '
p1006
sg9
S' :    No fix scheduled    Chip Errata for the i.MX51, Rev. 5    96    Freescale Semiconductor09044    ENGcm09044    NFC: Auto_erase/auto_program does not latch status correctly  Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1007
sg11
g12
sg13
S' 11226    Table 5. List of Impacted Registers (continued)    Registers    Required Master/Slave to be Active for Read Action to Succeed PSM0    m0,m1    PSM1    m2,m3    PSM2    m4,m5    PSM3    m6,m7    MDCR    fast, slow, int1, int2    MCR0    fast, slow, int1, int2    '
p1008
sg15
S' :    When performing auto_erase/auto_program/copy_back operation, NFC is supposed to detect the deassertion of RB_B signal, and then send a status-read command in order to capture the status of the last operation, and thus reducing software overhead. In ~50% of the cases, the NFC does not send this status-read command.     Projected ImpactJEEHEHRECONSTRUCT:    No impact on regular functionality. The status registers are usually accessed for debugging purposes.     Projected ImpactJEEHEHRECONSTRUCT:    Status is not correct.    '
p1009
sg17
S' NXP'
p1010
sa(dp1011
g3
S' Cortex-A8'
p1012
sg5
S' :    None     WorkaroundsJEEHEHRECONSTRUCT:    There are two options:    \xe2\x80\xa2 Perform the copy back through Atomic operations    \xe2\x80\xa2 Instead of copy back, perform a read operation followed by a write operation Both options affect the overall performance.    '
p1013
sg7
S' '
p1014
sg9
S' :    No fix scheduled. The reference manual is updated accordingly.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1015
sg11
g12
sg13
S' 09619    ENGcm09619    NFC: 8-Sym ECC mode does not work with 512 byte page x16    bus NAND Flash    '
p1016
sg15
S' :    When ECC_MODE = 1 the 8-sym error detection and correction does not work with 512 byte main area \xc3\x9716 NAND Flash.     DescriptionJEEHEHRECONSTRUCT:    The copy back feature of the NFC module does not work as expected. When trying to copy a page from source address to destination address, the destination address is always the successive page of the source address.     Projected ImpactJEEHEHRECONSTRUCT:    The 8-sym ECC mode does not work with \xc3\x9716 bus width NAND. This mode works with \xc3\x978 bus width NAND. This restricts 8-sym ECC operation to 8-bit NAND devices.     Projected ImpactJEEHEHRECONSTRUCT:    The copy back cannot be done to an address that is not successive to the source address.    '
p1017
sg17
S' NXP'
p1018
sa(dp1019
g3
S' Cortex-A8'
p1020
sg5
S' :    As there is no difference between LOCK and LOCK_TIGHT modes, the software should not use LOCK_TIGHT mode.     WorkaroundsJEEHEHRECONSTRUCT:    It should be handled in the software, as it is done now for the Windows and Linux drivers.    '
p1021
sg7
S' '
p1022
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1023
sg11
g12
sg13
S' 09135    ENGcm09135    NFC: Block write-protect does not support lock-tight    '
p1024
sg15
S' :    NFC offers a block-write-protect feature in which only a range of pre-defined blocks can be modified. This range of blocks can be set to UNLOCK (blocks that can be modified), LOCK    (blocks that cannot be modified) or LOCK_TIGHT (blocks that cannot be modified and the range cannot be changed).    Though switching to LOCK_TIGHT mode, the range of blocks can still be modified.     DescriptionJEEHEHRECONSTRUCT:    NFC offers a block-write-protect mechanism. Only a configurable range of NAND blocks can be modified. Any erase/program operations on the blocks outside this range should be blocked by NFC. This mechanism does not work in automatic program and in automatic erase.     Projected ImpactJEEHEHRECONSTRUCT:    Lock cannot be trusted to prevent data from being overwritten. As the software does not use this feature (both WinCE and LINUX), there is no impact.     Projected ImpactJEEHEHRECONSTRUCT:    As there is no workaround for this bug, the write protect mechanism cannot be used.    '
p1025
sg17
S' NXP'
p1026
sa(dp1027
g3
S' Cortex-A8'
p1028
sg5
S' :    Do not to apply software reset for the above conditions.    '
p1029
sg7
S' '
p1030
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1031
sg11
g12
sg13
S' 09400    ENGcm09400    NFC: Copy-back does not work properly when addr_op = 01    '
p1032
sg15
S' :    When working with addr_op = 01, and trying to perform a copy-back operation, the NFC ignores the destination address configured, and copies the page to \xe2\x80\x9csource address\xe2\x80\x9d +1. Additionally, the following automatic operation is carried out from address_register1 instead of address_register0.     DescriptionJEEHEHRECONSTRUCT:    The software reset (setting the NFC_RST bit in NFC and then sending reset command 0xFF to NAND Flash) does not work correctly under the following conditions:    \xe2\x80\xa2 Reset between the read operations    \xe2\x80\xa2 With atomic program operation, the RESET command is not being issued    \xe2\x80\xa2 Auto program operation\xe2\x80\x94If reset occurs after writing data to the NFC and before the write confirm command, the CACK bit is not set after setting CREQ     Projected ImpactJEEHEHRECONSTRUCT:    Automatic operation is carried out from address_register1 instead of address_register0.    Workaround:    If the system requires to work in addr_op = 01, switch to addr_op = 11, before the copy-back operation, and switch back after the copy-back operation is complete.     Projected ImpactJEEHEHRECONSTRUCT:    The software reset does not work consistently, but the failure conditions are not common in real world applications.    '
p1033
sg17
S' NXP'
p1034
sa(dp1035
g3
S' Cortex-A8'
p1036
sg5
S' :    Workaround for this erratum:    \xe2\x80\xa2 In the Automatic mode, use RBB_MODE = 0    \xe2\x80\xa2 If RBB_MODE = 1 is to be used, then after the Automatic program, Automatic CopyBack0 and Automatic CopyBack1 operations, Status read should be done explicitly.     WorkaroundsJEEHEHRECONSTRUCT:    After a warm reset, the user should unlock the unlock registers of the NFC. This allows the NFC    to start working as expected. Unlocking the registers cause a minor delay until the NFC is ready to work.    '
p1037
sg7
S' '
p1038
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1039
sg11
g12
sg13
S' 08208    ENGcm08208    NFC: Status read does not occur at the end of the program, with RBB_MODE = 1    '
p1040
sg15
S' :    After automatic Program operation the NFC is expected to perform a status read and store the status in STATUS_SUM register. With RBB_MODE = 1 (that is, NFC waiting using BSY_B signal), the status read does not occur at the end of the Program/CopyBack0 and CopyBack1 operations.     DescriptionJEEHEHRECONSTRUCT:    When a warm reset is issued, all the NFC registers should not be reset. This is done to enable a quick return to operation after the warm reset occurs. But when a warm reset is asserted to the NFC, the unlock registers are also reset. Therefore, the commands are not executed after warm reset.     Projected ImpactJEEHEHRECONSTRUCT:    The status is not correct.     Projected ImpactJEEHEHRECONSTRUCT:    Commands are not executed after warm reset. Workaround has minor performance impact.    '
p1041
sg17
S' NXP'
p1042
sa(dp1043
g3
S' Cortex-A8'
p1044
sg5
S' :    Connect the ready/busy signal from the Flash to the i.MX51 and program RBB_MODE = 1.    However, using this workaround restricts the number of CS supported to 4 instead of 8.     WorkaroundsJEEHEHRECONSTRUCT:    Avoid combining the following parameters/conditions:    \xe2\x80\xa2 16-bit flash bus width    \xe2\x80\xa2 Symmetric mode    \xe2\x80\xa2 1:2 clock-ratio    '
p1045
sg7
S' '
p1046
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1047
sg11
g12
sg13
S' 09970    ENGcm09970    NFC: NFC does not work properly when RBB_MODE = 0 (read    status)    '
p1048
sg15
S' :    The NFC should issue a read status command and move to the next operation only when the status is ready (status = 0xE0) but the NFC uses the ready/busy signal instead. For example, in automatic program operation, the NFC should perform a read status loop until the status is ready and only then assert the interrupt. But the NFC asserts the interrupt when the ready/busy signal returns to 1    (ready) while the read status is still busy.     DescriptionJEEHEHRECONSTRUCT:    When working in symmetric mode with a clock ratio 1:2, and using a 16-bit Flash bus width, the NFC reads data and organizes it using a shift in the internal RAM in such a way that the last 16 bits of the data block being transferred are not written to the memory.     Projected ImpactJEEHEHRECONSTRUCT:    When RBB_MODE = 0, the user can not tell if the device is busy or not. Automatic operations fail.    Also, the system can hang.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data may be read.    '
p1049
sg17
S' NXP'
p1050
sa(dp1051
g3
S' Cortex-A8'
p1052
sg5
S' :    Do not use the combination of parameters/conditions described above.     WorkaroundsJEEHEHRECONSTRUCT:    Do not use the combination of parameters/modes described above.    '
p1053
sg7
S' '
p1054
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1055
sg11
g12
sg13
S' 10033    ENGcm10033    NFC: Does not Issue DMA read request using 1/2 Kbyte Page in SDMA mode    '
p1056
sg15
S" :    The NFC does not issue DMA read request (dma_rd_req) when the page size is 1/2 Kbyte (PS = 00) and in SDMA mode (NO_SDMA = 0). It works normally when using other page sizes.     DescriptionJEEHEHRECONSTRUCT:    When the NFC is configured to addr_op = 1 or 3    \xe2\x80\xa2 If num_of_devices = 0\xe2\x80\x931, then the LSB of the page/blocks address section of the addr_group bits is not used for address generation.    \xe2\x80\xa2 If num_of_devices = 2\xe2\x80\x933, then the 2 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.    \xe2\x80\xa2 If num_of_devices = 4\xe2\x80\x937, then the 3 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.     Projected ImpactJEEHEHRECONSTRUCT:    Data can not be read by the SDMA     Projected ImpactJEEHEHRECONSTRUCT:    Working in these addr_op modes has some limitations on the size of the devices (depending on the number of devices). Such large devices do not exist at this time. This can be an issue when using larger devices that may become available in future.    NOTE    addr_op = 0 works as designed with any combination.    "
p1057
sg17
S' NXP'
p1058
sa(dp1059
g3
S' Cortex-A8'
p1060
sg5
S' :    Avoid using the NFC_RST bit of the NFC_CONFIGURATION1 register.     WorkaroundsJEEHEHRECONSTRUCT:    Avoid operating in this combination of conditions    '
p1061
sg7
S' '
p1062
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1063
sg11
g12
sg13
S' 10135    ENGcm10135    NFC: Incorrect ECC Error Detection when NFC_RST bit is set '
p1064
sg15
S' :    When the NFC_CONFIGURATION1[NFC_RST] bit is asserted, the state machines of the NFC is supposed to be initialized, but the state machines of the ECC encoder/decoder do not return to IDLE mode. Therefore the operation that is executed right after NFC_RST operation incorrectly indicates an uncorrectable ECC error.     DescriptionJEEHEHRECONSTRUCT:    When working in asymmetric mode, using a clock ratio of (flash_clock:axi_clock) 1:2 and a Flash bus width of 16-bits, the NFC reads data from the NAND Flash it sometimes repeats the same address of the internal RAM and therefore writes to the same addresses, overwriting data instead of incrementing the write pointer.     Projected ImpactJEEHEHRECONSTRUCT:    The program/read operations execute correctly, but the NFC indicates uncorrectable ECC errors in the ECC_STATUS_RESULT register.     Projected ImpactJEEHEHRECONSTRUCT:    Corrupted/invalid read data when operating with the combination of conditions described above.    '
p1065
sg17
S' NXP'
p1066
sa(dp1067
g3
S' Cortex-A8'
p1068
sg5
S' :    Avoid using this combination of conditions.     WorkaroundsJEEHEHRECONSTRUCT:    Configure the number of iterations to less than or equal to the number of devices used in interleaved mode, so that the NFC can issue one page per connected device.    '
p1069
sg7
S' '
p1070
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1071
sg11
g12
sg13
S' 10158    ENGcm10158    NFC: Reads only from the last device using addr_op = 2 without read confirmation    '
p1072
sg15
S' :    The bug occurs when the NFC is configured as follows:    Interleaved mode    Addr_op = 2    More than one device    Number of iterations > 1    During automatic read operations the NFC only reads the data from the last device and not from all the devices. The reason for that is that in addr_op = 2 the NFC issues the address phase to each of the devices separately because the address is taken from different register.     DescriptionJEEHEHRECONSTRUCT:    When the number of iterations are greater than the number of devices then the NFC is supposed to issue accesses to each device in a loop until the proper number of iterations is reached. The problem is that when the NFC completes the first loop it does not check whether the device is busy and issues accesses to the devices when they are in busy state.     Projected ImpactJEEHEHRECONSTRUCT:    Incorrect read operations when using the combination of conditions described above.     Projected ImpactJEEHEHRECONSTRUCT:    Incorrect read operations under the combination of conditions mentioned.    '
p1073
sg17
S' NXP'
p1074
sa(dp1075
g3
S' Cortex-A8'
p1076
sg5
S' :    Do not use these bytes. The Freescale WinCE and Linux BSPs (board support packages) do not use these bytes.     WorkaroundsJEEHEHRECONSTRUCT:    Connect on board to rb_b0 port a wired-OR of all the ready/busy signals of all the devices.    '
p1077
sg7
S' '
p1078
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1079
sg11
g12
sg13
S" 10205    ENGcm10205    NFC Doesn't Protect the Last 10 Spare Bytes of the Last Section in 4KB+218    "
p1080
sg15
S' :    The NFC-ECC engine does not protect the last 10 spare bytes of the last section in page size of 4 Kbytes + 218 bytes.    In the case where the page size is 4 Kbytes + 218 bytes, the first 7 sections are of 512 bytes and have spare of 26 bytes, and the last section has spare of 36 bytes.    In the case where 4/8 bits ECC protection, the arrangement of the last section of the memory is as following: 18 bytes/12 bytes then 8 bytes/14 bytes of ECC and 10 bytes of user-specific. Those 10 bytes of the last section are not ECC protected.     DescriptionJEEHEHRECONSTRUCT:    If RBB_MODE = 1 and atomic operation, the NFC monitors only the rb_b signal of device0    (rb_b0) instead of the rb_b# signal that corresponds to the selected device. Thus, when the NFC    executes atomic operation with a device other than device0, it monitors the incorrect ready/busy signal.     Projected ImpactJEEHEHRECONSTRUCT:    The last 10 spare bytes of the last section in 4 Kbytes + 218 bytes are not ECC protected.     Projected ImpactJEEHEHRECONSTRUCT:    Can not work in atomic operation with a device other than device0.    '
p1081
sg17
S' NXP'
p1082
sa(dp1083
g3
S' Cortex-A8'
p1084
sg5
S' :    To reduce the failure significantly, treat the case where NFC reports NOBER = T as uncorrectable error. This implies that if the number of errors is equal to T, the software must invalidate the block.    It is a common practice for the software to mark the block as bad in advance when the number of reported errors approaches T.     WorkaroundsJEEHEHRECONSTRUCT:    Due to this coherency issue, the system should prevent the NFC buffers from being cached. This can be prevented by limiting the outstanding read accesses to the NFC buffers to four data words for all combined accesses at any time.    In case of access from single AHB bus masters, which can only submit one outstanding access at a time (such as the SDMA), the burst size must not exceed 4.    In case of AXI bus masters, such as the ARM core, the software must control the data read accesses to be less then 4 data words at a time. Note that there is also a need to make sure that both Neon and the Core do not read together more then 4 data words at a time from the NFC buffers.    In case of multiple masters accessing the NFC, the limitation remains the same. For example, if both ARM and SDMA need to access the NFC buffers, the SDMA could limit its burst reads to 2    and ARM must not request more the 2 data words at a time.    '
p1085
sg7
S' '
p1086
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1087
sg11
g12
sg13
S' 10356    ENGcm10356    NFC: ECC mechanism may fail to report uncorrectable error situation    '
p1088
sg15
S' :    The NFC error correction mechanism is based on BCH error correction codes. The BCH error correction code allows correction up to a particular number of errors (T = 4 or 8 depending on the configuration), and detection in case of higher number of error bits. In a situation where the number of errors (NOBER) is larger than the number of errors the NFC can correct (T), the NFC should report on uncorrectable error.    Due to a theoretical limitation, the BCH code can fail in detecting the error when the number of actual error bits is much larger than the number of correctable bits. The failure depends on the location of the errors (related to Hamming distance), and its probability is very small. The detection failure probability can be calculated using the formula as follows: 1    P = --------    e    T    T! \xe2\x8b\x85 2    where T is number of correctable errors.    \xe2\x80\xa2 For 4-bit ECC, the calculated probability for a decoder error is 1 : 384    \xe2\x80\xa2 For 8-bit ECC, the calculated probability for a decoder error is 1 : 10,321,920    In case of failure, the NFC reports only on T or less errors (NOBER=T) and tries to correct them.    As a result the data is damaged and the NFC does not report on it.     DescriptionJEEHEHRECONSTRUCT:    When the host issues a read burst access to the NFC and during the data phase the host deasserts the rready signal (indication from the host that he is ready to accept the read data), then the NFC    fails to drive the next datums after the deassertion and also the assertion of the rlast (indication from the slave for end of read data transfer) does not occur on time. Thus, the current read access is incorrect and causes a severe AXI protocol violation.     Projected ImpactJEEHEHRECONSTRUCT:    There is a small probability for failure in detection of the errors by the ECC mechanism due to theoretical limitation of the ECC code.     Projected ImpactJEEHEHRECONSTRUCT:    The NFC is not able to handle more than 4 data word read transactions at a given time.    A restriction is imposed on read access to NAND Flash that require special attention in software and may cause some performance degradation for NAND Flash usage.    '
p1089
sg17
S' NXP'
p1090
sa(dp1091
g3
S' Cortex-A8'
p1092
sg5
S' :    The 0.5 Kbyte and 2 Kbyte use cases can be supported under the specified restrictions:    \xe2\x80\xa2 In case of the write operation with page size of 0.5 Kbyte (PS = 00), it is allowed to configure the NFC to automatic interleaved mode (that is, with NO_SDMA=0 and setting NUM_OF_ITERATIONS to greater than zero). In this case, the FMP field (that defines a safety buffer inside the NFC internal RAM between the AXI host address and the NAND address) must be set to 0.5 Kbyte (set FMP = 4).    In read operation, the FMP can be set to any value that is less than or equal to 0.5 Kbyte, (that is, setting FMP to either 0, 1, 2, 3 or 4).    Chip Errata for the i.MX51, Rev. 5    118    Freescale Semiconductor10676    \xe2\x80\xa2 In case of write operation with page size of 2 Kbyte (PS = 01), it is allowed to configure the NFC    to automatic interleaved mode (that is, with NO_SDMA=0 and setting NUM_OF_ITERATIONS to greater than zero). Here, the FMP field must be set to 2 Kbyte (that is, setting FMP = 6).    In the read operation, any value of FMP which is less than or equal to 2KB can be configured (that is, setting FMP to either 0, 1, 2, 3, 4, 5, or 6).    In case the page size is 4 Kbyte (PS = 10), it is forbidden to configure the NFC to automatic interleaved mode for both write and read operations. NO_SDMA should be set to 1 and the field NUM_OF_ITERATIONS should be set to 0. Instead, the interleave operation should be    implemented manually as also proposed in erratum ENGcm10967.    \xe2\x80\xa2 Set the number of pages to read/write to 1 (set NUM_OF_ITERATIONS = 0).    \xe2\x80\xa2 Set the number of devices connected (that is, setting the field NUM_OF_DEVICES).    \xe2\x80\xa2 Use addressing option 1 (set ADR_OP = 1, part of the address is used for chip select) and configure the target address and the target chip select at address group0 (that is, setting the fields NAND_ADD0 and NAND_ADD8).    \xe2\x80\xa2 An interrupt is issued after each single page read/write transfer. Upon receiving the interrupt, reconfigure RBA (Ram Buffer Address) and the corresponding bits of ADDR_ADD0 to repeat the operation for the next device.    '
p1093
sg7
S' '
p1094
sg9
S' :    No fix scheduled.    '
p1095
sg11
g12
sg13
S' 10676    ENGcm10676    NFC fails to perform ECC encoding in interleave mode if FMP is larger than PS    '
p1096
sg15
S' :    This issue is related to SDMA access to NFC in automatic interleave mode.    The faulty NFC operation occurs in the following conditions:    \xe2\x80\x94 When NUM_OF_ITERATION is greater than zero, and NO_SDMA = 0 for automatic interleave mode access from SDMA.    \xe2\x80\x94 FMP (Fifo Mode Protect) is set to a value smaller than the Page Size (PS). The FMP    determines the interval between the write and read pointers to memory buffer.    \xe2\x80\x94 FMP threshold is reached before the host drives more data to the RAM    In this case, the NFC fetches data from the RAM and drives it to the flash line. This causes the difference between the write and read pointers to violate the FMP threshold and as a result, the NFC    stops driving data to the flash line. In such a situation, the last data that is driven to the flash line does not pass through the ECC (Error Correction) encoding engine. As a result, the ECC engine fails to encode the whole 0.5 Kbyte data and reports wrongly on uncorrectable errors.     Projected ImpactJEEHEHRECONSTRUCT:    The above described case with the FMP (FIFO Mode Protection) feature activated and with NUM_OF_ITERATIONS greater than zero (that is, for SDMA) can result in wrong function of NFC.    The issue impacts only SDMA access to NFC in interleave mode with page size equal to 4 Kbyte.    In this case, the automatic interleave mode can not be supported and has to be managed manually.    Other cases can be resolved using the settings described in the workaround section. The implication of proposed setting is some additional latency in write operation only. The latency is derived from the time it takes to fill the internal RAM with the page data.    '
p1097
sg17
S' NXP'
p1098
sa(dp1099
g3
S' Cortex-A8'
p1100
sg5
S' :    For Page Size equal to 4 Kbyte (PS = 10) the NUM_OF_ITERATION must be set to 0 and NO_SDMA must be set to 1, disabling the interleave mode.    An interleave mode can be implemented manually by configuring the appropriate NUM_OF_DEVICES while setting ADD_OP = 1 (Addressing Option 1, part of the address is used for chip select). In this case, an interrupt is issued after each single page read/write transfer. Upon receiving the interrupt, reconfigure RBA (Ram Buffer Address) and the corresponding bits of ADDR_ADD0 to repeat the operation for the next device.     WorkaroundsJEEHEHRECONSTRUCT:    Avoid using interleaved mode in TOO configuration.    '
p1101
sg7
S' '
p1102
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1103
sg11
g12
sg13
S' 10967    ENGcm10967    NFC does not function properly for 4 Kbyte Page Size in    interleave mode    '
p1104
sg15
S' :    This issue is related to SDMA access to NFC in automatic interleave mode (NO_SDMA = 0).    NFC buffer mechanism does not operate properly under the following set of conditions, potentially feeding wrong data from the internal NFC RAM to FLASH data line.    The fault occurs under the following set of conditions:    \xe2\x80\xa2 NFC is set to operate in interleave mode (NO_SDMA = 0) and NUM_OF_ITERATION > 0 for SDMA access.    \xe2\x80\xa2 Page Size is set to 4 Kbyte (PS = 10)    \xe2\x80\xa2 FIFO Mode Protect is set to 4 Kbyte (FMP = 7)     DescriptionJEEHEHRECONSTRUCT:    NFC issues premature DMA read request for each page in case of the TOO configuration in interleaved mode.    The TOO (Two On One) configuration is a case where two 8-bit NAND devices are connected to the same CS line to form a 16-bit data width (one device on the lower byte of data bus and second device on the upper byte).    An interleaved mode is configured by setting the number of devices and NUM_OF_ITERATION    to a value greater than zero, and NO_SDMA = 0 for SDMA access.    When the NFC is configured for the above two modes, in addition to the DMA request at the end of the buffer, it wrongly issues additional DMA read request for each page in the middle of the buffer.    Due to this, the SDMA starts fetching data from the RAM buffer before the complete data is available.     Projected ImpactJEEHEHRECONSTRUCT:    The above described case can result in wrong functioning of NFC and should be avoided. The issue is relevant only for SDMA access to NFC in interleave mode with page size equal to 4 Kbyte.     Projected ImpactJEEHEHRECONSTRUCT:    Erroneous behavior under the above mentioned conditions.    '
p1105
sg17
S' NXP'
p1106
sa(dp1107
g3
S' Cortex-A8'
p1108
sg5
S' :    Perform atomic status read operation (that is, send command 70 followed by single toggle of RE).     WorkaroundsJEEHEHRECONSTRUCT:    The recommended workaround is to set RBB_MODE = 0. This also frees up the NANDF_RBx pads for other usages. The NFC monitors the ready-busy status by performing a status-read command.    Another option is to work with ADD_OP other than 01, allowing to work automatically with a single device other than device0.    See, NAND_FLASH_CONFIG Register Field '
p1109
sg7
S' '
p1110
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1111
sg11
g12
sg13
S' 11060    ENGcm11060    NFC does not perform automatic status read operation    (AUTO_STAT) according to ACTIVE_CS    '
p1112
sg15
S' :    When the NFC is configured to perform an automatic status read operation (that is, setting AUTO_STAT), it should execute that operation on the device ID that is configured in the ACTIVE_CS. Due to the reported issue the NFC executes the operation on another device rather than the one specified in ACTIVE_CS.     DescriptionJEEHEHRECONSTRUCT:    The NFC may not properly sample the ready/busy (R/B) signal under the following conditions: 1. RBB_MODE = 1 (Ready-Busy mode 1 - NFC monitors ready-busy status by checking NANDF_RBx (R/B) signals)    2. ADD_OP = 01 (Addressing Option 01 - NFC uses only address_group0 with single NAND    device    3. enfc_clk period is less than twb/3 (twb is the period from WE write enable signal HIGH to R/B    ready/busy signal assertion)    If RBB_MODE = 1 and ADD_OP = 01, the NFC may miss the sampling of the ready/busy signal (R/B) if the enfc_clk is too fast. According to the NAND flash protocol, the NAND device should enter the busy mode and assert the R/B signal (driving R/B signal to zero) after the maximum time period of twb after the deassertion of the WE signal (driving write enable to one).    The NFC samples the R/B signal after a fixed time of 3 enfc_clk cycles after the deassertion of WE.    Typically, the twb period is 100 ns. When the enfc_clk is set to less than 33 ns period, the NFC may miss sampling the R/B.     DescriptionJEEHEHRECONSTRUCTs table in the i.MX51 Multimedia Applications Processor Reference Manual ( MCIMX51) for detailed modes description.    If the above two options are not feasible, the enfc_clk frequency can be reduced such that clock period is larger than twb/3. This results in small performance degradation as the supported ONFI1.0    NAND can run at up to 40 MHz.     Projected ImpactJEEHEHRECONSTRUCT:    Incorrect status return for automatic status read operation.     Projected ImpactJEEHEHRECONSTRUCT:    Violation of NAND interface protocol can result in data corruption. The implementation of the proposed workaround may have insignificant performance impact.    '
p1113
sg17
S' NXP'
p1114
sa(dp1115
g3
S' Cortex-A8'
p1116
sg5
S' :    Avoid the above described situation. Note that, in current WinCE and Linux BSP releases from Freescale, the SDMA Multi-Page mode read from NFC is not activated.     WorkaroundsJEEHEHRECONSTRUCT:    Take measures to avoid such cases. Leaving the unused interface supply open, does not cause any issue. The issue occurs only when a supply is grounded through a small resistor. The best design practice is to apply power to all the supply rails.    '
p1117
sg7
S' '
p1118
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    125'
p1119
sg11
g12
sg13
S' 11036    ENGcm11036    SDMA multi-page read from the NFC, when the WEIM is    operating, can result in data corruption or EMI hanging    '
p1120
sg15
S' :    Data corruption or EMI hanging can occur on SDMA Multi-Page read from the NFC in case of simultaneous read access by other master from WEIM. Use of SDMA is relevant for a case of multiple pages read from the NFC (that is, setting NUM_OF_ITERATION to a value greater than zero and setting NO_SDMA to zero in NFC for automatic interleave mode).     DescriptionJEEHEHRECONSTRUCT:    If the power supply of an unused UHVIO pad power group is pulled down, it can cause malfunction in the other functional UHVIO IO cells. The UHVIO IO cells (that support signal levels above 3 V) are used in interfaces such as SD card, NAND Flash. For example, grounding SD2 power supply rail through a small resistor (say 470 \xce\xa9) causes boot issues from the SD1 interface. This is caused due to a particular HVIO IO cell design limitation.     Projected ImpactJEEHEHRECONSTRUCT:    SDMA read access from NFC may be corrupted in case other masters perform read from WEIM    at same time.    There are no issues in following cases:    \xe2\x80\x94 ARM accesses the NFC when WEIM is accessed by any other master in the system    \xe2\x80\x94 SDMA accesses the NFC when the WEIM is idle    \xe2\x80\x94 NFC is idle and WEIM is accessed by any master in the system  Projected ImpactJEEHEHRECONSTRUCT:    Pay attention to this limitation during board design. An unintentional grounding can occur because of nonfunctional or disabled voltage supply device connected to the UHVIO based interface VCC    line.    '
p1121
sg17
S' NXP'
p1122
sa(dp1123
g3
S' Cortex-A8'
p1124
sg5
S' :    Take measures to avoid such cases. Note that leaving the unused interface supply open, does not cause any issue. Having this situation for short periods (such as during power up sequence) should not cause any damage.    Alternatively, if high impedance with a low resistive path to ground is projected on the supply, then leakage is negligible.     WorkaroundsJEEHEHRECONSTRUCT:    Use internal RAM boot image. In this case DDR configuration is not required.    '
p1125
sg7
S' '
p1126
sg9
S' :    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    126    Freescale Semiconductor10656    ENGcm10656    Serial boot will fail if HAB_TYPE is PRODUCTION     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    127'
p1127
sg11
g12
sg13
S' 11041    ENGcm11041    Dependency between VCC, VREG and NVCC_HSx supplies    '
p1128
sg15
S' :    Pulling down the power supply of any of NVCC_HSx supplies (from the group of NVCC_HS6, NVCC_HS10, NVCC_HS4_1, NVCC_HS4_2 supplies) or VREG supply results in high leakage current from VCC through the supply that is pulled down. Leakage of order of a few hundreds of mA is observed in case NVCC_HSx or VREG supplies are shortened to ground.    If the supplies in NVCC_HSx supplies and VREG are left unconnected or in high impedance state, the leakage would not be observed.    This is caused due to a particular MIPI shielding IO cell design limitation. The leakage current in this case is caused by the ESD protection diode inside the MIPI interface shielding pads.     DescriptionJEEHEHRECONSTRUCT:    If the HAB_TYPE e-fuse is blown as Production, then accesses to peripherals from DCD and SDP    commands is disabled and DDR controller cannot be configured, so DDR cannot be used.    The ROM does not check if the address is valid if HAB_TYPE is not Production for write header and write file SDP commands. So there is no issue in this case.    However, if HAB_TYPE is Production, the ROM allows SDP commands only if the target address lies within the DDR, IRAM, GMEM, NAND flash buffer or WEIM memory regions. SDP Write commands to peripherals such as the memory and clock controllers are denied.     Projected ImpactJEEHEHRECONSTRUCT:    Need to consider this limitation during the board design.    This is mostly relevant to suspend mode, in which the supply regulator of those pins may be turned off to save power.    Typically, when a regulator is off, there would be high impedance on the associated supply pin(s), and leakage depends on the resistive path to ground that exists on the board. If there is a high resistive path, almost no leakage would be observed.    This is also relevant to power-up sequence, because these supplies would be powered-up after VCC    supply and depends on the resistive path, there could be some leakage till these supplies are stable.     Projected ImpactJEEHEHRECONSTRUCT:    Can not execute serial boot if HAB_TYPE is set to Production.    '
p1129
sg17
S' NXP'
p1130
sa(dp1131
g3
S' Cortex-A8'
p1132
sg5
S' :    The only workaround is to avoid setting the unused R/Bx signals to zero during boot, in case of NAND Flash boot mode.     WorkaroundsJEEHEHRECONSTRUCT:    For 4 Kbyte devices, it is possible to use only the top half of pages. In this case, ROM reads the boot image properly, but the bottom half of pages are wasted.    '
p1133
sg7
S' '
p1134
sg9
S' :    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    128    Freescale Semiconductor11353    ENGcm11353    ROM (Boot): OneNAND boot fails for 4 Kbyte devices     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled for the i.MX51.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    129'
p1135
sg11
g12
sg13
S' 11189    ENGcm11189    ROM (Boot)/NFC: NAND Flash Boot fails when one of the unused NANDF_RBx signals are held at low    '
p1136
sg15
S' :    The Boot procedure fails when the boot code tries to initialize and access the NAND Flash, in case one of the unused R/Bx signals is grounded. In a system with a single NANDF Flash device, NANDF_RB1, NANDF_RB2, NANDF_RB3 are not in use, as the Boot code uses only CS0. These signals can be alternatively used for other functions (such as GPIO input). Due to reported limitation, the boot in NAND Flash mode fails, if one of the unused NANDF_RBx signals is held at zero during the boot.     DescriptionJEEHEHRECONSTRUCT:    OneNAND boot driver calculates page and sector numbers incorrectly for 4 Kbyte devices.     Projected ImpactJEEHEHRECONSTRUCT:    This limitation impacts the possible usage of NANDF_RB1, NANDF_RB2 and NANDF_RB3 in other alternate IOMUX modes as input, with zero level at boot.     Projected ImpactJEEHEHRECONSTRUCT:    4 Kbyte OneNAND devices boot does not work for image sizes above 1 Kbyte.    2 Kbyte OneNAND devices boot works properly.    '
p1137
sg17
S' NXP'
p1138
sa(dp1139
g3
S' Cortex-A8'
p1140
sg5
S' :    Be aware of limitation. Do not reset RTIC during one time hash mode.     WorkaroundsJEEHEHRECONSTRUCT:    None. Avoid using the memory region unlock feature in the TrustZone code.    '
p1141
sg7
S' '
p1142
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1143
sg11
g12
sg13
S' 05863    f    ENGcm05863    RTIC: Software reset during one time hash mode corrupts RTIC    state machine    '
p1144
sg15
S' :    The sw_reset bit in the RTIC spec says that it should not be modified in run-time check mode. A software reset was done during one time hash mode and immediately after that RTIC was enabled.    The RTIC state machine is corrupted in such a scenario. The assertion of software reset when hash_once_command is set in rtic_control, leads to the assertion of hash_once and hence of zero_byte_length in rtic_dma_request. This in turn sets the mem_part_1_done bit and even when RTIC is enabled this remains set, leading to corruption of the state machine.     DescriptionJEEHEHRECONSTRUCT:    The RTICv3 feature that allows the TrustZone software to disable the run-time check of the selected memory regions (region unlock), can cause the RTICv3 to hang and stop the run time integrity check of other regions.     Projected ImpactJEEHEHRECONSTRUCT:    RTIC hangs.     Projected ImpactJEEHEHRECONSTRUCT:    The RTICv3 feature that allows the TrustZone software to disable run-time check of the selected memory regions cannot be utilized.    '
p1145
sg17
S' NXP'
p1146
sa(dp1147
g3
S' Cortex-A8'
p1148
sg5
S' :    Avoid using a ratio of 1:1 between AHB and IP buses clock frequencies. Other software workarounds are considered, but not yet confirmed.     WorkaroundsJEEHEHRECONSTRUCT:    None. However, this issue can be mitigated by ensuring that the LP time and monotonic counters are securely reprovisioned. One approach is to authenticate all provisioning software using HAB    (high assurance boot) and to lock the LP time and monotonic counters against further changes before allowing unauthenticated software to execute.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    133'
p1149
sg7
S' '
p1150
sg9
S' :    No fix scheduled    '
p1151
sg11
g12
sg13
S' 10334    ENGcm10334    SAHARA/CCM: Frequency ratio restriction for AHB and IP buses in SAHARA    '
p1152
sg15
S' :    SAHARA does not work properly if AHB:IP buses clock ratio is 1:1. It works fine with AHB:IP    buses clock ratio 2:1.     DescriptionJEEHEHRECONSTRUCT:    There is the possibility of a loss of SRTC failure status upon peripheral supply voltage (the HP    section) power up.    The SRTC incorporates a System State Retention Register (SSRR) that stores system parameters during system shutdown modes. This register and all SRTC counters are powered by dedicated supply rail NVCC_SRTC_POW that remains active, allowing all other supply rails to shut down.    The SSRR also stores the system security state. If a security violation occurs, the SSRR marks the event as a security violation indication.    The SRTC is split to two supplies: LP and HP. The LP section is powered by NVCC_SRTC_POW    and always remains active, whereas the HP section is powered by VCC rail and can be shut down.    As long as the SRTC LP section remains active with its separate power supply and clock inputs, it continues to detect and record security violations when the HP section and the rest of the chip are powered down. When power is restored to the HP section, any security violation detected during power down becomes visible to the rest of the system through a security monitor alarm and the SRTC register interface. In particular, software can examine the LP status register to observe the LP Failure state and status bits indicating which security violation occurred.    In rare cases, an erroneous reset of the LP section has been observed during HP power-up when a security violation was recorded during HP section power down. This causes the LP to move to Initialize state rather than Failure state, and erases all record of the security violation.    Please note that this scenario can occur only if SRTC LP has gone into failure state when the peripheral supply power (HP) is off. The unintended SRTC reset does not occur while the SRTC    LP remains in the Valid state.     Projected ImpactJEEHEHRECONSTRUCT:    Adds limitation on system configuration for the clock ratio of 1:1 between AHB and IP buses.     Projected ImpactJEEHEHRECONSTRUCT:    This issue is relevant for systems supporting DRM (digital rights management) and other applications requiring a secure clock or monotonic counter. If the SRTC failure status is lost as above, then a system which has been tampered while the main power was off may appear indistinguishable from a system which has a SRTC that is not violated. If software is then permitted to provision the LP time and monotonic counters insecurely, this could mislead the application relying on the SRTC.    Note that this issue does not permit the SRTC LP clock and monotonic counters to be modified directly without leaving the Valid state. In order to complete the attack, there is a need to execute malicious or insecure software that tries to reconfigure the SRTC after it is reset. The system can be protected against such software by code signing and authentication methods.    '
p1153
sg17
S' NXP'
p1154
sa(dp1155
g3
S' Cortex-A8'
p1156
sg5
S' :    Enable Tx and Rx in same frame when in Network and Synchronous mode of operation '
p1157
sg7
S' '
p1158
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1159
sg11
g12
sg13
S' 10272    '
p1160
sg15
S' :    In Network and Synchronous mode of operation, if Rx is enabled and after one or more frames passes Tx is enabled, the first data is transmitted from FIFO1 instead of FIFO0.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data is transmitted.    '
p1161
sg17
S' NXP'
p1162
sa(dp1163
g3
S' Cortex-A8'
p1164
sg5
S' :    The following workaround can be implemented to avoid these issues. Enable/disable Tx after occurrence of RFS interrupt:    1. Enable RE(SCR[2])    2. Enable RIE and RFS_EN in SIER12SPACEJEEHEH3. Wait for occurrence of RFS      4. Enable/disable TE(SCR[1])     WorkaroundsJEEHEHRECONSTRUCT:    Disable Tx after occurrence of TFS interrupt, using the following steps to disable TX_EN bit is: 1. Enable TIE and TFS_EN in SIER.    2. Wait for occurrence of TFS.    3. Disable TE(SCR[1]).    '
p1165
sg7
S' '
p1166
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1167
sg11
g12
sg13
S' 09220    ENGcm09220    SSI: If TX_EN bit toggled 5 clk cycles before FS, the data transmission not correct    '
p1168
sg15
S' :    If Tx is enabled or disabled within a 5 clock cycle window before Frame Sync. Data transmission may not be proper in the following conditions:    \xe2\x80\xa2 Normal Synchronous mode: With Rx disabled if Tx is enabled 3 clock cycle before non-early FS, glitch of 0.5 clock cycles can be seen on the STXD line.    \xe2\x80\xa2 Normal Synchronous mode: If Tx is enabled 4 clock cycle before external early word length frame sync with fifo0 disabled two channel disabled, ddr_stxd is high for 1.5 clock cycles.    \xe2\x80\xa2 Normal Synchronous mode: If Tx is reenabled 2 clock cycles before early FS, ddr_stxd line goes high for 0.5 clk cycles.    \xe2\x80\xa2 I2s_slave: Tx is disabled in the first time slot and is again reenabled in the 2nd time slot of a different frame wrong data getting transmitted in the next frame. The tx state machine is not running for the frame in which wrong data is transmitted.    \xe2\x80\xa2 I2s_master: Tx is disabled 2 clk cycle before FS data is repeated in second time slot 6.Network Synchronous mode: Reenabling Tx, 1 clock cycles before External FS, and frame count as 2, results in data in first time slot getting missed.    \xe2\x80\xa2 Network Synchronous mode: External Early word length FS. If Tx is reenabled 2 clk cycles before FS signal then in the next frame data is transmitted for 0.5 clk cycles.     DescriptionJEEHEHRECONSTRUCT:    In Normal Asynchronous mode: If Tx is disabled 2 clk cycle before non early bit length external FS, ddr_stxd signal is indefinitely set high even when no data is transmitted.     Projected ImpactJEEHEHRECONSTRUCT:    Data transmitted may be lost.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data transmission may be recognized.    '
p1169
sg17
S' NXP'
p1170
sa(dp1171
g3
S' Cortex-A8'
p1172
sg5
S' :    1. Enable SSI_EN and Tx_EN in the same frame.    2. Do not use early FS in Internal FS mode.     WorkaroundsJEEHEHRECONSTRUCT:    Two different workarounds can be used for this issue:    \xe2\x80\xa2 Reset SSI every time Rx is enabled.    \xe2\x80\xa2 Do not use TFR_CLK_DIS feature.    '
p1173
sg7
S' '
p1174
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1175
sg11
g12
sg13
S' 06569    ENGcm06569    SSI: Transmission does not take place in case of bit length early frame sync mode    '
p1176
sg15
S' :    When SSI is in normal synchronous mode and frame sync is configured as bit length early frame sync, data is not transmitted.     DescriptionJEEHEHRECONSTRUCT:    I2S_master mode: If Rx is disabled and again enabled with Tx disabled along with TFR_CLK DIS    set, the first data after reenabling is received in the second time slot and hence channel swapping takes place. Network Synchronous mode: If Rx is disabled and again enabled with Tx disabled when TFR_CLK_DIS is set. Data is not accepted into the fifo according to the masking bits.     Projected ImpactJEEHEHRECONSTRUCT:    There is no toggling on the TXD data line.     Projected ImpactJEEHEHRECONSTRUCT:    Channel swapping or data lost (according to mode).    '
p1177
sg17
S' NXP'
p1178
sa(dp1179
g3
S' Cortex-A8'
p1180
sg5
S' :    If no overruns can be guaranteed on a system level (based on the serial data rate and latency of servicing the SSI), two options are suggested:    a) Give up on the overflow indication. Set the watermark at a sufficiently low level such that the probability for true overflow condition is very low. This option allows smoother performance but lacks any indication that a true overflow has occurred.    b) Set the watermark level to the FIFO size so that the overflow interrupt corresponds with the actual overflow condition. This option provides overflow indication, however there is larger probability for overflow to occur because the watermark indicator is the FIFO size.    Option (a) can be utilized in cases where the application actually has no means to recover from overflow condition in any case (for example in case of audio playback). This option gives smoother performance.    Option (b) can be utilized in cases where there are good means to recover from an overflow state (for example in case the SSI channel is used for control or status indication and there is an option for data retransmit). In this case, the probability of actual overflow is higher, but there is a reliable indication that the overflow has actually occurred.     WorkaroundsJEEHEHRECONSTRUCT:    The data should be shifted to the right location by the SDMA script or by the software in case of direct access to the register.    '
p1181
sg7
S' '
p1182
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    '
p1183
sg11
g12
sg13
S' 09668    ENGcm09668    SSI: Receive Overrun Error Generated at Wrong Time for    Watermark Level    '
p1184
sg15
S' :    The receive overrun error is generated when the received FIFO index is 1 more than the watermark level, but the data is received properly in the FIFO. There is no loss of data, the only problem is that the receive overrun interrupt is generated at the wrong time.     DescriptionJEEHEHRECONSTRUCT:    In AC97, 16-bit mode, the Rx data is received in bits [19:4] of RxFIFO, instead of [15:0] bits.     Projected ImpactJEEHEHRECONSTRUCT:    The receive overrun error is not valid when the watermark mechanism is used.     Projected ImpactJEEHEHRECONSTRUCT:    The SDMA script should be updated accordingly to perform the shift to the right location on the fly during data transfer. If the data register is accessed directly by software, it should account for the shifted data and perform shifting to the right location.    '
p1185
sg17
S' NXP'
p1186
sa(dp1187
g3
S' Cortex-A8'
p1188
sg5
S" :    When MX51's USB is operating in device mode, the host should not send two ISO_OUT sequences within less that 200 ns, otherwise i.MX51's USB does not operate correctly.     WorkaroundsJEEHEHRECONSTRUCT:    The SW has to set the MULT < 3 to avoid this bug.    "
p1189
sg7
S' '
p1190
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1191
sg11
g12
sg13
S' 09134    ENGcm09134    USB: Core device fails to receive two sequential OUT    transactions in short time    '
p1192
sg15
S' :    When receiving this sequence OUT - DATA0 - OUT - DATA1, if the inter-packet delay between DATA0 and the 2nd OUT is under 200ns, the device sees the DATA1 packet as a short-packet, even if it is correctly formed. This terminates the transfer from the device point of view, generating an IOC interrupt. DATA0 is correctly received, though.     DescriptionJEEHEHRECONSTRUCT:    The occurrence of an error in device mode sends ISO data in the next \xce\xbcFrame that should have been discarded.     Projected ImpactJEEHEHRECONSTRUCT:    It should only be applicable to ISO OUT as a Device.     Projected ImpactJEEHEHRECONSTRUCT:    Critical for timing-dependent device ISO IN Mult = 3.    '
p1193
sg17
S' NXP'
p1194
sa(dp1195
g3
S' Cortex-A8'
p1196
sg5
S' :    This should not happen in real system because when configured correctly, the USB should not get an error response. If it happens, then Garbage In Garbage Out.     WorkaroundsJEEHEHRECONSTRUCT:    The situation can be avoided if the USB_CLK_ROOT clock is turned on briefly when any port wakes up from low power suspend. This ensures that the \xe2\x80\x9csuspended\xe2\x80\x9d state is cleared in the serial PHY interface.    One can optionally check, during wake-up processing, if the USB clock did run during low-power suspend and only turn on USB_CLK_ROOT when needed.    '
p1197
sg7
S' '
p1198
sg9
S' :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1199
sg11
g12
sg13
S' 07300    ENGcm07300    USB: Erroneous descriptor handling by USBOH module    '
p1200
sg15
S" :    The USBOH core uses the erroneous hrdata (when hresp is high) and results in the false USB    transfer at the external Interface.     DescriptionJEEHEHRECONSTRUCT:    The following software flow produces this issue.    1. Configure PTS of Host (or OTG) controller to select ULPI (or UTMI) mode (default is serial mode) and turn USB_CLK_ROOT (comes from on-chip PLL) off.    2. Set PORTSC.PHCD bit to put USB controller & PHY into suspend mode -> ULPI (or UTMI) PHY clock stops correctly.    3. Turn USB_CLK_ROOT on and wait a short time.    4. Turn USB_CLK_ROOT off.    5. Clear PHCD bit \xe2\x86\x92 PHY clock starts running correctly    6. Delay to allow PHY clock to become active    7. Set PHCD bit again \xe2\x86\x92 Controller suspends the PHY and immediately wakes it up, which is incorrect behavior.    This happens because after Step 4, the serial USB engine stays in suspend mode even after the PHCD bit is cleared. This is because the USB_CLK_ROOT is not valid any more.    The root cause is that USB_CLK_ROOT is used for the USB controller's serial engine. For one USB controller, the USB_CLK_ROOT for serial engine can be always turned off in ULPI or UTMI mode. The case mentioned above (turn on, turn off this clock while PHCD is high) is not a real use case.    However on MX51, there are several USB controllers which share the same USB_CLK_ROOT    clock. In this case, if one USB works in ULPI or UTMI mode while PHCD is set, another USB    may work in serial mode which may turn on, turn off the USB_CLK_ROOT. This is the flow which has issue mentioned above.     Projected ImpactJEEHEHRECONSTRUCT:    False transfer of USB.     Projected ImpactJEEHEHRECONSTRUCT:    Improper USB interface operation as described above.    "
p1201
sg17
S' NXP'
p1202
sa(dp1203
g3
S' Cortex-A8'
p1204
sg5
S' :    Utilize the USB-OTG PHY interface instead or use other USB-Host ports for ULPI interface.    '
p1205
sg7
S' '
p1206
sg9
S' :    No fix scheduled. Specification documentation updated accordingly.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    147'
p1207
sg11
g12
sg13
S' 10636    '
p1208
sg15
S' :    The USB-OTG port ULPI mode is provided for debugging purposes and is not supported for regular operation. There is no commitment for proper timing functionality on this interface.    This erratum is related to USB OTG port only, for which internal USB-PHY is provided.     Projected ImpactJEEHEHRECONSTRUCT:    The USB-OTG port does not support ULPI interface.    The erratum does not relate to the functionality of ULPI mode on other USB-Host ports or to the USB-OTG internal PHY interface.    '
p1209
sg17
S' NXP'
p1210
sa(dp1211
g3
S' Cortex-A8'
p1212
sg5
S' :    None. Need to add transceiver for on board connection.    '
p1213
sg7
S' '
p1214
sg9
S' :    No fix scheduled. Feature is removed from the reference manual.    Chip Errata for the i.MX51, Rev. 5    148    Freescale Semiconductor09125    ENGcm09125    VPU: VC-1 AP bug    '
p1215
sg11
g12
sg13
S' 11408    ENGcm11408    USB: High Speed Transceiverless Logic interface (HS-TLL) and Full Speed Transceiverless Logic interface (FS-TLL) USB    interfaces are not supported    '
p1216
sg15
S' :    HS-TLL and FS-TLL are not supported. These features will be removed from the specification.     DescriptionJEEHEHRECONSTRUCT:    The VC-1 intensity bug occurred during motion compensation interpolation process. This bug is that the intensity register is set for wrong intensity scale/shift values in special cases.This bug induces the image distortion because VPU has one intensity information about motion vector in the intensity process. In VC-1 standard, this codec should have all intensity information by line. This bug affects the VC-1 stream which have both field interlace mode and frame mode. There is no impact on the normal decoding stream of VPU except the VC-1 Intensity field mode stream.    The VC-1 AP bug includes three sub bugs:    \xe2\x80\xa2 Field picture boundary distortion:    \xe2\x80\x94 Appear condition: Current picture is a field, reference picture is a frame, reference vector is set for the outer of P/B Frame, intensity is enabled, and scale/shift intensity value for top and bottom are different to each other.    \xe2\x80\x94  DescriptionJEEHEHRECONSTRUCT: If the reference vector is set for the outer of reference picture, the intensity scale/shift value should be changed in VC-1 Standard. VPU has the intensity information which is the \xe2\x80\x9cintensity bottom\xe2\x80\x9d without change. But, In VC-1 standard, the intensity information changed from \xe2\x80\x9c-1:intensity bottom\xe2\x80\x9d to \xe2\x80\x9c0:intensity Top\xe2\x80\x9d.    \xe2\x80\xa2 Field picture reference to the same frame field picture:    \xe2\x80\x94 Appear condition: Current picture is a field, reference picture is in the same frame, scale/shift intensity value for top and bottom are different to each other.    \xe2\x80\x94  DescriptionJEEHEHRECONSTRUCT: When current field picture is referencing a field picture in same frame, current version of MC is always referencing parameters for forward intensity compensation which cause distortion on the any field position.    \xe2\x80\xa2 Frame picture reference to previous field picture:    \xe2\x80\x94 Appear condition: Current picture is a frame, reference picture is a field, intensity is enabled, and scale/shift intensity value for top and bottom are different to each other.    \xe2\x80\x94  DescriptionJEEHEHRECONSTRUCT: In VC-1 standard, the intensity value must be changed by y-position on the two field reference picture. But VPU VC-1 intensity value always indicate the \xe2\x80\x9ctop Field Intensity value\xe2\x80\x9d which cause distortion on the line of the picture.     Projected ImpactJEEHEHRECONSTRUCT:    Removed support for the option of on board USB connection without transceiver.     Projected ImpactJEEHEHRECONSTRUCT:    There are three different cases for the projected impact:    \xe2\x80\xa2 Case 1    This bug only affects VC-1 stream which have both field interlace mode and frame mode. That kind of bitstream rarely appears in real application case.    \xe2\x80\xa2 Case 2    There is no impact on the normal decoding stream of VPU except the VC-1 Intensity field mode stream.    \xe2\x80\xa2 Case 3    Visual quality impact.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    149'
p1217
sg17
S' NXP'
p1218
sa(dp1219
g3
S' Cortex-A8'
p1220
sg5
S' :    Workaround for case 1:    This case needs RTL fix, no firmware workaround. And it has minor visual impact along the boundary of the picture.    Workaround for case 2:    This case can be fixed by firmware. Firmware sets the parameters for forward intensity compensation with values for forward and current intensity compensation.    Workaround for case 3:    Can not be fixed by firmware, but visual quality can be improved by firmware. RTL update can fully fix the problem.     WorkaroundsJEEHEHRECONSTRUCT:    None. No firmware workaround fix feasible.    '
p1221
sg7
S' '
p1222
sg9
S' :    Case 1 \xe2\x80\x94 No fix scheduled.    Cases 2 and 3 \xe2\x80\x94 Fixed in last firmware release. For case3, the issue is not completely fixed; however, the visual quality is improved.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1223
sg11
g12
sg13
S' 09125    '
p1224
sg15
S' :    This logic bug is in the DC prediction for H.263-P3 Advanced Intra Coding (Annex I) decoding.    A clip function logic design was mistakenly implemented thus causes a wrong clipping result when H.263 Annex I is enabled and the DC prediction value falls in the range of [0, -2048]. This condition most likely happens in a picture having very black and white neighborhood 8x8 blocks.     Projected ImpactJEEHEHRECONSTRUCT:    This bug can cause a very noticeable visual impact. However, because H.263-P3 content is not common, so the general impact is small.    There is no impact on the encoder, the effect is on H.263-P3 decoder only. Annex I is not implemented/supported by the H.263-P3 encoder.    '
p1225
sg17
S' NXP'
p1226
sa(dp1227
g3
S' Cortex-A8'
p1228
sg5
S' :    None. There is no way for firmware workaround fix because the tables and escape run manipulation are done in hardware logic.     WorkaroundsJEEHEHRECONSTRUCT:    There is a firmware workaround.    '
p1229
sg7
S' '
p1230
sg9
S' :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    '
p1231
sg11
g12
sg13
S' 10260    ENGcm10260    VPU    DivX V3.11 Variable-length-decoding (VLC) bug    '
p1232
sg15
S" :    This logic bug is for the VLC implementation for DivX Version 3.11. Almost escape and run tables had wrong values, and escape run manipulation had been implemented incorrectly.    Regarding to the level tables, there's no problem in normal stream except the table intra_mb_last_10. Some parts of syntax could be regarded as an error with the table intra_mb_last_10, in a normal, error free, stream.    Regarding to the run tables, some run values are coded wrong. So, the counts of run length is different as maximum one in these cases.    The wrong run-escape manipulation can make difference either as minus one to the counts of run length against luminance values.    In general, there are two kinds of bug. One is wrong error detection due to one omitted column of a table array. The other is difference of run length due to wrong run-escape manipulation and wrong table values. The differences of the counts could be maximum one.     DescriptionJEEHEHRECONSTRUCT:    Some MPEG1 bit streams are decoded unsuccessfully.    This hardware bug occurs in the process of updating the integer motion vector when the motion vector is negative. The VPU always assumes \xe2\x80\x9c0\xe2\x80\x9d in MSB even for a negative motion vector, thus mistakenly producing a positive motion vector.     Projected ImpactJEEHEHRECONSTRUCT:    This bug should cause a noticeable visual quality degradation (theoretically) for some of the video sequences. But visual quality impact is not significant, and the clip we used to find this bug does not have any visual quality degradation.    This bug occurs only in DivX V3.11, and DivX V4, V5, V6 do not have this bug. Since DivX V5    and V6 content is more popular than that of V3.11, so the overall impact should not be significant.     Projected ImpactJEEHEHRECONSTRUCT:    Some MPEG1 bit streams can be decoded unsuccessfully.    A wrong motion vector is produced for a negative integer motion vector. Because negative integer motion vectors in MPEG1 are very common, visual quality degradation is significant due to the wrong motion vectors for motion compensation.    The usage of MPEG1 is rare in new products, so the overall impact is small.    "
p1233
sg17
S' NXP'
p1234
sa(dp1235
g3
S' Cortex-A8'
p1236
sg5
S' :    None. There is no firmware workaround fix for this erratum.    '
p1237
sg7
S' '
p1238
sg9
S' :    No fix scheduled    '
p1239
sg11
g12
sg13
S' 10390    ENGcm10390    VPU: JPEG decoder does not support different AC/DC Huffman tables for Cb and Cr    '
p1240
sg15
S' :    There is a limitation when selecting different Huffman tables for AC/DC coefficients for the two chrominance components, Cb and Cr. The JPEG decoder design cannot handle two different Huffman tables for Cb and Cr. Cb and Cr are assumed to use the same Huffman table, which is true in most cases.     DescriptionJEEHEHRECONSTRUCT:    The PLL loses frequency lock, drifting either higher or lower than the locked frequency, for a period of ~2 \xce\xbcs, before re-locking itself with no user intervention. The root cause is a meta stable analog signal, which may cause the VCO to adjust the frequency of the output clock significantly out of range. The meta stable signal returns to normal operation after one VCO/4 clock cycle, and the PLL then acts as designed to return the PLL output to the programmed frequency (within ~2    \xce\xbcs).    This erratum applies to i.MX512D, i.MX513D and i.MX515D devices.     Projected ImpactJEEHEHRECONSTRUCT:    The bug occurs when the two chroma components, Cb and Cr, use different Huffman tables for AC/DC coefficients. Therefore, if Cb and Cr use the same Huffman table, this problem does not occur. Normally, JPEG streams use the same Huffman tables for Cb and Cr. It should be rare for JPEG streams to use different Huffman tables for the two chroma components.    There is a large visual quality degradation. However, in reality, the probability of using two different Huffman tables for Cb and Cr is low. As a result, the overall impact for JPEG decoding should not be significant.     Projected ImpactJEEHEHRECONSTRUCT:    Drifting faster than the lock frequency can result in DDR and internal logic failures. Drifting slower than the lock frequency can result in DDR failures. Depending on system activity and magnitude of frequency drift, corrupt memory transactions may occur, possibly causing system failure.    Work Arounds:    The issue can be mitigated by using a Multiplication Factor Numerator (MFN) software work around which puts the PLL into an operating mode to avoid unintended VCO adjustments in response to any potential meta stable event. The PLL should also be configured into Phase Lock Mode (PLM = 1). The MFN implementation is accomplished by locking the PLL at a higher than targeted frequency (864 MHz), and then changing the MFN to reach the target frequency (800    MHz). This is a specified dither mode PLL function. By running the PLL slower than the locked frequency, even if a meta stable event occurs, erroneous deviations to the VCO are avoided. The workaround applies to devices with a target CPU frequency of 800 MHz operation.    There are two parts to the work around, and they need to be applied whenever the PLL is shutdown and re-started. The implementation below assumes PLL1 is being used as the source for the CPU    and DDR clock.    \xe2\x80\xa2 Part 1: Work around applied during system initialization (boot code)    \xe2\x80\x93 Disable auto-restart of PLL1 by clearing AREN bit in DP_CONFIG    \xe2\x80\x93 Configure PLL1 multiplication factors for 864 MHz using the following factors: MFI =    8; MFN = 180; MFD = 179; PDF = 0    \xe2\x80\x93 Change DDR clock to be sourced from PLL2    \xe2\x80\x93 Change ARM clock to be sourced from PLL2    \xe2\x80\x93 Manually restart PLL1 (RST = 1) with phase and frequency lock (PLM = 1) using DP_CTL    \xe2\x80\x93 Wait for PLL1 to lock by polling lock ready flag (LRF) in DP_CTL    \xe2\x80\x93 PLL1 will now be locked at 864 MHz    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    155'
p1241
sg17
S' NXP'
p1242
sa(dp1243
g3
S' Cortex-A8'
p1244
sg5
g12
sg7
S' '
p1245
sg9
S' :    No fix scheduled.    BSP Status:    Workaround is implemented via standalone software patch to u-boot and kernel, available on www.freescale.com/imx51tools. Software workaround implemented in BSP releases dated 7/15/2011 or later; refer to the accompanying BSP release notes for details.    Chip Errata for the i.MX51, Rev. 5    156    Freescale Semiconductor12364    ENGcm12364    eSDHC AutoCMD12 and R1b polling problem    '
p1246
sg11
g12
sg13
S' 12051    \xe2\x80\x93 Update MFN to transition to 800 MHz by applying the following factor: MFN = 60    \xe2\x80\x93 Request PLL to load new MFN using DP_CONFIG (LDREQ bit)    \xe2\x80\x93 Wait for acknowledge of new MFN factor from PLL by polling DP_CONFIG (LDREQ    bit)    \xe2\x80\x93 PLL1 will now be locked at 800 MHz    \xe2\x80\x93 Delay 4 \xce\xbcs to avoid PLL instability window    \xe2\x80\x93 Move ARM clock to be sourced from PLL1    \xe2\x80\x93 Move DDR clock to be sourced from PLL1    \xe2\x80\xa2 Part 2: Work around applied to suspend/resume code (kernel)    \xe2\x80\x93 Change DDR clock to be sourced from PLL2    \xe2\x80\x93 Change ARM clock to be sourced from PLL2    \xe2\x80\x93 Update MFN to transition to PLL1 to 864 MHz by applying the following factor: MFN    = 180    \xe2\x80\x93 Request PLL to load new MFN using DP_CONFIG (LDREQ bit)    \xe2\x80\x93 No need to wait for new PLL rate. PLL will be disabled during suspend    \xe2\x80\x93 Enter suspend    \xe2\x80\x93 Interrupt wakes system    \xe2\x80\x93 System will resume with PLL1 locked at 864 MHz. DDR and ARM are sourced from PLL2    \xe2\x80\x93 Update MFN to transition to 800 MHz by applying the following factor: MFN = 60    \xe2\x80\x93 Request PLL to load new MFN using DP_CONFIG (LDREQ bit)    \xe2\x80\x93 Wait for the acknowledgement of new MFN factor from PLL by polling DP_CONFIG    (LDREQ bit)    \xe2\x80\x93 PLL1 will now be locked at 800 MHz    \xe2\x80\x93 Delay 4 \xce\xbcs to avoid PLL instability window    \xe2\x80\x93 Move ARM clock to be sourced from PLL1    \xe2\x80\x93 Move DDR clock to be sourced from PLL1    \xe2\x80\x93 Continue resuming system    '
p1247
sg15
S' :    Occurs when a pending command which issues busy is completed. For a command with R1b response, the proper software sequence is to poll the DLA for R1b commands to determine busy state completion. The DLA polling is not working properly for the ESDHC module. This is relevant for all eSDHC ports (eSDHC1-4 ports).     Projected ImpactJEEHEHRECONSTRUCT:    DLA bit in PRSSTAT register cannot be polled to wait for busy state completion.    Software Work Around:    Updated block guide to reflect that DLA is not applicable to detect busy state, instead, should poll bit 24 in PRSSTAT register (DLSL[0] bit) to check that wait busy state is over.    Silicon Fix:    No plan to fix.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    157'
p1248
sg17
S' NXP'
p1249
sa(dp1250
g3
S' Cortex-A8'
p1251
sg5
g12
sg7
S' '
p1252
sg9
g12
sg11
g12
sg13
S' 12362    ENGcm12362    NFC wrong indication of ECC uncorrectable error occurrence after reading the spare area    '
p1253
sg15
S' :    In the event that an uncorrectable ECC error occurs while reading Main/Main+Spare from the Nand device, then all spare read operations would fail until the next successful Main/Main+Spare read operation.     DescriptionJEEHEHRECONSTRUCT:    The DDR2 JEDEC standard requires the DDR clock (SDCLK) to start toggling at least 200 \xce\xbcS    before clock enable (SDCKE) signal rise. In the ESDCTLv2 implementation, it was planned to count 7 CKIL clock periods, calculating to 30.05 \xce\xbcS*7 or 210.35 \xce\xbcS, which is greater than 200 \xce\xbcS    and within the JEDEC requirement. However, in practice, SDCKE wait period can be as short as 6    CKIL periods, thus violating the above JEDEC requirement.    Impact:    So far, no issue has been seen.    Software Workaround:    No software workaround.    Silicon Fix:    No hardware fix is scheduled. This is a silicon design deviation from the JEDEC standard.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    159 Projected ImpactJEEHEHRECONSTRUCT:    The NFC wrongly indicates ECC error.    Software Work Around:    Read main or main+spare after first uncorrectable error.    Silicon Fix:    No hardware fix scheduled. This issue will be addressed in the software drivers in the next driver release.    Chip Errata for the i.MX51, Rev. 5    158    Freescale Semiconductor12376    ENGcm12376    eSDCTL: ESDCTLv2 fails to wait the minimal 200uS between    DDR clk & clk enable    '
p1254
sg17
S' NXP'
p1255
sa(dp1256
g3
S' Cortex-A8'
p1257
sg5
g12
sg7
S' '
p1258
sg9
g12
sg11
g12
sg13
S' 12378    ENGcm12378    EIM: AUS mode is non functional for devices larger than 32MB    '
p1259
sg15
S' :    When the AUS bit is set, the address lines of the EIM are un-shifted. By default, AUS bit is cleared and address lines are shifted according to port size (8, 16 or 32 bits). Due to an error, the address bits 27:24 are shifted when AUS=1. For example, CPU address: 0xBD00_0000 ([A27:20]=1101    0000 becomes: 0xB600_0000 ([A27:20]=0110 0000) on the EIM bus. Since A[27:25] is shifted to    [A26:24] and A[23:0] is not shifted. As a result A[24] is missed.    Impact:    If the memory used does not exceed 32 MB, there is no impact. This mode is related to a unique memory configuration that is not often used. Most systems can work in the default mode (AUS=0).    Board designers should connect the EIM address bus without a shift (for example, A0\xe2\x86\x92A0, and A1\xe2\x86\x92A1), while working in AUS=0 mode.    Software Workaround:    \xe2\x80\xa2 Use the AUS = 0 mode (default) while connecting the address signals without a shift (for example, A0\xe2\x86\x92A0 and A1\xe2\x86\x92A1).    \xe2\x80\xa2 For AUS=1, for devices larger than 32 MB, need to build a memory map that takes this shifting into consideration and does not include A[24] line.    Silicon Fix:    No hardware fix is scheduled.    '
p1260
sg17
S' NXP'
p1261
saa.