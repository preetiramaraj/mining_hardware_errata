Revisions Impacted	Manufacturer	Chip	Details	Workaround	Failure	Fix Status	Core
	 NXP	 	 :    Unaligned access to AIPS can be driven high by SAHARA, DAP, and FEC. If they access the AIPS    internal registers during an unaligned access, an ABORT occurs.     Projected ImpactJEEHEHRECONSTRUCT:    Unaligned accesses to the AIPS internal registers fail.    	 :    Make only aligned accesses to the AIPS internal registers.    	 11136      AIPS: Unaligned access causes abort on writes to the internal registers    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a sequence of load and store operations are performed to different address locations in a memory region that is marked as shared device, then a load can incorrectly bypass a store.    The issue is reported by ARM, erratum ID 709718, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the load address and store address are mapped to access the memory region of the same device, and the device relies on memory operations to occur in program order, then this device may not operate as intended.    	 :    The erratum occurs only for the shared device memory regions and not for the non-shared device memory regions. Therefore, this problem can be worked around by using the remap registers to remap all the shared device transactions to the non-shared device. The only difference between the shared device and the non-shared device is the attributes produced for the transaction on the AXI interface. Therefore, the user does not experience any impact in terms of performance from this workaround.    Another possible use of the TEX remap is to map the shared device regions to the strongly ordered transactions. This second remapping option is less desirable as it affects the performance, as strongly ordered transactions are not buffered.    The following code sequence is required to setup and enable the TEX remap. This should be done before enabling the MMU.    ; Setup PRRR so device is always mapped to non-shared    MRC p15, 0, r0, c10, c2, 0; Read Primary Region Remap Register BIC r0,#3<<16    MCR p15, 0, r0, c10, c2, 0; Write Primary Region Remap Register    ; Enable TEX remap    MRC p15, 0, r0, c1, c0, 0; Read Control Register    ORR r0,r0,#1<<28    MCR p15, 0, r0, c1, c0, 0; Write Control Register    Another valid workaround is to place a data memory barrier (DMB) between all the memory accesses to the device regions, where ordering is required between a store and a subsequent load to a different physical address.    	 09831      ARM: Load and Store operations on the shared device memory regions may not complete in program order    	 :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    9	 Cortex-A8
	 NXP	 	 :    Under certain conditions, a sequence of instructions where an MCR instruction that writes a CP15    register is closely followed by an MRC that reads the same register, are executed such that the RAW hazard is not detected and the MRC reads the old value of the register. This scenario can only occur for accesses to one of the following four CP15 registers:    â¢ CacheSizeSelection Register    â¢ Thread and ProcessID user read/write    â¢ Thread and ProcessID user read only    â¢ Thread and ProcessID privilege only    These registers are both readable and writable and have been optimized to execute in a single cycle.    Furthermore, this scenario occurs only when a specific sequence of instructions is executed between the MCR and the MRC. The sequence must meet two criteria:    â¢ It must take less than three cycles to execute    â¢ It must have one of the instructions in the following list:    â ARM PLD with [Rn, -Rm, <shift>] addressing mode    â ARM or Thumb PLD with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    â Thumb or ThumbEE load/store instruction with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    â Thumb TBB instruction    The issue is reported by ARM, erratum ID 588115, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, the old stale value of the register is read rather than the newly written value, in which case the system software may appear to behave incorrectly. However, the usage model for such a software sequence is unclear, and hence the likelihood of encountering it in practice is very low, especially considering the requirement of the second unrelated instruction that must also fall between the MCR and the MRC.    	 :    If a workaround for this erratum is desired, there are two options. The first simple option is to add a NOP immediately following the MCR register write in any case where encountering this erratum may be a concern. By adding a single NOP, the minimum required cycle window is guaranteed and the erratum does not occur.    The second option is to set bit 16 in the CP15 Auxiliary Control Register. This causes a pipeline flush on every write to the CP15 register and ensures that the RAW hazard condition does not 1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    11	 11132      ARM: A RAW hazard on certain CP15 registers can result in a stale register read    		 Cortex-A8
	 NXP	 	 :      All memory transactions performed as part of a tablewalk should be considered Privileged, even in the User mode. However, Cortex-A8 incorrectly marks memory transactions generated from tablewalks performed in User mode as the user transactions on the AXI bus. This indication is given by the ARPROT[0] signal, which is set to zero during the transaction.    The conditions are as follows:    â¢ Cortex-A8 must be in user mode    â¢ A memory transaction (instruction or data) misses in the TLB and causes a tablewalk    â¢ The address for the page table entry is not found in the L2 cache, resulting in an external memory request    â¢ This erratum occurs when APROT[0] incorrectly indicates a user transaction for this memory    request on the AXI bus.    The issue is reported by ARM, erratum ID 488063.     Projected ImpactJEEHEHRECONSTRUCT:    As the values broadcast on ARPROT[0] are completely transparent to the software, the implications for this erratum are only on a specific subset of the processor systems, specifically for a system that includes some form of system level memory protection unit, that uses the ARPROT    bits to determine if a memory request can be allowed. For any system that does include such a unit, that unit may report false errors on page table accesses due to this erratum.    	 :    As the processor directly does not make use of ARPROT[0], any workaround would be specific to the device that makes use of the values broadcast on ARPROT[0]. The most likely usage would be some form of system memory protection unit. If such protection unit exists, it may need to filter out any access to the page tables from the address space that is protected to operate properly. This implies that the external protection unit cannot provide additional protection for the page tables.    For example, the page table cannot be inserted in a Secure RAM which cannot be accessed in User mode, as in this case, an additional protection is added beside the MMU. Alternatively, the CSU    can be configured to transform User access to Privileged on addresses used by PAGE TABLE.    	 11141      ARM: ARPROT[0] is incorrectly set to indicate a USER    transaction for memory accesses generated from user12SPACEJEEHEHtablewalks      	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    ARMv7 architecture specifies that the CSSELR should be banked between Secure and Non-secure states. Cortex-A8 does not currently bank this register.    The conditions are as follows:    â¢ The system should have an active process in secure state and an active process in non-secure state at the same time.    â¢ The system should perform cache maintenance operations in both secure and non-secure processes.    The issue is reported by ARM, erratum ID 485963, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    A cache cleaning sequence that reads the CSSELR may not work as expected. The published sequence for cleaning the entire cache (see ARM Architecture Reference Manual) includes setting the CSSELR followed by a read from the selected Cache Size ID register (CCSIDR). If the non-secure side executes this sequence, and is encountered by a secure interrupt between the setting of the CSSELR and the reading of the selected CCSIDR, then there is a possibility that the secure side may also use the CSSELR. On returning to the non-secure side, the CSSELR value may have changed, which makes the cache cleaning sequence to malfunction. Similarly, a non-secure interrupt can cause a secure cache cleaning sequence to malfunction.    	 :    When transitioning security state, the secure monitor software should save the current CSSELR    value (corresponding to the security state the processor is transitioning out of) and restore the previously saved CSSELR value (corresponding to the security state the processor is transitioning into).    	 11135      ARM: C15 Cache Selection Register (CSSELR) is not banked 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When a Clean to Point of Coherency (PoC) by MVA operation is performed, or the Preload Engine is programmed to clean a region of memory from the L2 cache, a cache line from that region can be corrupted with a stale copy of memory, and a memory store operation is lost.    The conditions are as follows:    â¢ A Cache Clean by MVA to the PoC instruction is executed to clean cache line A, or the preload engine is configured to clean a memory region which includes cache line A. Either of the operations result in the placement of cache line A into a victim buffer for writeback to external memory. It also keeps the line still valid in the L2 cache.    â¢ A memory store operation is performed to the same cache line A that is evicted by the cache    clean operation. This operation results in a modification of cache line A in the L2 cache (but not    to the copy of the line that may still remain in the victim buffer if memory response is slow).    â¢ A cache eviction is done of cache line A due to an unrelated memory request to load cache line B. The modified copy of cache line A is placed in a victim buffer. At this point, the two victim buffers may contain two different versions of cache line A. As each victim buffer uses a different AXI ID and arbitrates independently for the AXI bus, there is no guarantee for the order in which the memory updates occur, and the store operation may be overwritten by the cache clean operation, leaving the external memory with stale contents.    The issue is reported by ARM, erratum ID 586323, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, one or more store operations are lost, resulting in incorrect program behavior. This can occur for any application which either uses the preload engine to clean a memory region, or uses Clean by MVA to PoC maintenance operations to clean a region of memory.    	 :    There are two feasible workarounds that can be used for this erratum. The first workaround is to place a DMB or DSB barrier at the end of each cache clean routine or preload engine memory clean sequence. This barrier operation ensures that the cleaned line goes out and is seen by main memory before the store is executed and therefore guarantees that the clean is done correctly and memory contains the correct final value.    This workaround is consistent with the ARM recommended practice for ending the maintenance routine. The above workaround is convenient to implement and should work for all expected usage models. However, there is still the possibility that an interrupt can be taken during the clean routine, and the interrupt handler can perform a store operation to the line just cleaned, allowing for the scenario which can lead to the erratum.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    16    Freescale Semiconductor11143      Another workaround that avoids even the case mentioned above, is to convert all Clean by MVA to PoC operations to Clean and Invalidate by MVA to PoC as described in the code sequence as follows:    â¢ Replace all uses of: MCR p15, 0, <Rn>, c7, c10, 1;    â¢ Clean Data cache line by MVA to PoC with this instruction: MCR p15, 0, <Rn>, c7, c14, 1;    â¢ Clean and Invalidate cache line by MVA to PoC.    There is no Preload Engine equivalent for the second workaround option as it is not possible to configure the preload engine to perform a clean and invalidate operation. Therefore, if there are concerns that the DSB based workaround is insufficient, then it is advisable to not use the Preload Engine for cleaning memory regions. The preload engine can be configured such that it is not accessible at user/privilege and nonsecure/secure level of granularity.    For more information on Preload Engine configurability, see Cortex-A8 Technical Reference Manual.    	 11143      ARM: Cache clean memory ops generated by the Preload Engine or Clean by MVA to PoC instructions may corrupt the memory 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a non-cacheable memory request is subsequently followed by any cache maintenance operation done by MVA, then the memory can be corrupted.    The conditions are as follows:    â¢ The L1 data cache must be of size 32 Kbyte    â¢ The L1 data cache hardware alias checks are enabled (the L1ALIAS bit in the Auxiliary Control Register is set to 0)    â¢ The virtual memory management used by the operating system does not follow the page coloring guidelines and allows virtual to physical address alias cases to exist on bit 12 of the address    â¢ A non-cacheable memory request to normal, device, or strongly ordered memory is subsequently followed by a cache maintenance operation done by MVA without any cacheable memory operations executed in between. The non-cacheable memory request can be fully executed, or can be a speculative instruction in the branch shadow that subsequently is flushed.    When the above conditions are met and the cache maintenance operation is performed to generate a hash alias scenario on its cache lookup, memory corruption or a false parity error can occur.    The issue is reported by ARM, erratum ID 586324, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, then memory can be corrupted or a false parity error can be generated. In addition, even if the workaround as described below is implemented, it is possible that a nonsecure maintenance operation could result in the invalidation of a secure memory location. Therefore, this could possibly be viewed as an avenue for a security attack.    However, the contents of secure memory cannot be viewed as a direct result of this erratum and the lack of consistent repeatability makes it very difficult for the user to make use of this erratum as a security attack.    	 :    If full PIPT caching support is not required by the operating system, or the processor includes a 16 Kbyte L1 data cache, then no workaround is required. If alias conditions can occur, then the workaround is to guarantee that a cache maintenance operation is not immediately preceded by a non-cacheable memory request. This is guaranteed by initiating every cache maintenance by MVA routine with a cacheable load or store request immediately preceding the main loop and ending with a DSB barrier operation at the end of the loop. The load or store that precedes the loop can be done to any cacheable memory location. In addition, both interrupts and aborts should be masked during the cache maintenance routine. Interrupt masking is required to prevent a non-cacheable memory request, either fully executed or in a branch shadow, from initiating the sequence that can 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    18    Freescale Semiconductor11145      result in this erratum. If there are concerns about the interrupt latency, the maintenance loop can be amended to enable and disable the interrupts directly around the maintenance operation. This impacts the time taken to complete the maintenance loop.    To workaround any concerns of a potential security attack due to this erratum, all secure memory should be marked as inner write through. This can be done either by using the caching attributes in the page tables for all secure page tables or by making use of the secure banked version of the remap registers. Apart from making all secure memory write through, a routine should be run out of reset to completely fill the cache with dummy data, to prevent invalid, uninitialized data in the cache from being written out to memory and potentially corrupting secure memory. Making all secure memory inner write through guarantees that even if the invalidation of a secure line in the L1 cache occurs due to this erratum, the correct data is not lost.    	 11145      ARM: Under a specific set of conditions, a cache maintenance operation performed by MVA can result in memory corruption 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When a Clean to Point of Coherency or Clean and Invalidate to Point of Coherency by MVA operation is performed, it is possible that the line remains present in the L2 cache and any dirty data is not pushed out on to the AXI bus to main memory. This can occur whenever the requested address is present in the L1 cache but not the L2 cache.    The conditions are as follows:    â¢ The memory region being cleaned is configured in write allocate mode    â¢ The cache line being cleaned is initially present in the L1 cache and not in the L2 cache The issue is reported by ARM, erratum ID 586320, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If a Clean or Clean and Invalidate operation does not operate as intended, and leaves the data present in the L2 cache, the memory coherency in the system can no longer be guaranteed.    Therefore, this erratum impacts any code sequence used to maintain the system coherence.    	 :    The software workaround for this erratum is to disable the write allocate in the L2 cache, as shown in the following instruction sequence:    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg Disabling the write allocate in the L2 cache can impact the performance of some applications. If this performance impact is deemed to be very high, there are two other software workarounds that can be used. The first is to disable write allocate around each sequence of clean by MVA to PoC    or clean/invalidate by MVA to PoC instructions, as shown in the following instruction sequence: MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg    <perform sequence of MVA operations here>    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg BIC <Rd>, <Rd>, #(1 << 22); clear the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg The final workaround that can be implemented is to perform each maintenance operation twice with interrupts disabled. By performing the operation twice in back-to-back successions with no other memory operations executed in between, it can be assured that the line is evicted from both L1 and L2 cache and written out to main memory.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    20    Freescale Semiconductor11142      Perform the following steps:      1. Disable the interrupts and the imprecise aborts    2. Execute the maintenance operation first pass    3. Execute the same maintenance operation, second pass    4. Enable the interrupts and the imprecise aborts    Repeat the above sequence for each cache maintenance operation. Interrupts can remain disabled for a longer sequence of maintenance operations, but this has a negative effect on interrupt latency.    This workaround has a performance impact on the execution time of cache maintenance operations.    	 11142      ARM: Clean and Clean/Invalidate maintenance ops by MVA to PoC may not push data to external memory    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :      Under specific set of conditions, the stale data saved in the L2 cache can be erroneously returned to the processor on a subsequent load instruction.    The conditions are as follows:    â¢ The L2 cache must be configured as an inner cache rather than as an outer cache    â¢ The L2 cache must be configured to use write allocate memory type The issue is reported by ARM, erratum ID 468413, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum occurs, stale data can be read by a subsequent load instruction, resulting in an incorrect program behavior.    	 :    There are two viable workarounds for this erratum. One workaround is, not to configure the L2    cache as an inner cache, but maintain the default setting as an outer cache. The second workaround is to use the remap registers to remap the inner cache attributes from write allocate to write back instead.    	 11146      ARM: Incorrect L2 cache eviction can occur when L2 is12SPACEJEEHEHconfigured as an inner cache      	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Three memory requests in the L2 cache can interact and result in a deadlock condition. The exact scenario involves a dependency chain of three requests, an instruction fetch request, a memory preload instruction (PLD) and a swap instruction (SWP). In this dependency loop, no request can progress as each one of them is dependent on the next request. That is, the PLD request cannot complete as the IF request is pending to use the BIU. The IF request cannot complete because of the pending SWP request, and the SWP request is not allowed to complete as it is waiting on the PLD to complete before obtaining the lock on the bus.    The conditions are as follows:    â¢ PLD instructions must be used by the processor    â¢ SWP instructions must be used by the processor    The issue is reported by ARM, erratum ID 468415, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    This erratum only impacts the users of swap instructions. Swap instructions have been deprecated from the ARMv7 version of the ARM Architecture as its functional use in terms of setting up semaphores is now replaced from the ARMv6 architecture forwards by the LDREX and STREX    instructions. If this erratum is encountered and the processor deadlock occurs, it can only be interrupted by resetting the processor.    	 :    One software workaround for this erratum is, not to use the swap instructions. If swap instructions are to be used in the code base, the other software workaround is to disable the PLD instructions and make them a NOP. The code required to implement this workaround is as follows: MRC p15, 0, r0, c1, c0, 1; read register    ORR r0, r0, #(1<<9); PLDNOP - force PLD to be NOP    MCR p15, 0, r0, c1, c0, 1; write register    This workaround has some performance impact on the peak memory copy bandwidth.    	 11144      ARM: Swap instruction, preload instruction, and instruction fetch request can interact and cause deadlock    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :      Under very specific set of conditions, data from a Neon load request can be incorrectly forwarded to a subsequent, unrelated memory request.    The conditions are as follows:    â¢ Neon loads and stores must be in use    â¢ Neon L1 caching must be disabled    â¢ Trustzone must be configured and in use    â¢ The secure memory address space and the non-secure memory address space both use the same physical addresses, either as an alias or the same memory location or for separate memory locations    The issue is reported by ARM, erratum ID 468414, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, it is possible for a load request to receive the wrong data value which can likely result in incorrect operation of the program.    	 :    There are many software solutions for this erratum and only one has to be applied. The recommended solution, if possible, is to map cacheable areas of memory so that both secure and non-secure do not share the same physical address space.    Another possible solution is to force NEON to cache in the L1 data cache. This can be programmed using the Auxiliary Control Register bit [5], L1NEON, as follows: MRC p15, 0, r0, c1, c0,    1; read register    ORR r0, r0, #(1<<5)    ; L1NEON caching enable    MCR p15, 0, r0, c1, c0, 1    ; write register.    Another possible solution is to disable L2 data forwarding from the victim buffers. This can be programmed using the L2 Auxiliary Control Register bit[27], Load data forwarding disable as follows:    MRC p15, 1, r0, c9, c0, 2    ; read register    ORR r0, r0, #(1<<27)    ; L2 load data forwarding disable    MCR p15, 1, r0, c9, c0, 2    ; write register    Both workarounds can be implemented with little or no perceived performance impact in the majority of applications.    	 11133      ARM: NEON load data can be incorrectly forwarded to a12SPACEJEEHEHsubsequent request      	 :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    25	 Cortex-A8
	 NXP	 	 :    If a load request is processed which misses the L2 cache, but cannot be immediately forwarded to the BIU, it encounters a special hazard which prevents the request from being required to access the L2 cache RAM again to save power. There can be multiple requestors with unique addresses, (that is, one address per cache line) with this special hazard. All write-allocate requests that access the L2 cache RAM, on port1, do not have address comparators to check for this special hazard condition. So, if a subsequent write-allocate request is issued to the L2 cache RAM on port1 and allocates a victim buffer, then all requests pending with this special hazard must be forced to perform a L2 cache RAM lookup again to maintain memory coherency. There is a 1-cycle window in which the write-allocate request must allocate to a victim buffer and a pending request to the BIU is not prohibited from going to the BIU, such that a deadlock can occur.    The conditions are as follows:    â¢ The processor must have L2 cache present and enabled.    â¢ The L2 cache must be configured to support the write allocate memory type.    The issue is reported by ARM, erratum ID 468416, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered and processor deadlock occurs, it can only be interrupted by asserting RESET on the processor.    	 :    The workaround for this erratum is to disable write-allocate by programming the L2 Auxiliary Control Register bit[22], Write allocate disable:    MRC p15, 1, r0, c9, c0, 2; read register    ORR r0, r0, #(1&lt;&lt;22); Write allocate disable    MCR p15, 1, r0, c9, c0, 2; write register    Disabling write allocate in the L2 cache could have a performance impact for some applications.    	 11134      ARM: Under a specific set of conditions, processor deadlock can occur when L2 cache is servicing write allocate memory 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    In the register AMC of the Tiger/ARM Platform (0xBASE_0018) the bit ALPEN must be set to 1    and ALP[2:0] must be set to â000â. Other combinations are reserved and must be avoided.     Projected ImpactJEEHEHRECONSTRUCT:    Memory retention issues unless the guideline is followed.    	 :    None    	 11212      ARM: Clarification regarding the ALP bits in AMC register 	 :    No fix is scheduled. A clarification will be added to the reference manual.    	 Cortex-A8
	 NXP	 	 :    If the PMU is in use and an overflow event occurs simultaneously with a write to one of the subsets of CP15 and CP14 registers, the overflow event can be lost.    The conditions are as follows:    1. The performance counters must be in use    2. The performance counter must have an overflow (counter value goes beyond 0xFFFF_FFFF) 3. Simultaneous with the counter overflow, a MCR instruction must be executed that writes to one of the following CP14/CP15 registers:    â Any PMU register other than PMU counter registers    â ThumbEE Configuration Register    â ThumbEE Handler Base Register    â System Control Register    â Auxiliary Control Register    â Secure Configuration Register    â Secure Debug Enable Register    â Nonsecure Access Control Register    â Context ID and Thread ID Registers    â Coprocessor Access Register    â Cache Size Select Register    The issue is reported by ARM, erratum ID 628216, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, the overflow status flag is not set for that counter in the Overflow Flag Status Register, and an interrupt request is not generated, even when the Interrupt Enable Set Register is configured to generate an interrupt on counter overflow.    	 :    The main workaround is to poll the performance counter. The maximum increment in a single cycle for a given event is 2. Therefore, polling can be infrequent as no counter can increment by more than 232 in fewer than 2 billion cycles.    If the main usage model for performance counters is collecting values over a long period, then polling can be used to collect values (and reset the counter) rather than waiting for an overflow to occur. Polling can be done infrequently and overflow can be avoided.    If the main usage model for performance counters relies on presetting the counter to some value and waits for an overflow to occur, then polling can be used to detect when an overflow event is 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    30    Freescale Semiconductor10696      missed. An overflow can be determined to have been missed if the unsigned value in the counter is less than the value preset into the counter. Polling can be done infrequently because of the number of cycles it requires for this check to fail. If the erratum is triggered and an overflow event is missed, the counter sample can be thrown away or the true value can be reconstructed.    	 10696      ARM: If a Perf Counter OVFL occurs simultaneously with an update to a CP14 or CP15 register, the OVFL status can be lost 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a Neon store is done to Device type memory and is followed in instruction sequence by a load instruction to Device type memory, it is possible that an unrelated store instruction that is done to cacheable memory and hit the L1 cache has its data dropped and therefore not update memory.    There are three different memory types defined in the ARM architecture namely, Strongly Ordered, Device, or Normal. Device type memory is one of the three different memory types. This region is specified by the page table entries used by the MMU.    The conditions for this erratum are that relatively close in the instruction stream, the following must occur:    â¢ A Neon store is done to Device type memory.    â¢ A load is executed to Device type memory (any load to Device type memory region, not just from Neon), consecutive to the Neon store.    â¢ Several stores hit the L1 cache. (Any store that hit the L1 cache - Neon or integer core. The address does not matter.)    The issue is reported by ARM, erratum ID 507113, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, one or more cacheable stores that hit the L1 cache do not update the cache, leaving stale contents in memory. This is likely to cause observable, incorrect behavior in the application.    The Neon access to memory region marked as Device is not a practical case in general.    	 :    The only workaround for this erratum is to avoid accessing the Device type memory with Neon store instructions. (There should be no practical case for this, anyway). However, if needed, define the region as Strongly Ordered memory, instead.    	 10729      ARM: A Neon store to device memory can result in dropping a previous store    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    All BTB invalidate operations, including BTB Invalidate by MVA operations, by default are implemented as a NOP in the Cortex-A8 processor. These operations can be executed as NOPs as flushing BTB entries are not required by the Cortex-A8 processor for correct functionality, and there is no additional performance penalty for an incorrect branch prediction versus a non-prediction. However, it is possible for BTB operations to be enabled by setting the IBE bit in the CP15 Auxiliary Control Register. When enabled in this fashion, BTB invalidate by MVA operations may not work as intended. Instead of writing zeros to the valid bit of the BTB entry matching the MVA provided, the CP15 âInvalidate Branch Predictor by MVAâ operation writes the value currently in the âInstruction L1 System Array Debug Register 0.â This register is not initialized at the reset time and can only be written in secure, privileged modes when CP15SDISABLE is not set.    The conditions are as follows:    1. The branch predictor is enabled (SCTLR.Z = 1)    2. The Auxiliary Control Register IBE bit is set to 1    3. An invalidate Branch predictor by MVA operation is executed 4. The Instruction L1 System Array Debug Register 0 contains a non-zero value which sets the valid bit and clears the page cross bit.    The issue is reported by ARM, erratum ID 687067, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the non-zero value contained in L1 System Array Debug Register 0 sets the valid bit of the BTB    entry, then the entry is not invalidated as intended.    	 :    A workaround for this erratum is, not to enable the IBE bit. ARM recommends that the IBE bit should not be enabled unless it is required for an erratum workaround.    If the IBE is to be enabled, then the L1 System Array Debug Register 0 should be initialized to a zero value. This register is for RAM array debug purposes and is not used as a part of normal functionality. It is only accessible in a privileged secure mode. Therefore, it can be statically initialized as a part of the boot code sequence. If the register is used for debug purposes, the value should be reset to zero when the debug sequence completes.    The code to initialize the L1 System Array Debug Register 0 is as follows: MOV r1, #0    MCR p15, 0, r1, c15, c1, 0 ; write instruction data 0 register MRC p15, 0, R1, c1, c0, 1 ; read Aux Ctl Register    ORR R1, R1 #(1 << 6) ; set IBE to 1    MCR p15, 0, R1, c1, c0, 1 ; write Aux Ctl Register    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX53, Rev. 6    34    Freescale Semiconductor10707      	 10707      ARM: BTB invalidate by MVA operations do not work as    intended when the IBE bit is enabled    	 :      No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a debug watchpoint and a precise data abort are both triggered from the same data access, the ARM Architecture specifies that the data abort should be prioritized. However, this does not occur on the Cortex-A8 and the watchpoint is taken instead.    The conditions for the erratum are as follows:    1. At least one debug watchpoint is programmed    2. A precise data abort occurs on the same address as the watchpoint The issue is reported by ARM, erratum ID 693270, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The implications of this erratum only affects the debug software. The data abort should take precedence over the watchpoint so that the OS has a chance to fix up paged-out memory before re-executing the instruction and presenting the debugger with the watchpointed address. Due to this erratum, this fix up does not occur and the debugger should be capable of handling a faulting address.    	 :    The workaround for this erratum is to ensure that the debugger software handles the faulting address. When the debugger is signalled a watchpoint, and identifies that the page being accessed is subjected to an MMU fault, which it would like the OS to patch up before dealing with itself, it can perform the following actions:    â¢ Disable the watchpoint    â¢ Set vector catch on the local Data Abort exception (secure or non-secure, as appropriate)    â¢ Set the PC at the watchpointed instruction and restart execution The processor restarts, re-executes the instruction and generate the MMU fault. It then fetches the instruction from the Data Abort handler and re-enter Debug state because of the Vector Catch event. The debugger can then perform the following actions:    â¢ Re-enable the watchpoint    â¢ Disable the vector catch    â¢ Set the PC at the Data Abort vector and restart execution The processor restarts and re-executes the Data Abort vector instruction. The OS then patches up the MMU fault and attempts to re-execute the original instruction. Re-executing the instruction regenerates the Watchpoint debug event, but now the page is properly patched up.    	 10730      ARM: Taking a watchpoint is incorrectly prioritized over a precise data abort if both occur simultaneously on the same address    	 :    No fix scheduled    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX53, Rev. 6    36    Freescale Semiconductor10730      	 Cortex-A8
	 NXP	 	 :    If the integer to floating point conversion operation, VCVT.f32.u32, is executed with the FPSCR    register configured for Default NaN and Flush-to-zero enabled, and the rounding mode used is RP    (Round-to-Positive infinity), it returns the incorrect result for the source operation 0xFFFF_FF01.    Specifically, it returns the result 0x0000_0000 instead of the correct result 0x4F80_0000. The erratum can occur only for this specific input value and this specific configuration of the FPSCR    register.    The conditions are as follows:    1. Default NaN is enabled (FPSCR[25] = 1âb1)    2. Flush-to-zero is enabled (FPSR[24] = 1âb1)    3. RP rounding mode is enabled (FPSR[23:22] = 2âb01)    4. A VCVT.f32.u32 instruction is executed with the source operand 0xFFFF_FF01    5. The result of the instruction is incorrect 0x0000_0000 rather than 0x4F80_0000    The issue is reported by ARM, erratum ID 715847, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The incorrect result from the conversion operation can result in further incorrect results calculated and unexpected program behavior.    	 :    The erratum only occurs if the floating point unit is configured in run fast mode with RP rounding.    The easiest workaround is to avoid using this particular mode combination. Round-to-Nearest (RN) is a common rounding mode used, but if RP functionality is desired, it should be done without using Default NaN and/or without Flush-to-zero enabled. Default NaN signalling, Flush-to-zero, and rounding mode are all configured using bits [25:22] of the FPSCR register. This register is typically configured by the system software and should not change within an application.    	 10731      ARM: VCVT.f32.u32 can return wrong result for the input    0xFFFF_FF01 in one specific configuration of the floating point unit    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is performed in a memory region that is marked non-cacheable, device, or strongly ordered, it is possible for the processor to deadlock or have stale data left in the processor. This erratum occurs when the address hits the cache in a way that is not predicted by the Hash Virtual Address Buffer (HVAB), which is a cache way predictor inside the processor. This erratum can occur only for the cache maintenance operations that are performed by MVA. It does not occur for the set/way based cache maintenance operations.    The conditions are as follows:    1. A memory region is marked cacheable in a page table entry, and a cache line from that region is placed in the data cache    2. A second page table entry marks the same memory region as non-cacheable, device, or strongly ordered. This can occur by changing the memory attributes in the existing page table entry, or through an alternative page table entry that maps the same virtual to physical address but with non-cacheable, device, or strongly ordered attributes rather than cacheable 3. A Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is done to this address    4. The maintenance operation receives a false hit indication from the HVAB array 5. The maintenance operation receives a true hit indication from the Tag lookup, which implies that the data is present in the array, but located in a different way that is not predicted by the HVAB    6. An eviction of the dirty line has started but not finished, and the processor leaves stale data in the cache and can potentially enter a deadlock state    The issue is reported by ARM, erratum ID 728018, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If stale data is left in the cache, the processor does not work as intended. If deadlock state occurs, it can only be exited by asserting the RESET pin on the processor.    	 :    There are two possible workarounds for this erratum.    The first workaround is to avoid performing the cache maintenance operations to non-cacheable addresses previously marked cacheable and therefore may be resident in the cache. If the address is present in the cache, it implies that the memory region is marked cacheable at some earlier point of time and explicitly changed to non-cacheable before the maintenance operation is performed. If the region type is not changed to non-cacheable before executing the maintenance operation, this erratum can be avoided. The value of changing a memory region from cacheable to non-cacheable 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX53, Rev. 6    40    Freescale Semiconductor11206      before performing the maintenance operations is that this is the only way that the ARM v7    Architecture guarantees the line is not immediately placed back into the cache due to the possibility of data speculation. However, in Cortex-A8, this degree of data speculation is never done.    Therefore, changing the memory type to non-cacheable before executing the cache maintenance operation is not required to assure that the line is not immediately placed back into the cache.    However, if there is a code compatibility with other v7 implementations (that may exhibit this level of data speculation) is a concern, then this first workaround is insufficient, and the second workaround should be used.    The second workaround is to execute the loop of cache maintenance operations twice. Execute the loop once with the memory region still marked cacheable. Then change the page table entry to make the memory region non-cacheable and execute the loop for a second time. The first loop cleans the data from the cache in the Cortex-A8. On the Cortex-A8, the second loop is redundant as it misses on all lines in the cache, but resolves the data speculation issue that can occur on a different v7 architecture implementation. The existing cache maintenance code in a dynamically paged environment can be dependent on the maintenance operation triggering a page fault to set the correct page table entry. The workaround code must independently ensure that the correct page table entry is present.    	 11206      ARM: Cache maintenance operations by MVA for a    non-cacheable memory region can result in processor deadlock 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When Neon performs a single byte load from Strongly Ordered or Device type memory with an access size of more than 8 bytes, the system AXI bus issues a burst access which is longer than 8    beats of a single byte.    However, the M4IF is capable of supporting only access with a burst length of less than or equal to 8, as indicated in the i.MX53 Applications Processor Reference Manual (MCIMX53RM). When an access with burst length greater than 8 beat is detected by the M4IF, it is not forwarded to the memory controllers. Instead, a DECERR AXI bus error is indicated and data abort exception is sent back to the master.    Conditions for this issue:    1. A single byte Neon load is issued with more than 8 bytes access, for example: Vld1.8 {d0,d1,d2,d3}, [Rs]!    2. The source address is Strongly Ordered or Device memory type  Projected ImpactJEEHEHRECONSTRUCT:    The Neon access to memory region marked as Strongly Ordered or Device are not usually a practical case in general. Note that there are also other reported limitations for Neon access to    Device type memory such as ENGcm10729.    	 :    Several software solutions can be proposed for this issue:    â¢ Use 8-bit Neon load with access size of less or equal to 8 bytes. For example: Vld1.8 {d0-d1}, [Rs]!    This solution results in some performance degradation.    â¢ Use 16 or 32-bit Neon load instructions instead. For example: Vst1.32 {d0 â d3}, [Rs]!    The limitation of this proposal is that the source data address must be 16 or 32-bit aligned.    â¢ Define the memory region as Normal Non-Cacheable type instead of Strongly Ordered or Device memory type. In this case, need to avoid potential memory consistence issues and perform Data Synchronization Barrier (DSB) before other DMA engine access the region for read, as the Write Buffer is enabled.    	 11413      ARM: A Neon load from device memory type can result in data abort    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    42    Freescale Semiconductor11209	 Cortex-A8
	 NXP	 	 :    There are two muxes which select a clock source for pll1_sw_clk (which is also the source for ARM clock). One of them is a regular mux (step select mux), and the other is a synchronous mux.    The clock sources are selected by a single register (CCSR). If the pll1_sw_clk_sel bit is cleared (CCSR[2]) and the selection of the regular mux (CCSR[8:7]) is changed at the same time, then the regular mux is likely to switch first and can cause a glitch on pll1_sw_clk and hence on ARM clock and possibly other clocks as well.    Due to above, the CCSR[8:7] bits may only be modified when step_clk is no longer selected.    Therefore, CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].     Projected ImpactJEEHEHRECONSTRUCT:    None, if the proposed workaround is implemented.    	 :    The CCSR[8:7] bits can be modified only when step_clk is no longer selected. The ARM clock source selection should be done in two accesses. The CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].    	 11209      CCM: ARM clock source switch limitation    	 :    No fix is scheduled. A clarification is added to the reference manual.    	 Cortex-A8
	 NXP	 	 :    When the emi_int1 clock in the CCM_CCGR5 register is disabled, the transaction to the CCM    passes through the INT1 channel of the EMI. However, the BRESP cannot be received by the ARM    because the clocks are already turned off. This causes the system to hang.     Projected ImpactJEEHEHRECONSTRUCT:    None. User should refrain from disabling the EMI int1 clock.    	 :    None    	 11479      CCM: System hangs when EMI int1 clock is disabled    	 :    No fix scheduled. A clarification is added to the reference manual.    Chip Errata for the i.MX53, Rev. 6    44    Freescale Semiconductor11154	 Cortex-A8
	 NXP	 	 :    The CSPI automatically clears the overrun error status bit when the RxFIFO is read. This bit should not be cleared. This bit is designed for the interrupt access mode, and not for the DMA access mode.    The conditions are as follows:    â¢ When the RO bit is cleared by an RxFIFO read, it does not cause a problem if no DMA accesses to the CSPI occur    â¢ When DMA is utilized, the interrupt status of RO can be lost because of uncontrolled RxFIFO    access by DMA     Projected ImpactJEEHEHRECONSTRUCT:    If the RxFIFO is read before reading the Overrun error status bit, it is possible to miss the Overrun and thus miss the data.    	 :    When DMA is used for data transfers, the software can program the CSPI to only allow the interrupt generation during the overrun condition and not enable any other interrupt sources. In this way, whenever an interrupt comes from CSPI, the software can assume that it is the result of an Overrun condition.    	 11154      CSPI: Incorrectly clears the overrun status bit    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Under certain conditions, the DPLL IP TOG_SEL bit is not cleared after the TOG_DIS bit is set.    This issue is random in nature.     Projected ImpactJEEHEHRECONSTRUCT:    The proposed workaround resolves the issue.    	 :    A software delay for a fixed amount of time based on TOG_COUNT after the TOG_DIS bit is set.    	 11152      DPLL: TOG_SEL bit not cleared after the TOG_DIS bit is set 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    According to the eCSPI specifications, when eCSPI is set to operate in the Slave mode (CHANNEL_MODE[x] = 0), the SSB_CTRL[x] bit controls the behavior of burst completion.    In the Slave mode, the SSB_CTRL bit controls the behavior of SPI burst completion as follows:    â¢ 0âSPI burst completed when (BURST_LENGTH + 1) bits are received    â¢ 1âSPI burst completed when SSB input negated    Also, in BURST_LENGTH definition, it is stated âIn the Slave mode, this field takes effect in SPI transfer only when SSCTL is cleared.â    However, the mode SSB_CTRL[x] = 1 is not functional in Slave mode. Currently, BURST_LENGTH always defines the burst length.    According to the SPI protocol, negation of SSB always causes completion of the burst. However, due to the above issue, the data is not sampled correctly in RxFIFO when    {BURST_LENGTH+1}mod32 is not equal to {actual burst length}mod32.    Therefore, setting the BURST_LENGTH parameter to a value greater than the actual burst does not resolve the issue.     Projected ImpactJEEHEHRECONSTRUCT:    Slave mode with unspecified burst length cannot be supported due to this issue. The burst length should always be specified with the BURST_LENGTH parameter and the SSB_CTRL[x] should be set to zero.    	 :    There is no workaround except for not using the SSB_CTRL[x] = 1 option in the Slave mode. The accurate burst length should always be specified using the BURST_LENGTH parameter.    	 10189      eCSPI Burst completion by SSB signal in Slave mode is not functional    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Due to non proper clock synchronization implementation, the WMIS0 and the WMIS1 watermark status registers can return wrong value.    The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    The watermark status and the interrupt indications can be read wrongly. The status bits can be read as zero instead of one (Reading one as zero does not likely to occur).    	 :    In the real applications, the Read command is to be issued after a watermark interrupt is issued to the Cortex. After the watermark interrupt is generated, the appropriate status register indicators should read as one to indicate the violated watermark region.    A workaround to the issue is to check the data that is read, and repeat the read command in case all the register bits values are read as zero.    	 11038      EMI2.5: Read from M4IF Watermark status registers may have wrong result    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    48    Freescale Semiconductor11245	 Cortex-A8
	 NXP	 	 :    8-bit memory devices are supported by the WEIM interface, which is connected only to the EIM_D[31:24] pads.    Connection to the EIM_D[23:16] pads is not supported.    This erratum clarifies the statement in the i.MX53 Applications Processor Reference Manual (MCIMX53RM) , that only 16-bit and 32-bit memory devices are supported by the WEIM    interface.     Projected ImpactJEEHEHRECONSTRUCT:    WEIM 8-bit memory devices are supported according to above description.    	 :    None    	 11245      EMI: WEIM 8-bit memory devices support clarification    	 :    No fix scheduled. A clarification is added in the reference manual.    	 Cortex-A8
	 NXP	 	 :    EIM has a debug mode that enables BCLK to be a free running clock. This mode is selected by writing 1 to the BCM bit of the EIMâs WCR register.    â¢ When BCM is 1, this clock can be divided by configuring the GBCD field.    â¢ When BCM is 0, this clock can be divided by configuring the BCD field.    Due to this error, when BCM is set, GBCD is not 0 and BCD = 0, the result will be a non-active clock.     Projected ImpactJEEHEHRECONSTRUCT:    Due to this erratum, the software specific combination of BCM,GBCD, & BCD is not working.    	 :    This can be bypassed by configuring the BCD of all the active chip selects (CS) to be equal to GBCD.    	 11786      EMI: EIM BCLK in DEBUG mode is not functional when GBCD is zero and BCD is not zero    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    50    Freescale Semiconductor11028	 Cortex-A8
	 NXP	 	 :    There is a possibility of an extra pulse on SCLK in the EPIT, when switching between the clock sources.     Projected ImpactJEEHEHRECONSTRUCT:    It can result in an incorrect counter increment in the EPIT.    	 :    Clock source should be changed only when the EPIT is disabled. A way to accomplish the same is as follows:    1. Disable EPITâEPITCR[0] = 0 (EN = 0), that is, disable EPIT    2. Disable EPIT outputâEPITCR[23:22] = 00 (OM = 00)    3. Disable EPIT capture interruptâEPITCR[2] = 0 (OCIEN = 0) 4. Change clock sourceâEPITCR[25:24] (CLKSRC), determines which clock source is selected for running the counter    5. Clear status registerâEPITSR[0] (OCIF), this is a write one to clear register 6. Configure EPIT to start count once enabled from load valueâEPITCR[1] = 1 (ENMOD = 1) 7. Re-enable EPIT EPITCR[0] = 1 (EN = 1), that is, enable EPIT    8. Reconfigure output and interrupt    	 11028      EPIT: Possibility of additional pulse on src_clk when switching between clock sources    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Two issues are observed with respect to the automatic power down in eSDCTL: 1. PWDT cycle amount in the specification should be divided by 2.    2. The PWDT should be individually enabled for each chip select, to gain maximum power saving. However a bug is observed, which resulted in read operation from one chip select, preventing the other chip select from entering the power down mode. Only if both chip selects are idle, the power down mode is observed.     Projected ImpactJEEHEHRECONSTRUCT:    The issue impacts the power saving optimization.    	 :    None    	 11052      eSDCTL: Auto power down issues      	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    52    Freescale Semiconductor11213	 Cortex-A8
	 NXP	 	 :    A glitch may occur on the SDHC card clock when the software sets the RSTA bit (software reset) in the system control register. It can also be generated by setting the clock divider value. The glitch produced can cause the external card to switch to an unknown state. The occurrence is not deterministic.     Projected ImpactJEEHEHRECONSTRUCT:    Potential disruption of SD card operation.    	 :    A simple workaround is to disable the SD card clock before the software reset, and enable it when the module resumes the normal operation. The Host and the SD card are in a master-slave relationship. The Host provides clock and control transfer across the interface. Therefore, any existing operation is discarded when the Host controller is reset.    The recommended flow is as follows:    1. Software disable bit[3] of the System Control register    2. Trigger software reset and/or set clock divider    3. Check bit[3] of the Present State Register for stable clock 4. Enable bit[3] of the System Control register.    Using the above method, the eSDHC cannot send command or transfer data when there is a glitch in the clock line, and the glitch does not cause any issue.    	 11213      eSDHC: Glitch is generated on card clock with software reset or clock divider change    	 :    The i.MX53 Applications Processor Reference Manual (MCIMX53RM) is updated with the workaround procedure, that requires the SDCLKEN bit to be disabled before setting software reset and/or setting clock divider, and then enabling the SDCLKEN bit, after SDSTB bit is set high (Clock stable flag).    	 Cortex-A8
	 NXP	 	 :    Issue in eSDHC ADMA mode operation. The eSDHC read transfer is not completed when block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2. The eSDHC DMA controller is stuck waiting for the TC bit in the interrupt status register.    The following examples trigger this issue:    1. Working with an SD card while setting ADMA1 mode in the eSDHC    2. Performing partial block read    3. Writing one block of length 0x200    4. Reading two blocks of length 0x22 each. Reading from the address where the write operation is performed. Start address is 0x512 aligned. Watermark is set as one word during read. This read is performed using only one ADMA1 descriptor in which the total size of the transfer is programmed as 0x44 (2 blocks of 0x22).     Projected ImpactJEEHEHRECONSTRUCT:    The issue exists only when the block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2.    	 :    When the ADMA1 or ADMA2 mode is used and the block size is not a multiple of 4, the software should set the block size to:    4    block size    â ------------    4    In other words, the block size should be rounded to the next multiple of 4 bytes. In case of write, the software should add the corresponding number of bytes at each block end, before the write is initialized. In case of read, the software should remove the dummy bytes after the read is completed.    For example, if the original block length is 22 bytes, and there are several blocks to transfer, the software should set the block size to 24. The following data is written/stored in the external memory:    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    Chip Errata for the i.MX53, Rev. 6    54    Freescale Semiconductor11116      In this example, 48 (24 x 2) bytes are transferred instead of 44 bytes. The software should remove the dummy data.    Alternatively, the PIO mode can be used if the block size is non-4 byte aligned.    	 11116      eSDHCv2/eSDHCv3: ADMA transfer error when the block size is not a multiple of four    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :      ADMA2 mode in the eSDHC is used for transfers to/from the SD card. There are three types of ADMA2 descriptors: TRANS, LINK or NOP. The eSDHC has a problem when the last descriptor (which has the End bit '1') is a LINK descriptor or a NOP descriptor.    In this case, the eSDHC completes the transfers associated with this descriptor set, whereas it does not even start the transfers associated with the new data command. For example, if a WRITE    transfer operation is performed on the card using ADMA2, and the last descriptor of the WRITE    descriptor set is a LINK descriptor, then the WRITE is successfully finished. Now, if a READ    transfer is programmed from the SD card using ADMA2, then this transfer does not go through.     Projected ImpactJEEHEHRECONSTRUCT:    Limitation for configuring the last descriptor as LINK or NOP.    	 :    Software workaround is to always program TRANS descriptor as the last descriptor.    	 11115      eSDHCv2/eSDHCv3: Problem when ADMA2 last descriptor is12SPACEJEEHEHLINK or NOP      	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    An issue is identified when interfacing the SDIO card. There is a case where an SDIO interrupt from the card is not recognized by the hardware, resulting in a hang.    If the SDIO card lowers the DAT1 line (which indicates an interrupt) when the SDIO interrupt is disabled in the eSDHC registers (that is, CINTEN bits in IRQSTATEN and IRQSIGEN are set to zero), then, after the SDIO interrupt is enabled (by setting the CINTEN bits in IRQSTATEN and IRQSIGEN registers), the eSDHC does not sense that the DAT1 line is low. Therefore, it fails to set the CINT interrupt in IRQSTAT even if DAT1 is low.    Generally, CINTEN bit is disabled in interrupt service.    The SDIO interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear the CINT interrupt in IRQSTAT.    3. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    If a new SDIO interrupt from the card occurs between step 2 and step 3, the eSDHC skips it.     Projected ImpactJEEHEHRECONSTRUCT:    The issue is relevant only for the SDIO card interrupt usage.    	 :    The workaround interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear CINT interrupt in IRQSTAT.    3. Clear and then set D3CD bit in the PROCTL register. Clearing D3CD bit sets the reverse signal of DAT1 to low, even if DAT1 is low. After D3CD bit is re-enabled, the eSDHC can catch the posedge of the reversed DAT1 signal, if the DAT1 line is still low.    4. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    	 11186      eSDHCv2/eSDHCv3: eSDHC misses SDIO interrupt when CINT is disabled    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :      DLL_STS_REF_LOCK bit in DLL Status Register (DLLSTS) does not indicate the reference DLL lock status properly. The DLL_STS_REF_LOCK bit function indicates that the DLL has detected and locked to a half-phase ref_clock shift, allowing the slave delay-line to perform programmed clock delays.    Because the timing delay of one tap cell in DLL is too short, a two cell delay period is not wide enough to allow phase_n and phase_p of the reference clock to straddle the high-pulse at the same time. As a result, the DLL_STS_REF_LOCK status bit cannot indicate the actual status.     Projected ImpactJEEHEHRECONSTRUCT:    The DLL functionality itself is not impacted, only the DLL_STS_REF_LOC indicator is not working properly.    	 :    Do not use the DLL_STS_REF_LOC as indicator. The DLL_STS_SLV_LOCK status bit is sufficient indicator for the software. The DLL_STS_SLV_LOCK represents slave delay-line lock status. It indicates that a valid calibration has been set to the slave-delay line and that the slave-delay line is implementing the programmed delay value.    	 11406      eSDHCv3: DLL_STS_REF_LOCK status bit does not indicate12SPACEJEEHEHwhen DLL is locked      	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    58    Freescale Semiconductor11214	 Cortex-A8
	 NXP	 	 :    The FEC only creates wrap burst accesses upon data access (non-buffer descriptor). The NFC    under EMIv2 cannot handle such accesses from the MAX (M2) input port.     DescriptionJEEHEHRECONSTRUCT:      The Tx Warning Interrupt and the Rx Warning Interrupt signals from the FLEXCAN module are not connected internally to the CPU. Therefore, if these interrupts are enabled, they will not work as documented in the i.MX53 reference manual.     Projected ImpactJEEHEHRECONSTRUCT:    The FEC cannot use the NFC to access memory.     Projected ImpactJEEHEHRECONSTRUCT:    The Tx Warning Interrupt and the Rx Warning Interrupt are not available for use in any application where the FLEXCAN module of the i.MX53 is used.    	 :    The FEC should use the DDR for its buffer.     WorkaroundsJEEHEHRECONSTRUCT:    None.    	 11214      FEC: Fast Ethernet Controller (FEC) accesses to NAND Flash Controller (NFC) does not work    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    60    Freescale Semiconductor11029	 Cortex-A8
	 NXP	 	 :    There is a possibility of an extra pulse on SCLK in the GPT when switching between the clock sources.     DescriptionJEEHEHRECONSTRUCT:    In certain applications, the on-chip LDOs may not power up correctly. When the issue occurs, both internal LDO regulators do not drive the VDD_ANA_PLL and VDD_DIG_PLL supply outputs.    The potential for this outcome is aggravated at high temperatures (>50-60Â°C) and slower VCC    supply ramp times.    Impacted units do not function properly due to incorrect operation of the TEST_MODE input. The deviceâs offset latch circuit is designed to output a logic level zero, on application of VCC (logic power) and in the absence of NVCC_RESET (I/O power). The TEST_MODE circuit outputs an erroneous logic level one on application of VCC in the impacted units. This has the unintended effect of putting the device into test mode state which powers off the LDO regulators.    On impacted units, if the applied NVCC_RESET is not sourced from the internal LDO regulator then the output of the LDO is delayed till NVCC_RESET is applied. This LDO delay corresponds to the time it takes to bring up NVCC_RESET after VDD_REG.     Projected ImpactJEEHEHRECONSTRUCT:    The bug can produce an incorrect counter increment in the GPT when switching between the clock sources.     Projected ImpactJEEHEHRECONSTRUCT:    The impact depends on the systemâs power sequencing and supply connections as follows:    â¢ If the on-chip LDO regulator powers NVCC_RESET, it prevents the correct TEST_MODE    input value from reaching the LDO enable logic, thereby creating a deadlock situation in the impacted units. Both LDO regulators do not enable and drive the VDD_ANA_PLL and VDD_DIG_PLL supplies.    â¢ If an external regulator powers NVCC_RESET, and the power-up sequence complies with the data sheet then the issue does not occur. Externally supplying and correctly sequencing the NVCC_RESET supply allows the TEST_MODE logic to achieve the correct state. Thus, the LDOs are enabled.    â¢ If an external regulator powers NVCC_RESET, and comes up after VDD_REG , then a delayed LDO output enable is observed. Once NVCC_RESET comes up, it correctly resolves the state of the TEST_MODE input, thus enabling the internal LDO regulators. This delay is not a system issue since LDOâs are fully functional and POR_B remains low while other supplies are sequenced.    Workaround:    Users must ensure that the NVCC_RESET supply is powered externally (not from the i.MX53    LDO VDD_ANA_PLL supply output) after VCC is stable and before other I/O supplies (NVCC_xxx) are powered up.    Silicon Fix:    Fixed in silicon revision 3N78C    Chip Errata for the i.MX53, Rev. 6    62    Freescale Semiconductor11127      .	 :    Changing the clock source should only be done when the GPT is disabled. A way to accomplished this is as follows:    1. Disable GPTâWrite 1'b0 to EN bit of GPTCR    2. Disable interruptsâWrite 6'b000000 in Bits [5:0] of GPTIR    3. Configure Output Mode to unconnected/ disconnectedâWrite zeros in OM3, OM2, OM1 in GPTCR    4. Disable Input Capture ModesâWrite zeros in IM1,IM2 in GPTCR    5. Change clock source CLKSRC in GPTCR    6. Clear Status registerâWrite 003F in GPTSR    7. Set ENMOD in GPTCR    8. ENABLE GPTâWrite 1'b1 to EN bit of GPTCR. The GPTSR should not be read immediately after changing the clock source (a wait of at least one SCLK is required).    	 11029      GPT: Possibility of additional pulse on src_clk when switching between clock sources    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If the step-by-step mechanism is enabled while the M4IF is operational (there are transactions in the internal buffers), there can be a situation where one or more of the arbitrations' AXI protocol is violated in the âwrite address channelâ or âread address channel.â     Projected ImpactJEEHEHRECONSTRUCT:    The M4IF violates the AXI protocol and crashes if step-by-step is set ON or OFF during the run-time.    	 :    Before entering the step-by-step mode, configure the EMI to the software LPMD and then read the LPACK register. The LPACK register indicates that the M4IF is idle and the step-by-step can be enabled. The difference between the regular procedure of LPMD and this procedure is that the EMI clocks remain ON.    	 11127      M4IF: Step-by-step mechanism violates AXI protocol    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :      Enabling the power-saving mode in M4IF before configuring the DDR module causes deadlock during DDR configuration.     Projected ImpactJEEHEHRECONSTRUCT:    None    	 :    Initialization must be performed first, followed by enabling the M4IF power saving.    	 10682      M4IF power-saving mode should not be enabled before DDR is ENGcm1094012SPACEJEEHEHconfigured      	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Reading the M4IF status registers of an inactive AXI master or slave ports stalls the entire IC    system. This occurs when a specific master or slave clock is not provided to the M4IF, but the ARM/JTAG tries to read that masterâs status bits.    When the master or slave clock is not active, the read request fails to propagate the status bits that go through synchronization (IPG_CLK to *_clk), acknowledge never comes back, and the entire chipâs IP bus is stuck.    Some M4IF status registers bundle the status of several masters or slaves. If one of the masters or slaves is inactive, accessing such a register stalls the entire system, even if the user is interested only in the status of other active ports.    Table 4 lists the impacted registers and the clock signals that should be active for read access to succeed.    Table 4. List of Impacted Registers12SPACEJEEHEHRegisters      Required Master/Slave to be Active for Read Action to Succeed MDCR    fast, slow, int1, int2    WMIS0    fast    WMIS1    fast    MLEN    m0, m1, m2, m3, m4, m5, m6, m7, fast, slow, int1, int2    FDPS    fast    SSRL0    fast    SSRL1    fast    SSRH0    fast    SSRH1    fast    MDSR0    The arbitration domain selected by MDCR/RARB    MDSR1    The arbitration domain selected by MDCR/RARB    MDSR2    The arbitration domain selected by MDCR/RARB    MDSR3    The arbitration domain selected by MDCR/RARB    MDSR4    The arbitration domain selected by MDCR/RARB    MDSR5    The arbitration domain selected by MDCR/RARB    MDSR6    The arbitration domain selected by MDCR/RARB    MDSR7    The arbitration domain selected by MDCR/RARB    MDSR8    The arbitration domain selected by MDCR/RARB    SBS0    The arbitration domain selected by MDCR/RARB    SBS1    The arbitration domain selected by MDCR/RARB    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    65		 11203      M4IF: Reading M4IF status registers of an inactive AXI master or slave stalls entire system    		 Cortex-A8
	 NXP	 	 :    No impact on regular functionality. The status registers are usually accessed for debugging purposes.    	 :    Enable the relevant M4IF masters or slaves clocks for the status read.    	 11203      Table 4. List of Impacted Registers (continued)12SPACEJEEHEHRegisters      Required Master/Slave to be Active for Read Action to Succeed PSM0    m0,m1    PSM1    m2,m3    PSM2    m4,m5    PSM3    m6,m7    MDCR    fast, slow, int1, int2    MCR0    fast, slow, int1, int2    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    66    Freescale Semiconductor11215	 Cortex-A8
	 NXP	 	 :      When ECC_MODE = 1 the 8-sym error detection and correction does not work with 512 byte main area Ã16 NAND Flash.     Projected ImpactJEEHEHRECONSTRUCT:    The 8-sym ECC mode does not work with Ã16 bus width NAND. This mode works with Ã8 bus width NAND. This restricts 8-sym ECC operation to 8-bit NAND devices.    	 :    None    	 11215      NFC: 8-Sym ECC mode does not work with 512 byte page x1612SPACEJEEHEHbus NAND Flash      	 :    No fix scheduled. The reference manual is updated accordingly.    	 Cortex-A8
	 NXP	 	 :    The copy back feature of the NFC module does not work as expected. When trying to copy a page from source address to destination address, the destination address is always the successive page of the source address.     Projected ImpactJEEHEHRECONSTRUCT:    The copy back cannot be done to an address that is not successive to the source address.    	 :    There are two options:    â¢ Perform the copy back through Atomic operations    â¢ Instead of copy back, perform a read operation followed by a write operation Both options affect the overall performance.    	 10288      NFC: Copy back function destination address restriction    	 :    No fix scheduled. Clarification added to reference manual.    	 Cortex-A8
	 NXP	 	 :    NFC offers a block-write-protect feature in which only a range of pre-defined blocks can be modified. This range of blocks can be set to UNLOCK (blocks that can be modified), LOCK    (blocks that cannot be modified) or LOCK_TIGHT (blocks that cannot be modified and the range cannot be changed).    Though switching to LOCK_TIGHT mode, the range of blocks can still be modified.     Projected ImpactJEEHEHRECONSTRUCT:    Lock cannot be trusted to prevent data from being overwritten. As the software does not use this feature (both WinCE and LINUX), there is no impact.    	 :    As there is no difference between LOCK and LOCK_TIGHT modes, the software should not use LOCK_TIGHT mode.    	 11124      NFC: Block write-protect does not support lock-tight    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    NFC offers a block-write-protect mechanism. Only a configurable range of NAND blocks can be modified. Any erase/program operations on the blocks outside this range should be blocked by NFC. This mechanism does not work in automatic program and in automatic erase.     Projected ImpactJEEHEHRECONSTRUCT:    As there is no workaround for this bug, the write protect mechanism cannot be used.    	 :    It should be handled in the software, as it is done now for the Windows and Linux drivers.    	 11217      NFC: Block write-protect does not work in automatic operations 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When working with addr_op = 01, and trying to perform a copy-back operation, the NFC ignores the destination address configured, and copies the page to âsource addressâ +1. Additionally, the following automatic operation is carried out from address_register1 instead of address_register0.     Projected ImpactJEEHEHRECONSTRUCT:    Automatic operation is carried out from address_register1 instead of address_register0.    Workaround:    If the system requires to work in addr_op = 01, switch to addr_op = 11, before the copy-back operation, and switch back after the copy-back operation is complete.    		 11182      NFC: Copy-back does not work properly when addr_op = 01    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The software reset (setting the NFC_RST bit in NFC and then sending reset command 0xFF to NAND Flash) does not work correctly under the following conditions:    â¢ Reset between the read operations    â¢ With atomic program operation, the RESET command is not being issued    â¢ Auto program operationâIf reset occurs after writing data to the NFC and before the write confirm command, the CACK bit is not set after setting CREQ     Projected ImpactJEEHEHRECONSTRUCT:    The software reset does not work consistently, but the failure conditions are not common in real world applications.    	 :    Do not to apply software reset for the above conditions.    	 11126      NFC: Software reset does not work properly under certain conditions    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    After automatic Program operation the NFC is expected to perform a status read and store the status in STATUS_SUM register. With RBB_MODE = 1 (that is, NFC waiting using BSY_B signal), the status read does not occur at the end of the Program/CopyBack0 and CopyBack1 operations.     Projected ImpactJEEHEHRECONSTRUCT:    The status is not correct.    	 :    Workaround for this erratum:    â¢ In the Automatic mode, use RBB_MODE = 0    â¢ If RBB_MODE = 1 is to be used, then after the Automatic program, Automatic CopyBack0 and Automatic CopyBack1 operations, Status read should be done explicitly.    	 11218      NFC: Status read does not occur at the end of the program, with RBB_MODE = 1    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When working in symmetric mode with a clock ratio 1:2, and using a 16-bit Flash bus width, the NFC reads data and organizes it using a shift in the internal RAM in such a way that the last 16 bits of the data block being transferred are not written to the memory.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data may be read.    	 :    Avoid combining the following parameters/conditions:    â¢ 16-bit flash bus width    â¢ Symmetric mode    â¢ 1:2 clock-ratio    	 11219      NFC: Misses read data when working in Symmetric mode with clock ratio 1:2, and using a 16-bit Flash bus width    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When the NFC is configured to addr_op = 1 or 3    â¢ If num_of_devices = 0â1, then the LSB of the page/blocks address section of the addr_group bits is not used for address generation.    â¢ If num_of_devices = 2â3, then the 2 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.    â¢ If num_of_devices = 4â7, then the 3 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.     Projected ImpactJEEHEHRECONSTRUCT:    Working in these addr_op modes has some limitations on the size of the devices (depending on the number of devices). Such large devices do not exist at this time. This can be an issue when using larger devices that may become available in future.12SPACEJEEHEHNOTE      addr_op = 0 works as designed with any combination.    	 :    Do not use the combination of parameters/modes described above.    	 11220      NFC: Cannot reach entire address space when addr_op = 1 or 3    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The NFC error correction mechanism is based on BCH error correction codes. The BCH error correction code allows correction up to a particular number of errors (T = 4 or 8 depending on the configuration), and detection in case of higher number of error bits. In a situation where the number of errors (NOBER) is larger than the number of errors the NFC can correct (T), the NFC should report on uncorrectable error.    Due to a theoretical limitation, the BCH code can fail in detecting the error when the number of actual error bits is much larger than the number of correctable bits. The failure depends on the location of the errors (related to Hamming distance), and its probability is very small. The detection failure probability can be calculated using the formula as follows: P    1    e = --------    T! 2T    â    where T is number of correctable errors.    â¢ For 4-bit ECC, the calculated probability for a decoder error is 1 : 384    â¢ For 8-bit ECC, the calculated probability for a decoder error is 1 : 10,321,920    In case of failure, the NFC reports only on T or less errors (NOBER=T) and tries to correct them.    As a result the data is damaged and the NFC does not report on it.     Projected ImpactJEEHEHRECONSTRUCT:    There is a small probability for failure in detection of the errors by the ECC mechanism due to theoretical limitation of the ECC code.    	 :    To reduce the failure significantly, treat the case where NFC reports NOBER = T as uncorrectable error. This implies that if the number of errors is equal to T, the software must invalidate the block.    It is a common practice for the software to mark the block as bad in advance when the number of reported errors approaches T.    	 11221      NFC: ECC mechanism may fail to report uncorrectable error situation    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The NFC may not properly sample the ready/busy (R/B) signal under the following conditions: 1. RBB_MODE = 1 (Ready-Busy mode 1 - NFC monitors ready-busy status by checking NANDF_RBx (R/B) signals)    2. ADD_OP = 01 (Addressing Option 01 - NFC uses only address_group0 with single NAND    device    3. enfc_clk period is less than twb/3 (twb is the period from WE write enable signal HIGH to R/B    ready/busy signal assertion)    If RBB_MODE = 1 and ADD_OP = 01, the NFC may miss the sampling of the ready/busy signal (R/B) if the enfc_clk is too fast. According to the NAND flash protocol, the NAND device should enter the busy mode and assert the R/B signal (driving R/B signal to zero) after the maximum time period of twb after the deassertion of the WE signal (driving write enable to one).    The NFC samples the R/B signal after a fixed time of 3 enfc_clk cycles after the deassertion of WE.    Typically, the twb period is 100 ns. When the enfc_clk is set to less than 33 ns period, the NFC may miss sampling the R/B.     DescriptionJEEHEHRECONSTRUCTs table in the i.MX53 Applications Processor Reference Manual (MCIMX53RM) for detailed modes description.    If the above two options are not feasible, the enfc_clk frequency can be reduced such that clock period is larger than twb/3. This results in small performance degradation as the supported ONFI1.0    NAND can run at up to 40 MHz.     Projected ImpactJEEHEHRECONSTRUCT:    Violation of NAND interface protocol can result in data corruption. The implementation of the proposed workaround may have insignificant performance impact.    	 :    The recommended workaround is to set RBB_MODE = 0. This also frees up the NANDF_RBx pads for other usages. The NFC monitors the ready-busy status by performing a status-read command.    Another option is to work with ADD_OP other than 01, allowing to work automatically with a single device other than device0.    See, NAND_FLASH_CONFIG Register Field 	 11002      NFC can miss the sampling of the ready/busy signal (R/B) when RBB_MODE = 1    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Data corruption or EMI hanging can occur on SDMA Multi-Page read from the NFC in case of simultaneous read access by other master from WEIM. Use of SDMA is relevant for a case of multiple pages read from the NFC (that is, setting NUM_OF_ITERATION to a value greater than zero and setting NO_SDMA to zero in NFC for automatic interleave mode).     Projected ImpactJEEHEHRECONSTRUCT:    SDMA read access from NFC may be corrupted in case other masters perform read from WEIM    at same time.    There are no issues in following cases:    â ARM accesses the NFC when WEIM is accessed by any other master in the system    â SDMA accesses the NFC when the WEIM is idle    â NFC is idle and WEIM is accessed by any master in the system 	 :    Avoid the above described situation. Note that, in current WinCE and Linux BSP releases from Freescale, the SDMA Multi-Page mode read from NFC is not activated.    	 11053      SDMA multi-page read from the NFC, when the WEIM is    operating, can result in data corruption or EMI hanging    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If the power supply of an unused UHVIO pad power group is pulled down, it can cause malfunction in the other functional UHVIO IO cells. The UHVIO IO cells (that support signal levels above 3 V) are used in interfaces such as SD card, NAND Flash. For example, grounding SD2 power supply rail through a small resistor (say 470 Î©) causes boot issues from the SD1 interface. This is caused due to a particular HVIO IO cell design limitation.     Projected ImpactJEEHEHRECONSTRUCT:    Pay attention to this limitation during board design. An unintentional grounding can occur because of nonfunctional or disabled voltage supply device connected to the UHVIO based interface VCC    line.    	 :    Take measures to avoid such cases. Leaving the unused interface supply open, does not cause any issue. The issue occurs only when a supply is grounded through a small resistor. The best design practice is to apply power to all the supply rails.    	 11180      Grounding nonfunctional UHVIO IO pads power rails can cause malfunction in other UHVIO IO cells    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    79	 Cortex-A8
	 NXP	 	 :    UHVIO pads have an automatic power supply voltage level detector mechanism that should detect if the interface voltage is high (3.0 V â 3.6 V) or low (1.65 V â 3.1 V), and configure the pad accordingly.    This detector may not work correctly for voltage levels between 1.95 V and 3.1 V. It detects this range as high voltage when it should be low. This impacts the pad timing performance, adding a propagation delay of up to 2.5 ns.     Projected ImpactJEEHEHRECONSTRUCT:    UHVIO pads are used by several interfaces such as NAND Flash, SDHC, EIM, FEC, Keypad, PATA, CSI, and some GPIOs. For general functionality the impact is not significant because the pads can be configured appropriately by setting the IOMUX pad control register bit VDOEN1 to manual voltage selection and the HVEOVERWRITE bit to 1. However, during the boot, the pads are configured by default to enable the automatic supply voltage detection. As a result, UHVIO pad base interfaces cannot use the fast boot mode if they are in the 1.95 V â 3.1 V voltage range. This limitation applies particularly to NANDF and SDHC interfaces.    	 :    In case the UHVIO based interface operates at voltage level in the 1.95 V to 3.1 V range, configure the pads for manual voltage level selection by setting the IOMUX pad control register bit VDOEN1    for manual voltage selection and the HVEOVERWRITE bit to 1.    To guarantee no timing issues occur during boot on an external interface operating at a voltage level in the 1.95 V to 3.1 V range, disable the fast boot mode by burning the corresponding e-fuse.    E-fuses exist in both NAND Flash and SDHC boot modes, and select either a fast or slow boot option.    	 11642      UHVIO pads automatic supply voltage level detect function may not work for voltage between 1.95 V to 3.1 V    	 :    No fix scheduled    1. Note the erratum ENGcm11851 related to VDOEN bit polarity. The polarity of the bit in i.MX53 revision 2.0 is different from revision 1.0.    Chip Errata for the i.MX53, Rev. 6    80    Freescale Semiconductor11851	 Cortex-A8
	 NXP	 	 :    SATA can work in two clock modes: internal and external. Due to an error in the ROM code, boot from SATA when using the internal clock mode is not working. SATA can be used in internal clock mode if boot is done from another source.     Projected ImpactJEEHEHRECONSTRUCT:    Boot from SATA when working in internal clock mode is not working.    	 :    1. Boot from SATA when working in external clock mode can be used.    2. Use Low Power Boot Mode (LPB) and force low power condition using pull-ups or pull-downs. LPB is used in the following way:    â Blow BT_LPB fuse.    â Do one of the following options:    â Pull-up PATA_DIOW pad to imitate low power condition and blow BT_LPB_POLARITY fuse    â Pull-down PATA_DIOW pad to imitate low power condition and avoid blowing BT_LPB_POLARITY    	 11851      ROM (Boot): Boot from SATA fails when internal clock mode is used    	 :    No fix planned    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    81	 Cortex-A8
	 NXP	 	 :    The RTICv3 feature that allows the TrustZone software to disable the run-time check of the selected memory regions (region unlock), can cause the RTICv3 to hang and stop the run time integrity check of other regions.     Projected ImpactJEEHEHRECONSTRUCT:    The RTICv3 feature that allows the TrustZone software to disable run-time check of the selected memory regions cannot be utilized.    	 :    None. Avoid using the memory region unlock feature in the TrustZone code.    	 10971      f      ENGcm10971      RTICv3 memory region unlock feature can cause the RTICv3 to hang    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    SAHARA does not work properly if AHB:IP buses clock ratio is 1:1. It works fine with AHB:IP    buses clock ratio 2:1.     Projected ImpactJEEHEHRECONSTRUCT:    Adds limitation on system configuration for the clock ratio of 1:1 between AHB and IP buses.    	 :    Avoid using a ratio of 1:1 between AHB and IP buses clock frequencies. Other software workarounds are considered, but not yet confirmed.    	 10363      SAHARA/CCM: Frequency ratio restriction for AHB and IP buses in SAHARA    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The AHCI specification states that the IS.INFS bit should be set when ERR_C is set, which does not occur. ERR_C is set when a Phy_not_ready condition is detected during non-data FIS reception or transmission.     Projected ImpactJEEHEHRECONSTRUCT:    None. In addition to ERR_C, a Phy_not_ready condition also causes the IS.PRCS bit to be set.    IS.PRCS = 0 and SSTS.DET = 0 (indicates device disconnect) supersede other errors and should be handled by the software. Setting IFS/INFS is redundant and does not give any more useful information to the software.    The severity is low. Medium probability.    	 :    None    	 10417      SATA: IS.INFS bit is not set when ERR_C is set    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    84    Freescale Semiconductor10975	 Cortex-A8
	 NXP	 	 :    When an unknown FIS (UFIS) is received and the PMP field is incorrect (does not correspond to the command header CH.PMP field), both PDMA and TSM state machines lock-up, and IS.IPMS    interrupt is generated.     Projected ImpactJEEHEHRECONSTRUCT:    A UFIS is received in the RxFIFO and the IS.IPMS bit is set, generating IPMS intrq. Therefore, PDMA and TSM state machines lock-up.    The severity is medium. The probability of occurrence is low. Receiving an unknown FIS is an error scenario. This should not happen in the normal operation.    	 :    Host software issues port reset (COMRESET) or global reset, if IS.IPMS interrupt is received.    	 10975      SATA: Unknown FIS with incorrect PMP field received    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    85	 Cortex-A8
	 NXP	 	 :    Under a certain condition (small data transfer of 20 bytes with two Data FISes (12 bytes + 8 bytes + âend-statusâ is delayed a little) and four PRDs (4 + 4 + 4 + 8 bytes)), it is possible that a read overflow condition can be detected erroneously when such a condition is not present. As a result the P#IS.OFS is set.     Projected ImpactJEEHEHRECONSTRUCT:    A P#IS.OFS interrupt is generated erroneously. The Host controller is not affected otherwise. So the normal operation can continue.    The severity is low. The probability is low.    	 :    Software can either retry the command or generate COMRESET.    	 10983      SATA: Erroneous detection of Read Overflow condition    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    86    Freescale Semiconductor10982	 Cortex-A8
	 NXP	 	 :    The SRST FIS is not read from the system memory, when the ST bit clears during an on-going transfer and the core locks up. This happens only during certain conditions (for example, when a DMA read transfer takes a long time due to a large burst being converted into multiple single transfers).    There are two parts to this problem:    1. TSM locks up in HT_PIOOTRANS2 (PIO) or in HT_DMAOTRANS2 (DMA) when software wants to send a SRST and clears the CMD.ST bit    2. PDMA unsuccessfully requests an SRST command header when the current read transfer is not finished and p_dma_req = 1     Projected ImpactJEEHEHRECONSTRUCT:    The PDMA/TSM module lockup.    The severity is medium. The probability is low.    	 :    The software should use Port Reset (COMRESET) instead.    	 10982      SATA: Soft Reset not sent when issued by the software during on-going transfer    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    87	 Cortex-A8
	 NXP	 	 :      Under certain conditions (combination of core clock values and software delays), the core can generate a phy_reset indefinitely.    It occurs during one of the following cases:    1. If Global reset causes CMD.SUD = 0, then the software writes CMD.SUD = 1 to spin-up to the device    2. Under normal operation, when CMD.SUD = 1 and when the software issues a port reset by toggling SCTL.DET = 0 â 1 â 0     DescriptionJEEHEHRECONSTRUCT:    The SATA AHCI specification states that the software should issue a soft reset with 0xF in the PMP field, to check if a port multiplier is connected to the Host controller. If a device is connected directly to the Host controller, without a port multiplier, the returned FIS has a value of 0x0 in the PMP field. As the values of the PMP field in the Soft Reset FIS and the returned Signature FIS    from the device are different, the Host controller reports an error and sets the IS.IPMS bit.    The PDMA module is supposed to check the PMP field of the incoming FIS only when CMD.PMA = 1. As CMD.PMA is set to zero initially, the controller should accept the signature FIS from the device even with PMP = 0xF. Currently, PMA is not used/ignored.     Projected ImpactJEEHEHRECONSTRUCT:    The top-level port phy_reset is asserted indefinitely. This is a synchronous reset, typically used only when the PHY handles TX OOB.    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    If a port multiplier is connected, problem does not arise. When the software attempts to enumerate the port multiplier, the port multiplier returns a FIS with 0xF in the PMP field, which is expected by the controller. If a device is connected directly to the Host without a port multiplier, the PMP    field in the returned FIS contains 0x0, as opposed to 0xF in the soft reset FIS issued by the software.    This causes the IS.IPMS bit to be set, and the TFD.STS.BSY bit is never cleared.    The severity is medium. The probability is low.    	 :    Port reset/COMRESET after time-out.     WorkaroundsJEEHEHRECONSTRUCT:    When IS.IPMS is set and TFD.STS.BSY is not cleared, no further transfers can be made until a COMRESET is issued. Determine the presence/absence of the Port Multiplier using IPMS intrq. If it is set, the PM is not attached and SRST with PMP = 0h must be issued.    	 11018      SATA: Problems with phy_reset when Staggered Spin-Up12SPACEJEEHEHsupported      	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    88    Freescale Semiconductor11084-1    ENGcm11084-1    SATA: PMP field checked when CMD.PMA = 0     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    89	 Cortex-A8
	 NXP	 	 :    If CMD.ST = 0 and the PDMA of eofdata_q register is set due to a Data FIS received, it can cause data corruption on the AHB bus during the next initiated transfer (the current transfer is aborted, as expected). It happens if the software clears the CMD.ST bit to send a soft reset while there is still an outstanding data command.     DescriptionJEEHEHRECONSTRUCT:    The VS.MNR field (Minor Version Number) reset value is 0x0100. The correct value should be 0x0300 indicating support for AHCI 1.3.     Projected ImpactJEEHEHRECONSTRUCT:    Data corruption on the AHB bus (same data is written twice on consecutive addresses).    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    None. The severity is low.    	 :    Ensure that there are no outstanding data commands, before clearing the CMD.ST bit.     WorkaroundsJEEHEHRECONSTRUCT:    None    	 11084-2    ENGcm11084-2    SATA: Data FIS received when CMD.ST = 0    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    90    Freescale Semiconductor11084-3    ENGcm11084-3    SATA: Supported AHCI version is incorrect     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    91	 Cortex-A8
	 NXP	 	 :    When DMASTP FIS with inactive slot (TAG with corresponding P#SACT bit is zero) is received, it is currently posted to the memory and the data transfer phase is initiated from the wrong slot location. The correct behavior should generate IFS intrq and transition to Fatal state.     DescriptionJEEHEHRECONSTRUCT:    When the Device and the Host send PMREQ at the exact same time, but the Device is disconnected before the Host actually detects a PMACK or PMNAK in the deframer, the Host core remains in the power state (L_TPMPartial or L_TPMSLumber) until a COMINIT is received. Also, in this case, the Host core does not flag this as a 'phy not ready' error condition to the Host firmware and the SERR.ERR_C register does not get updated to indicate loss of communication.     Projected ImpactJEEHEHRECONSTRUCT:    IFS is not asserted when DMASTP with inactive slot is received, 'bad' DMASTP FIS is posted to the memory, and data transfer operation is initiated resulting in wrong data transfer and likely bus error or other errors (such as incorrect PRD and so forth).    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    The Host remains in the L_TPMPartial/L_TPMSlumber state, indefinitely transmitting PMREQ, though there is no Device connected to it, until COMINIT is received from the Device. In addition, the SERR.ERR_C register does not get updated to indicate loss of communication.    The severity is low. The probability is low.    	 :    None     WorkaroundsJEEHEHRECONSTRUCT:    None    	 11084-4    ENGcm11084-4    SATA: DMA Setup FIS with inactive slot reception    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    92    Freescale Semiconductor11084-5    ENGcm11084-5    SATA: Host does not detect disconnect in    L_TMPartial/L_TMSlumber states     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    93	 Cortex-A8
	 NXP	 	 :    A problem is identified with the BCM 30 Datastream FIFO, where it has approximately a 1/8 or a 1/16 chance of losing the first data, causing a lock up after a low power mode, due to a problem with the reset logic. When the problem occurs, the FIFO loses the first data that contains alignment information. This results in the core locking on the first non-ALIGN Primitives and the core being locked. The only recovery at this point is a software time-out and the Host issued COMRESET.     DescriptionJEEHEHRECONSTRUCT:    As per the SATA specification, in the far-end Tx-only responder mode, the BIST Activate FIS    A-bit means ALIGN Bypass (do not transmit ALIGN primitives) when A = 1. The AHCI controller only accepts A = 0 and does not send ALIGNs. A = 1 causes the controller to R_ERR    the BIST Activate FIS. This behavior is opposite to what the specification requires.    The correct behavior should be:    â A = 0 - R_ERR    â A = 1 - R_OK (no ALIGNs sent)     Projected ImpactJEEHEHRECONSTRUCT:    The Device locks-up after it switches from the low power mode.The severity is high.     Projected ImpactJEEHEHRECONSTRUCT:    None    	 :    None     WorkaroundsJEEHEHRECONSTRUCT:    None    	 11084-6    ENGcm11084-6    SATA: Possible core lockup after switching from the low power mode    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    94    Freescale Semiconductor11084-7    ENGcm11084-7    SATA: Incorrect interpretation of A-bit in BIST Activate FIS     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    95	 Cortex-A8
	 NXP	 	 :    The DWC SATA AHCI core removes and replaces all ALIGNs in the far-end re-timed BIST    responder loopback mode. This can cause overflow in the BIST FIFO, if the Tx frequency of the device is faster than the Host Tx frequency (clk_asic). According to the SATA specification, the link can consume up to two ALIGNs and prevent the overflow.     DescriptionJEEHEHRECONSTRUCT:    Under certain conditions, the Host controller fails to wake up from the low power mode. The problem arises when the Host issues a COMRESET (software requested reset of system) at the exact time when the Device is disconnected and then reconnected, and when both the Host and the Device were previously in the power down mode. The series of events to cause this error are described as follows:    1. The Host sends a partial power mode request.    2. The Device issues a partial power mode request (collision).    3. The Host backs off and accepts the device power mode request.    4. Both the Host and the Device go into slumber power mode (phy_slumber asserted).    5. The Device is disconnected and reconnected, after which it sends COMINIT.    6. The Host does not respond to COMINIT as it issued a COMRESET from the application software at the exact time COMINIT is detected.    7. The Host does not detect COMINIT, but phy_slumber is de-asserted and asserted again and remains asserted.    8. The Host hangs in the power down mode.    This problem is caused by signals from the clk_asic clock domain remaining asserted after clk_asic is restored, and the signals cause another power mode to be asserted.     Projected ImpactJEEHEHRECONSTRUCT:    The loopback data is corrupted when the BIST FIFO overflows.    The severity is high. The probability is medium.     Projected ImpactJEEHEHRECONSTRUCT:    The Host may not wake up from the low power mode.    The severity is medium. The probability is low.    	 :    Disable the spread spectrum clocking (SSC) on the Host side.     WorkaroundsJEEHEHRECONSTRUCT:    The core can come out of this hang condition if software issues another COMRESET.    Additionally, if the Device supports Asynchronous Signal Recovery, after 10ms, the Device reissues COMINIT and OOB completes successfully at that point.    	 11084-8    ENGcm11084-8    SATA: BIST responder re-timed loopback mode may drop data due to FIFO overflow    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    96    Freescale Semiconductor11084-9    ENGcm11084-9    SATA: Host may not wake up from low power mode     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    97	 Cortex-A8
	 NXP	 	 :    A CRC error is incorrectly asserted for a subsequent FIS after a SYNC primitive is injected inside the incoming FIS. As per the SATA specification, if a SYNCp is received, the other side should not finish the FIS (SATA specification violation). This error condition represents an extremely rare case of data or non SYNCp Primitive being corrupted to be SYNCp, and then the FIS is completed.     DescriptionJEEHEHRECONSTRUCT:    If a SYNC is inserted immediately after the first Rx Data FIS DWord (46h header), the PDMA locks up, as it expects the next DWord to be data.     Projected ImpactJEEHEHRECONSTRUCT:    The Host responds to the subsequent FIS with R_ERR. This error is handled by the system in the usual fashion. For a non-data FIS, the FIS is tried again. For data FIS, the command fails and the error should be handled by the software.    The severity is low. The probability is low.     Projected ImpactJEEHEHRECONSTRUCT:    The PDMA locks in DR_Receive_prerd state. SERR.DIAG_S bit is set, but interrupt is not generated.    The severity is low. The probability is low.    	 :    None     WorkaroundsJEEHEHRECONSTRUCT:    COMRESET after time-out.    	 11084-10    ENGcm11084-10 SATA: Injected primitive error inside FIS causes CRC error 	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    98    Freescale Semiconductor11084-11    ENGcm11084-11 SATA: SYNC in Rx Data FIS causes PDMA FSM lock up  Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    99	 Cortex-A8
	 NXP	 	 :    If the P#CMD.ST bit is cleared immediately after the core enters the low power mode using aggressive power management (after the last outstanding command is finished as reported by the CI bits for non-NCQ commands or the SACT bits for NCQ commands), issuing a new command by setting P#CMD.ST and P#CI bits can cause the core to get stuck trying to wake up.     Projected ImpactJEEHEHRECONSTRUCT:    The PDMA state machine (portsm_cs) remains in PM_WakeLink state as the three pulses (two acks and one wake) generated are close to each other on the pulse synchronizer (pm_host_ack/wake) causing the synchronizer to miss the last wake pulse. The core does not process any new commands issued.    Under the normal operation, the P#CMD.ST bit is not cleared.    The severity is low. The probability is low.    	 :    Do not clear the P#CMD.ST bit when new commands are issued and the aggressive PM is enabled.    Alternatively, issue COMRESET when the command times out when this condition is detected.    	 11084-12    ENGcm11084-12 SATA: Synchronizer misses last wake pulse when CMD.ST bit is cleared in aggressive power mode    	 :    No fix scheduled    Chip Errata for the i.MX53, Rev. 6    100    Freescale Semiconductor12374	 Cortex-A8
	 NXP	 	 :    In rare cases the Secured Real Time Counter (SRTC) module can incorrectly invalidate its counters. During a power up or down sequence, the SRTC module supply source is shifted between a coin cell (NVCC_SRTC_POW) and VDDA. The signal that initiates the supply switch from NVCC_SRTC_POW to VDDA is generated based on the output of the LDO regulator which powers up when VDD_REG is applied. If VDDA is not present before VDD_REG, the logic switches to the power supply thatâs not available yet. When this occurs, the SRTC module may incorrectly report a security violation causing the data (counter and register values) to be lost.    Devices may not function properly due to incorrect toggling of the TEST_MODE input (refer to    erratum ENGcm12374). For security reasons, toggling of the TEST_MODE signal causes the register contents of the SRTC to be cleared.     Projected ImpactJEEHEHRECONSTRUCT:    â¢ The SRTC module may experience an inadvertent register reset during power up or power down events of the IC. A clock tampering security violation is incorrectly recorded in the SRTC status register.    â¢ The loss of register contents during a power cycle prevents the module from maintaining the time of day functionality.    â¢ Both the secure and non-secure operation of the SRTC module are impacted.    â¢ The SRTC module can still be used for applications that do not require the registers to be preserved over a power cycle.    Workaround:    There is no guaranteed workaround that prevents the SRTC counter reset issue from occurring.    Hence it is recommended to use an external RTC solution (PMIC or standalone RTC) to completely avoid the issue. To reduce the likelihood of the SRTC data loss issue, a modified power up/down sequence can be used:    â The NVCC_RESET supply must ramp up along with the VCC supply.    â The power up sequence must bring up the supplies in the following order: VCC => VDDA => VDD_REG    The ramping supply must be fully powered up and stable per the datasheet before ramping up the next supply in the above sequence.    The power down sequence must shut down the supplies in the following order: VCC => VDD_REG => VDDA or    VCC => VDDA => VDD_REG12SPACEJEEHEHNOTE      The above power sequences reduce the likelihood of the SRTC data loss issue, however does not guarantee that the issue can be completely avoided.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    101		 12374      SRTC loses data while powering up/down    		 Cortex-A8
	 NXP	 	 :    In AC97, 16-bit mode, the Rx data is received in bits [19:4] of RxFIFO, instead of [15:0] bits.     Projected ImpactJEEHEHRECONSTRUCT:    The SDMA script should be updated accordingly to perform the shift to the right location on the fly during data transfer. If the data register is accessed directly by software, it should account for the shifted data and perform shifting to the right location.    	 :    The data should be shifted to the right location by the SDMA script or by the software in case of direct access to the register.    	 11129      SSI: In AC97, 16-bit mode, received data is shifted by four bit locations    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The USBOH core uses the erroneous hrdata (when hresp is high) and results in the false USB    transfer at the external Interface.     Projected ImpactJEEHEHRECONSTRUCT:    False transfer of USB.    	 :    This should not happen in real system because when configured correctly, the USB should not get an error response. If it happens, then Garbage In Garbage Out.    	 11151      USB: Erroneous descriptor handling by USBOH module    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :      HS-TLL and FS-TLL are not supported. These features will be removed from the specification.     DescriptionJEEHEHRECONSTRUCT:    The USB host controller can lock up when a FIFO underrun occurs on a non-32-bit aligned data buffer. This applies to both the Host controller and the OTG controller in Host mode.     Projected ImpactJEEHEHRECONSTRUCT:    Removed support for the option of on board USB connection without transceiver.     Projected ImpactJEEHEHRECONSTRUCT:    Ethernet over USB is sensitive to trigger this issue since the data buffers in this case are usually not 32-bit aligned (in Linux).    	 :    None. Need to add transceiver for on board connection.     WorkaroundsJEEHEHRECONSTRUCT:    1. Set Stream Disable bit (SDIS) in the USBMODE register. This forces the controller to load an entire packet in the FIFO before starting to transmit on the USB bus. Hence, the FIFO never underruns. This somewhat reduces the max bandwidth of the USB since there is idle time as the controller waits for the entire packet to be loaded.    2. Instead of setting SDIS, the FIFO threshold can be increased so that more data is in the FIFO    before a packet transmit is started. This increases the tolerance to bus latency and avoids FIFO    underrun. The threshold can be increased by using higher values for the TXTHRESHOLD    filed in the TXFILLTUNING register. The default value is 2 bursts (64 bytes if burst size=8).    	 11331      USB: High Speed Transceiverless Logic interface (HS-TLL) and Full Speed Transceiverless Logic interface (FS-TLL) USB12SPACEJEEHEHinterfaces are not supported      	 :    No fix scheduled. Feature is removed from the reference manual.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    10512SPACEJEEHEHERR00630812SPACEJEEHEHERR006308      USB: Host controller lock-up issue       Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    106    Freescale Semiconductor10380	 Cortex-A8
	 NXP	 	 :    There is a limitation when selecting different Huffman tables for AC/DC coefficients for the two chrominance components, Cb and Cr. The JPEG decoder design cannot handle two different Huffman tables for Cb and Cr. Cb and Cr are assumed to use the same Huffman table, which is true in most cases.     Projected ImpactJEEHEHRECONSTRUCT:    The bug occurs when the two chroma components, Cb and Cr, use different Huffman tables for AC/DC coefficients. Therefore, if Cb and Cr use the same Huffman table, this problem does not occur. Normally, JPEG streams use the same Huffman tables for Cb and Cr. It should be rare for JPEG streams to use different Huffman tables for the two chroma components.    There is a large visual quality degradation. However, in reality, the probability of using two different Huffman tables for Cb and Cr is low. As a result, the overall impact for JPEG decoding should not be significant.    	 :    None. There is no firmware workaround fix for this erratum.    	 10380      VPU: JPEG decoder does not support different AC/DC Huffman tables for Cb and Cr    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If the CMEOR bit in CCM is not overridden, the VPU clock can be gated off automatically by the vpu_idle signals, while the VPU enters idle state. The VPU may miss generating the decoding/encoding done interrupt when the clock is automatically gated off by the vpu_idle signal.     Projected ImpactJEEHEHRECONSTRUCT:    The automatic clock gating can be disabled and replaced by software controlled clock gating with minor impact to power saving.    	 :    Do not activate the automatic clock gating and use the software implementation for VPU clock gating, instead. The VPU clock is gated on before sending a command and gated off after receiving interrupt of the command.    	 11195      VPU may miss generating encoding/decoding interrupt when automatic clock gating is activated    	 :    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    108    Freescale Semiconductor11856	 Cortex-A8
	 NXP	 	 :      Due to a memory timing problem on memories used in the i.MX53 IPU and VPU, these blocks may miscalculate incoming data for decoding. The problem occurs when the IPU and VPU are running at max frequency of 200MHz.     Projected ImpactJEEHEHRECONSTRUCT:    Some artifacts may be seen on the decoded image.    	 :    None    	 11856      IPU and VPU may present some artifacts when running at12SPACEJEEHEH200MHz      	 :    Fixed in i.MX53 revision 2.1.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    109	 Cortex-A8
	 NXP	 	 :      When eSDHC3 port is used in single data rate (SDR) SD mode, it cannot meet the required setup time to operate at a maximum frequency of 50MHz. In this mode it can support up to 45MHz for SD clock frequency. In EMMC4.4 mode, the required setup time is smaller, thus there is no issue and up to 52MHz is supported.     Projected ImpactJEEHEHRECONSTRUCT:    For SD cards, which can support 50MHz clock, this frequency may not be achieved on the eSDHC3 port in SDR mode thus affecting bandwidth. Nevertheless, no issue has been reported so far using 50MHz. There is no impact on other SD ports.    Software Workaround:    Use a SD clock frequency up to 45MHz for this port when SD card is used.    Silicon Fix:    No plan to fix.    		 12290      eSDHCv3 on eSDHC3 port has setup timing issue in SD SDR12SPACEJEEHEHmode      		 Cortex-A8
	 NXP	 	 :    Occurs when a pending command which issues busy is completed. For a command with R1b response, the proper software sequence is to poll the DLA for R1b commands to determine busy state completion. The DLA polling is not working properly for the ESDHC module. This is relevant for all eSDHC ports (eSDHC1-4 ports).     Projected ImpactJEEHEHRECONSTRUCT:    DLA bit in PRSSTAT register cannot be polled to wait for busy state completion.    Software Workaround:    Updated block guide to reflect that DLA is not applicable to detect busy state, instead, should poll bit 24 in PRSSTAT register (DLSL[0] bit) to check that wait busy state is over.    Silicon Fix:    No plan to fix.    		 12360      eSDHC AutoCMD12 and R1b polling problem    		 Cortex-A8
	 NXP	 	 :    The 256-bit SCC fuse (SCC_KEY[255:0]) has been programmed with the same value across i.MX53 devices. The SCC key should be unique per device, to ensure that data encrypted with one i.MX53 cannot be decrypted by another i.MX53.     Projected ImpactJEEHEHRECONSTRUCT:    A non-unique SCC_KEY means that the binding of the encrypted data to the IC is no longer unique to that IC. This affects the secure off-chip key storage functionality. Secure off-chip key storage may be used to protect data that is persistent in nature. Secure off-chip key storage is only enabled when the IC has been booted using the secure functionality. If the IC is not securely booted then secure off-chip key storage is not an available feature and thus the IC is not affected by this erratum.    Software Workaround:    None.    Silicon Fix:    No silicon fix required. The unique SCC_Key has been implemented.    Contact factory for additional information.    Chip Errata for the i.MX53, Rev. 6    112    Freescale Semiconductor12363		 12354      SCC key fusing with a non-unique value    		 Cortex-A8
	 NXP	 	 :    In the event that an uncorrectable ECC error occurs while reading Main/Main+Spare from the NAND device, then all spare read operations would fail until the next successful Main/Main+Spare read operation.     Projected ImpactJEEHEHRECONSTRUCT:    The NFC wrongly indicates ECC error.    Software Workaround:    Read main or main+spare after first uncorrectable error.    Silicon Fix:    No hardware fix scheduled. This issue will be addressed in the next BSP release.    		 12363      NFC wrong indication of ECC uncorrectable error occurrence after reading the spare area    		 Cortex-A8
	 NXP	 	 :    The DDR2 JEDEC standard requires the DDR clock (SDCLK) to start toggling at least 200 Î¼S    before the clock enable (SDCKE) signal rise. For DDR3, the minimum time is 500 Î¼S. In the ESDCTLv2 IP implementation, the actual number that is counted is actually a half CKIL cycle less than described in the eSDCTL chapter in i.MX53 RM. Thus, when programming the recommended value in SDE_to_RST field, the result is a half CKIL cycle less than expected, thus violating the above JEDEC requirement. Note that CKIL is a 32 KHz clock.    Impact:    So far, no issue has been seen.    Software Workaround:    For DDR2, in the RST_to_CKE field (ESDCTL_ESDOR[5:0]), program a value of 10 h, to toggle SDCLK at least 7 CKIL cycles before SDCKE assertion. For DDR3, program a value of 23 h to toggle SDCLK at least 33 CKIL cycles before SDCKE assertion.    Silicon Fix:    No hardware fix is required. The i.MX53 RM and the BSP will be updated accordingly.    Chip Errata for the i.MX53, Rev. 6    114    Freescale Semiconductor12379		 12377      ESDCTLv2 might fail to wait the minimal time between DDR clk    & clk enable    		 Cortex-A8
	 NXP	 	 :    When the AUS bit is set, the address lines of the EIM are un-shifted. By default, AUS bit is cleared and address lines are shifted according to port size (8, 16 or 32 bits). Due to an error the address bits 27:24 are shifted when AUS=1. For example, CPU address: 0xBD00_0000 ([A27:20]=1101    0000 becomes: 0xB600_0000 ([A27:20]=0110 0000) on the EIM bus. Since A[27:25] is shifted to    [A26:24] and A[23:0] is not shifted. As a result A[24] is missed.    Impact:    If the memory used does not exceed 32 MB, there is no impact.    This mode is related to a unique memory configuration that is not often used. Most systems can work in the default mode (AUS=0). Board designers should connect the EIM address bus without a shift (for example, A0âA0 and A1âA1), while working in AUS=0 mode.    Software Workaround:    â¢ Use the AUS = 0 mode (default) while connecting the address signals without a shift (for example, A0âA0 and A1âA1).    â¢ For AUS=1, for devices larger than 32 MB, need to build a memory map that takes this shifting into consideration and does not include A[24] line.    Silicon Fix:    No hardware fix is scheduled.    		 12379      EIM: AUS mode is non functional for devices larger than 32MB    		 Cortex-A8
	 NXP	 	 :    When the TIEN bit is set to low, the ESAI transmitter may misalign the data with the desired channels, regardless of the number of pre-loaded data written to ETDR register. As a result, the audio may be transmitted to the wrong channel, causing a channel mismatch. In case of two channels, the channels could be swapped. If TIEN bit is set to high, and the number of pre-loaded data is equal to the number of channels, the data will be sent to the correct channel.     Projected ImpactJEEHEHRECONSTRUCT:    The audio may be transmitted to the wrong channel when TIEN=0.    Workaround:    Set TIEN bit, and write the proper initial words to ETDR register.12SPACEJEEHEH		 12385      ESAI: Channel misalignment may happen in ESAI transmitter data stream when TIEN bit is zero    		 Cortex-A8
	 NXP	 	 :    The operation of the Embedded Trace Buffer (ETB) is not guaranteed at 1.2 GHz. This issue does not occur on most i.MX53 parts.     Projected ImpactJEEHEHRECONSTRUCT:    In some cases, the ETB cannot be used at above 1 GHz, by using the default ARM voltage settings.    Workaround:    â¢ Increase the ARM voltage during debug at 1.2 GHz, maintaining the voltage limits specified in the datasheet.    â¢ Perform the debug at 1 GHz instead of at 1.2 GHz.    Silicon Fix:    No fix scheduled.    Chip Errata for the i.MX53, Rev. 6    Freescale Semiconductor    117		 12386      ETB may not function properly at 1.2GHz    		 Cortex-A8
	 NXP	 	 :    Unaligned access to AIPS can be driven high by SAHARA, DAP, and FEC. If they access the AIPS    internal registers during an unaligned access, an ABORT occurs.     Projected ImpactJEEHEHRECONSTRUCT:    Unaligned accesses to the AIPS internal registers fail.    	 :    Make only aligned accesses to the AIPS internal registers.    	 07298    ENGcm07298    AIPS: Unaligned access causes abort on writes to the internal registers    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a sequence of load and store operations are performed to different address locations in a memory region that is marked as shared device, then a load can incorrectly bypass a store.    The issue is reported by ARM, erratum ID 709718, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the load address and store address are mapped to access the memory region of the same device, and the device relies on memory operations to occur in program order, then this device may not operate as intended.    	 :    The erratum occurs only for the shared device memory regions and not for the non-shared device memory regions. Therefore, this problem can be worked around by using the remap registers to remap all the shared device transactions to the non-shared device. The only difference between the shared device and the non-shared device is the attributes produced for the transaction on the AXI interface. Therefore, the user does not experience any impact in terms of performance from this workaround.    Another possible use of the TEX remap is to map the shared device regions to the strongly ordered transactions. This second remapping option is less desirable as it affects the performance, as strongly ordered transactions are not buffered.    The following code sequence is required to setup and enable the TEX remap. This should be done before enabling the MMU.    ; Setup PRRR so device is always mapped to non-shared    MRC p15, 0, r0, c10, c2, 0; Read Primary Region Remap Register BIC r0,#3<<16    MCR p15, 0, r0, c10, c2, 0; Write Primary Region Remap Register    ; Enable TEX remap    MRC p15, 0, r0, c1, c0, 0; Read Control Register    ORR r0,r0,#1<<28    MCR p15, 0, r0, c1, c0, 0; Write Control Register    Another valid workaround is to place a data memory barrier (DMB) between all the memory    accesses to the device regions, where ordering is required between a store and a subsequent load to    a different physical address.    	 09830    ENGcm09830    ARM: Load and Store operations on the shared device memory regions may not complete in program order    	 :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    12    Freescale Semiconductor09830    	 Cortex-A8
	 NXP	 	 :    Under certain conditions, a sequence of instructions where an MCR instruction that writes a CP15    register is closely followed by an MRC that reads the same register, are executed such that the RAW    hazard is not detected and the MRC reads the old value of the register. This scenario can only occur for accesses to one of the following four CP15 registers:    â¢ CacheSizeSelection Register    â¢ Thread and ProcessID user read/write    â¢ Thread and ProcessID user read only    â¢ Thread and ProcessID privilege only    These registers are both readable and writable and have been optimized to execute in a single cycle.    Furthermore, this scenario occurs only when a specific sequence of instructions is executed between the MCR and the MRC. The sequence must meet two criteria:    â¢ It must take less than three cycles to execute    â¢ It must have one of the instructions in the following list:    â ARM PLD with [Rn, -Rm, <shift>] addressing mode    â ARM or Thumb PLD with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    â Thumb or ThumbEE load/store instruction with [Rn, Rm,<shift>] addressing mode (unless it is LSL #0 or LSL #2)    â Thumb TBB instruction    The issue is reported by ARM, erratum ID 588115, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, the old stale value of the register is read rather than the newly written value, in which case the system software may appear to behave incorrectly. However, the usage model for such a software sequence is unclear, and hence the likelihood of encountering it in practice is very low, especially considering the requirement of the second unrelated instruction that must also fall between the MCR and the MRC.    	 :    If a workaround for this erratum is desired, there are two options. The first simple option is to add a NOP immediately following the MCR register write in any case where encountering this erratum may be a concern. By adding a single NOP, the minimum required cycle window is guaranteed and the erratum does not occur.    The second option is to set bit 16 in the CP15 Auxiliary Control Register. This causes a pipeline flush on every write to the CP15 register and ensures that the RAW hazard condition does not occur.    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX51, Rev. 5    14    Freescale Semiconductor07788    The second workaround has the advantage of requiring just one change to the CPU configuration that can be done statically. The disadvantage is that it has some impact on the performance of write updates to CP15 registers that would not otherwise require a pipeline flush. This second workaround can be implemented using the following code sequence to be executed in the Secure state:    MRC p15, 0, R1, c1, c0, 1    ; read Aux Ctl Register    ORR R1, R1 #(1 << 16)    ; set bit 16 to 1    MCR p15, 0, R1, c1, c0, 1    ; write Aux Ctl Register    	 07788    ENGcm07788    ARM: A RAW hazard on certain CP15 registers can result in a stale register read    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    All memory transactions performed as part of a tablewalk should be considered Privileged, even in the User mode. However, Cortex-A8 incorrectly marks memory transactions generated from tablewalks performed in User mode as the user transactions on the AXI bus. This indication is given by the ARPROT[0] signal, which is set to zero during the transaction.    The conditions are as follows:    â¢ Cortex-A8 must be in user mode    â¢ A memory transaction (instruction or data) misses in the TLB and causes a tablewalk    â¢ The address for the page table entry is not found in the L2 cache, resulting in an external memory request    â¢ This erratum occurs when APROT[0] incorrectly indicates a user transaction for this memory request on the AXI bus.    The issue is reported by ARM, erratum ID 488063.     Projected ImpactJEEHEHRECONSTRUCT:    As the values broadcast on ARPROT[0] are completely transparent to the software, the implications for this erratum are only on a specific subset of the processor systems, specifically for a system that includes some form of system level memory protection unit, that uses the ARPROT    bits to determine if a memory request can be allowed. For any system that does include such a unit, that unit may report false errors on page table accesses due to this erratum.    	 :    As the processor directly does not make use of ARPROT[0], any workaround would be specific to the device that makes use of the values broadcast on ARPROT[0]. The most likely usage would be some form of system memory protection unit. If such protection unit exists, it may need to filter out any access to the page tables from the address space that is protected to operate properly. This implies that the external protection unit cannot provide additional protection for the page tables.    For example, the page table cannot be inserted in a Secure RAM which cannot be accessed in User mode, as in this case, an additional protection is added beside the MMU. Alternatively, the CSU    can be configured to transform User access to Privileged on addresses used by PAGE TABLE.    	 04786    ENGcm04786    ARM: ARPROT[0] is incorrectly set to indicate a USER    transaction for memory accesses generated from user    tablewalks    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    ARMv7 architecture specifies that the CSSELR should be banked between Secure and Non-secure states. Cortex-A8 does not currently bank this register.    The conditions are as follows:    â¢ The system should have an active process in secure state and an active process in non-secure state at the same time.    â¢ The system should perform cache maintenance operations in both secure and non-secure processes.    The issue is reported by ARM, erratum ID 485963, Category 21.     DescriptionJEEHEHRECONSTRUCT:    When a Clean to Point of Coherency (PoC) by MVA operation is performed, or the Preload Engine is programmed to clean a region of memory from the L2 cache, a cache line from that region can be corrupted with a stale copy of memory, and a memory store operation is lost.    The conditions are as follows:    â¢ A Cache Clean by MVA to the PoC instruction is executed to clean cache line A, or the preload engine is configured to clean a memory region which includes cache line A. Either of the operations result in the placement of cache line A into a victim buffer for writeback to external memory. It also keeps the line still valid in the L2 cache.    â¢ A memory store operation is performed to the same cache line A that is evicted by the cache clean operation. This operation results in a modification of cache line A in the L2 cache (but not to the copy of the line that may still remain in the victim buffer if memory response is slow).    â¢ A cache eviction is done of cache line A due to an unrelated memory request to load cache line B. The modified copy of cache line A is placed in a victim buffer. At this point, the two victim buffers may contain two different versions of cache line A. As each victim buffer uses a different AXI ID and arbitrates independently for the AXI bus, there is no guarantee for the order in which the memory updates occur, and the store operation may be overwritten by the cache clean operation, leaving the external memory with stale contents.    The issue is reported by ARM, erratum ID 586323, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    A cache cleaning sequence that reads the CSSELR may not work as expected. The published sequence for cleaning the entire cache (see ARM Architecture Reference Manual) includes setting the CSSELR followed by a read from the selected Cache Size ID register (CCSIDR). If the non-secure side executes this sequence, and is encountered by a secure interrupt between the setting of the CSSELR and the reading of the selected CCSIDR, then there is a possibility that the secure side may also use the CSSELR. On returning to the non-secure side, the CSSELR value may have changed, which makes the cache cleaning sequence to malfunction. Similarly, a non-secure interrupt can cause a secure cache cleaning sequence to malfunction.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, one or more store operations are lost, resulting in incorrect program behavior. This can occur for any application which either uses the preload engine to clean a memory region, or uses Clean by MVA to PoC maintenance operations to clean a region of memory.    	 :    When transitioning security state, the secure monitor software should save the current CSSELR    value (corresponding to the security state the processor is transitioning out of) and restore the previously saved CSSELR value (corresponding to the security state the processor is transitioning into).     WorkaroundsJEEHEHRECONSTRUCT:    There are two feasible workarounds that can be used for this erratum. The first workaround is to place a DMB or DSB barrier at the end of each cache clean routine or preload engine memory clean sequence. This barrier operation ensures that the cleaned line goes out and is seen by main memory before the store is executed and therefore guarantees that the clean is done correctly and memory contains the correct final value.    This workaround is consistent with the ARM recommended practice for ending the maintenance routine. The above workaround is convenient to implement and should work for all expected usage models. However, there is still the possibility that an interrupt can be taken during the clean routine, and the interrupt handler can perform a store operation to the line just cleaned, allowing for the scenario which can lead to the erratum.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    19	 04785    ENGcm04785    ARM: C15 Cache Selection Register (CSSELR) is not banked    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a non-cacheable memory request is subsequently followed by any cache maintenance operation done by MVA, then the memory can be corrupted.    The conditions are as follows:    â¢ The L1 data cache must be of size 32 Kbyte    â¢ The L1 data cache hardware alias checks are enabled (the L1ALIAS bit in the Auxiliary Control Register is set to 0)    â¢ The virtual memory management used by the operating system does not follow the page coloring guidelines and allows virtual to physical address alias cases to exist on bit 12 of the address    â¢ A non-cacheable memory request to normal, device, or strongly ordered memory is subsequently followed by a cache maintenance operation done by MVA without any cacheable memory operations executed in between. The non-cacheable memory request can be fully executed, or can be a speculative instruction in the branch shadow that subsequently is flushed.    When the above conditions are met and the cache maintenance operation is performed to generate a hash alias scenario on its cache lookup, memory corruption or a false parity error can occur.    The issue is reported by ARM, erratum ID 586324, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If the operation sequence occurs as described above, then memory can be corrupted or a false parity error can be generated. In addition, even if the workaround as described below is implemented, it is possible that a nonsecure maintenance operation could result in the invalidation of a secure memory location. Therefore, this could possibly be viewed as an avenue for a security attack.    However, the contents of secure memory cannot be viewed as a direct result of this erratum and the lack of consistent repeatability makes it very difficult for the user to make use of this erratum as a security attack.    	 :    If full PIPT caching support is not required by the operating system, or the processor includes a 16 Kbyte L1 data cache, then no workaround is required. If alias conditions can occur, then the workaround is to guarantee that a cache maintenance operation is not immediately preceded by a non-cacheable memory request. This is guaranteed by initiating every cache maintenance by MVA routine with a cacheable load or store request immediately preceding the main loop and ending with a DSB barrier operation at the end of the loop. The load or store that precedes the loop can be done to any cacheable memory location. In addition, both interrupts and aborts should be masked during the cache maintenance routine. Interrupt masking is required to prevent a non-cacheable memory request, either fully executed or in a branch shadow, from initiating the sequence that can 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    21	 07784    Another workaround that avoids even the case mentioned above, is to convert all Clean by MVA to PoC operations to Clean and Invalidate by MVA to PoC as described in the code sequence as follows:    â¢ Replace all uses of: MCR p15, 0, <Rn>, c7, c10, 1;    â¢ Clean Data cache line by MVA to PoC with this instruction: MCR p15, 0, <Rn>, c7, c14, 1;    â¢ Clean and Invalidate cache line by MVA to PoC.    There is no Preload Engine equivalent for the second workaround option as it is not possible to configure the preload engine to perform a clean and invalidate operation. Therefore, if there are concerns that the DSB based workaround is insufficient, then it is advisable to not use the Preload Engine for cleaning memory regions. The preload engine can be configured such that it is not accessible at user/privilege and nonsecure/secure level of granularity.    For more information on Preload Engine configurability, see Cortex-A8 Technical Reference Manual.    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When a Clean to Point of Coherency or Clean and Invalidate to Point of Coherency by MVA operation is performed, it is possible that the line remains present in the L2 cache and any dirty data is not pushed out on to the AXI bus to main memory. This can occur whenever the requested address is present in the L1 cache but not the L2 cache.    The conditions are as follows:    â¢ The memory region being cleaned is configured in write allocate mode    â¢ The cache line being cleaned is initially present in the L1 cache and not in the L2 cache The issue is reported by ARM, erratum ID 586320, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If a Clean or Clean and Invalidate operation does not operate as intended, and leaves the data present in the L2 cache, the memory coherency in the system can no longer be guaranteed.    Therefore, this erratum impacts any code sequence used to maintain the system coherence.    	 :    The software workaround for this erratum is to disable the write allocate in the L2 cache, as shown in the following instruction sequence:    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg Disabling the write allocate in the L2 cache can impact the performance of some applications. If this performance impact is deemed to be very high, there are two other software workarounds that can be used. The first is to disable write allocate around each sequence of clean by MVA to PoC or clean/invalidate by MVA to PoC instructions, as shown in the following instruction sequence: MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg ORR <Rd>, <Rd>, #(1 << 22); set the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg    <perform sequence of MVA operations here>    MRC p15, 1, <Rd>, c9, c0, 2; read L2 cache Aux Ctrl Reg BIC <Rd>, <Rd>, #(1 << 22); clear the Write Allocate disable bit MCR p15, 1, <Rd>, c9, c0, 2; write the L2 cache Aux Ctrl Reg The final workaround that can be implemented is to perform each maintenance operation twice with interrupts disabled. By performing the operation twice in back-to-back successions with no other memory operations executed in between, it can be assured that the line is evicted from both L1 and L2 cache and written out to main memory.    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    23	 07786    result in this erratum. If there are concerns about the interrupt latency, the maintenance loop can be amended to enable and disable the interrupts directly around the maintenance operation. This impacts the time taken to complete the maintenance loop.    To workaround any concerns of a potential security attack due to this erratum, all secure memory should be marked as inner write through. This can be done either by using the caching attributes in the page tables for all secure page tables or by making use of the secure banked version of the remap registers. Apart from making all secure memory write through, a routine should be run out of reset to completely fill the cache with dummy data, to prevent invalid, uninitialized data in the cache from being written out to memory and potentially corrupting secure memory. Making all secure memory inner write through guarantees that even if the invalidation of a secure line in the L1 cache occurs due to this erratum, the correct data is not lost.    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Under specific set of conditions, the stale data saved in the L2 cache can be erroneously returned to the processor on a subsequent load instruction.    The conditions are as follows:    â¢ The L2 cache must be configured as an inner cache rather than as an outer cache    â¢ The L2 cache must be configured to use write allocate memory type The issue is reported by ARM, erratum ID 468413, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum occurs, stale data can be read by a subsequent load instruction, resulting in an incorrect program behavior.    	 :    There are two viable workarounds for this erratum. One workaround is, not to configure the L2    cache as an inner cache, but maintain the default setting as an outer cache. The second workaround is to use the remap registers to remap the inner cache attributes from write allocate to write back instead.    	 07782    Perform the following steps:    1. Disable the interrupts and the imprecise aborts    2. Execute the maintenance operation first pass    3. Execute the same maintenance operation, second pass12SPACEJEEHEH4. Enable the interrupts and the imprecise aborts      Repeat the above sequence for each cache maintenance operation. Interrupts can remain disabled for a longer sequence of maintenance operations, but this has a negative effect on interrupt latency.    This workaround has a performance impact on the execution time of cache maintenance operations.    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Three memory requests in the L2 cache can interact and result in a deadlock condition. The exact scenario involves a dependency chain of three requests, an instruction fetch request, a memory preload instruction (PLD) and a swap instruction (SWP). In this dependency loop, no request can progress as each one of them is dependent on the next request. That is, the PLD request cannot complete as the IF request is pending to use the BIU. The IF request cannot complete because of the pending SWP request, and the SWP request is not allowed to complete as it is waiting on the PLD to complete before obtaining the lock on the bus.    The conditions are as follows:    â¢ PLD instructions must be used by the processor    â¢ SWP instructions must be used by the processor    The issue is reported by ARM, erratum ID 468415, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    This erratum only impacts the users of swap instructions. Swap instructions have been deprecated from the ARMv7 version of the ARM Architecture as its functional use in terms of setting up semaphores is now replaced from the ARMv6 architecture forwards by the LDREX and STREX    instructions. If this erratum is encountered and the processor deadlock occurs, it can only be interrupted by resetting the processor.    	 :    One software workaround for this erratum is, not to use the swap instructions. If swap instructions are to be used in the code base, the other software workaround is to disable the PLD instructions and make them a NOP. The code required to implement this workaround is as follows: MRC p15, 0, r0, c1, c0, 1; read register    ORR r0, r0, #(1<<9); PLDNOP - force PLD to be NOP    MCR p15, 0, r0, c1, c0, 1; write register    This workaround has some performance impact on the peak memory copy bandwidth.    	 04761    ENGcm04761    ARM: Swap instruction, preload instruction, and instruction fetch request can interact and cause deadlock    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Under very specific set of conditions, data from a Neon load request can be incorrectly forwarded to a subsequent, unrelated memory request.    The conditions are as follows:    â¢ Neon loads and stores must be in use    â¢ Neon L1 caching must be disabled    â¢ Trustzone must be configured and in use    â¢ The secure memory address space and the non-secure memory address space both use the same physical addresses, either as an alias or the same memory location or for separate memory locations    The issue is reported by ARM, erratum ID 468414, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered, it is possible for a load request to receive the wrong data value which can likely result in incorrect operation of the program.    	 :    There are many software solutions for this erratum and only one has to be applied. The recommended solution, if possible, is to map cacheable areas of memory so that both secure and non-secure do not share the same physical address space.    Another possible solution is to force NEON to cache in the L1 data cache. This can be programmed using the Auxiliary Control Register bit [5], L1NEON, as follows: MRC p15, 0, r0, c1, c0,    1; read register    ORR r0, r0, #(1<<5)    ; L1NEON caching enable    MCR p15, 0, r0, c1, c0, 1    ; write register.    Another possible solution is to disable L2 data forwarding from the victim buffers. This can be programmed using the L2 Auxiliary Control Register bit[27], Load data forwarding disable as follows:    MRC p15, 1, r0, c9, c0, 2    ; read register    ORR r0, r0, #(1<<27)    ; L2 load data forwarding disable    MCR p15, 1, r0, c9, c0, 2    ; write register    Both workarounds can be implemented with little or no perceived performance impact in the majority of applications.    	 04759    ENGcm04759    ARM: NEON load data can be incorrectly forwarded to a    subsequent request    	 :    No fix scheduled    1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    28    Freescale Semiconductor04759    	 Cortex-A8
	 NXP	 	 :    If a load request is processed which misses the L2 cache, but cannot be immediately forwarded to the BIU, it encounters a special hazard which prevents the request from being required to access the L2 cache RAM again to save power. There can be multiple requestors with unique addresses, (that is, one address per cache line) with this special hazard. All write-allocate requests that access the L2 cache RAM, on port1, do not have address comparators to check for this special hazard condition. So, if a subsequent write-allocate request is issued to the L2 cache RAM on port1 and allocates a victim buffer, then all requests pending with this special hazard must be forced to perform a L2 cache RAM lookup again to maintain memory coherency. There is a 1-cycle window in which the write-allocate request must allocate to a victim buffer and a pending request to the BIU is not prohibited from going to the BIU, such that a deadlock can occur.    The conditions are as follows:    â¢ The processor must have L2 cache present and enabled.    â¢ The L2 cache must be configured to support the write allocate memory type.    The issue is reported by ARM, erratum ID 468416, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If this erratum is encountered and processor deadlock occurs, it can only be interrupted by asserting RESET on the processor.    	 :    The workaround for this erratum is to disable write-allocate by programming the L2 Auxiliary Control Register bit[22], Write allocate disable:    MRC p15, 1, r0, c9, c0, 2; read register    ORR r0, r0, #(1&lt;&lt;22); Write allocate disable    MCR p15, 1, r0, c9, c0, 2; write register    Disabling write allocate in the L2 cache could have a performance impact for some applications.    	 04760    ENGcm04760    ARM: Under a specific set of conditions, processor deadlock can occur when L2 cache is servicing write allocate memory 	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    In the register AMC of the Tiger/ARM Platform (0xBASE_0018) the bit ALPEN must be set to 1    and ALP[2:0] must be set to â000â. Other combinations are reserved and must be avoided.     DescriptionJEEHEHRECONSTRUCT:    If the PMU is in use and an overflow event occurs simultaneously with a write to one of the subsets of CP15 and CP14 registers, the overflow event can be lost.    The conditions are as follows:12SPACEJEEHEH1. The performance counters must be in use      2. The performance counter must have an overflow (counter value goes beyond 0xFFFF_FFFF) 3. Simultaneous with the counter overflow, a MCR instruction must be executed that writes to one of the following CP14/CP15 registers:    â Any PMU register other than PMU counter registers    â ThumbEE Configuration Register    â ThumbEE Handler Base Register    â System Control Register    â Auxiliary Control Register    â Secure Configuration Register    â Secure Debug Enable Register    â Nonsecure Access Control Register    â Context ID and Thread ID Registers    â Coprocessor Access Register    â Cache Size Select Register    The issue is reported by ARM, erratum ID 628216, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    Memory retention issues unless the guideline is followed.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, the overflow status flag is not set for that counter in the Overflow Flag Status Register, and an interrupt request is not generated, even when the Interrupt Enable Set Register is configured to generate an interrupt on counter overflow.    	 :    None     WorkaroundsJEEHEHRECONSTRUCT:    The main workaround is to poll the performance counter. The maximum increment in a single cycle for a given event is 2. Therefore, polling can be infrequent as no counter can increment by more than 232 in fewer than 2 billion cycles.    If the main usage model for performance counters is collecting values over a long period, then polling can be used to collect values (and reset the counter) rather than waiting for an overflow to occur. Polling can be done infrequently and overflow can be avoided.    If the main usage model for performance counters relies on presetting the counter to some value and waits for an overflow to occur, then polling can be used to detect when an overflow event is 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    33	 10230    ENGcm10230    ARM: Clarification regarding the ALP bits in AMC register 	 :    No fix is scheduled. A clarification will be added to the reference manual.    	 Cortex-A8
	 NXP	 	 :    If a Neon store is done to Device type memory and is followed in instruction sequence by a load instruction to Device type memory, it is possible that an unrelated store instruction that is done to cacheable memory and hit the L1 cache has its data dropped and therefore not update memory.    There are three different memory types defined in the ARM architecture namely, Strongly Ordered, Device, or Normal. Device type memory is one of the three different memory types. This region is specified by the page table entries used by the MMU.    The conditions for this erratum are that relatively close in the instruction stream, the following must occur:    â¢ A Neon store is done to Device type memory.    â¢ A load is executed to Device type memory (any load to Device type memory region, not just from Neon), consecutive to the Neon store.    â¢ Several stores hit the L1 cache. (Any store that hit the L1 cache - Neon or integer core. The address does not matter.)    The issue is reported by ARM, erratum ID 507113, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the erratum occurs, one or more cacheable stores that hit the L1 cache do not update the cache, leaving stale contents in memory. This is likely to cause observable, incorrect behavior in the application.    The Neon access to memory region marked as Device is not a practical case in general.    	 :    The only workaround for this erratum is to avoid accessing the Device type memory with Neon store instructions. (There should be no practical case for this, anyway). However, if needed, define the region as Strongly Ordered memory, instead.    	 10700    missed. An overflow can be determined to have been missed if the unsigned value in the counter is less than the value preset into the counter. Polling can be done infrequently because of the number of cycles it requires for this check to fail. If the erratum is triggered and an overflow event is missed, the counter sample can be thrown away or the true value can be reconstructed.    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    All BTB invalidate operations, including BTB Invalidate by MVA operations, by default are implemented as a NOP in the Cortex-A8 processor. These operations can be executed as NOPs as flushing BTB entries are not required by the Cortex-A8 processor for correct functionality, and there is no additional performance penalty for an incorrect branch prediction versus a non-prediction. However, it is possible for BTB operations to be enabled by setting the IBE bit in the CP15 Auxiliary Control Register. When enabled in this fashion, BTB invalidate by MVA operations may not work as intended. Instead of writing zeros to the valid bit of the BTB entry matching the MVA provided, the CP15 âInvalidate Branch Predictor by MVAâ operation writes the value currently in the âInstruction L1 System Array Debug Register 0.â This register is not initialized at the reset time and can only be written in secure, privileged modes when CP15SDISABLE is not set.    The conditions are as follows:    1. The branch predictor is enabled (SCTLR.Z = 1)    2. The Auxiliary Control Register IBE bit is set to 1    3. An invalidate Branch predictor by MVA operation is executed 4. The Instruction L1 System Array Debug Register 0 contains a non-zero value which sets the valid bit and clears the page cross bit.    The issue is reported by ARM, erratum ID 687067, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    If the non-zero value contained in L1 System Array Debug Register 0 sets the valid bit of the BTB    entry, then the entry is not invalidated as intended.    	 :    A workaround for this erratum is, not to enable the IBE bit. ARM recommends that the IBE bit should not be enabled unless it is required for an erratum workaround.    If the IBE is to be enabled, then the L1 System Array Debug Register 0 should be initialized to a zero value. This register is for RAM array debug purposes and is not used as a part of normal functionality. It is only accessible in a privileged secure mode. Therefore, it can be statically initialized as a part of the boot code sequence. If the register is used for debug purposes, the value should be reset to zero when the debug sequence completes.    The code to initialize the L1 System Array Debug Register 0 is as follows: MOV r1, #0    MCR p15, 0, r1, c15, c1, 0 ; write instruction data 0 register MRC p15, 0, R1, c1, c0, 1 ; read Aux Ctl Register    ORR R1, R1 #(1 << 6) ; set IBE to 1    MCR p15, 0, R1, c1, c0, 1 ; write Aux Ctl Register    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    37	 10716    The memory which is Device Shared should be mapped as Normal Outer/Inner Non-Cacheable.    This is the preferred memory type for RAM memory mapped as NCB. Customer software must avoid Device memory types.    Chip Errata for the i.MX51, Rev. 5    36    Freescale Semiconductor10701    ENGcm10701    ARM: BTB invalidate by MVA operations do not work as intended when the IBE bit is enabled    		 Cortex-A8
	 NXP	 	 :    If a debug watchpoint and a precise data abort are both triggered from the same data access, the ARM Architecture specifies that the data abort should be prioritized. However, this does not occur on the Cortex-A8 and the watchpoint is taken instead.    The conditions for the erratum are as follows:12SPACEJEEHEH1. At least one debug watchpoint is programmed      2. A precise data abort occurs on the same address as the watchpoint The issue is reported by ARM, erratum ID 693270, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The implications of this erratum only affects the debug software. The data abort should take precedence over the watchpoint so that the OS has a chance to fix up paged-out memory before re-executing the instruction and presenting the debugger with the watchpointed address. Due to this erratum, this fix up does not occur and the debugger should be capable of handling a faulting address.    	 :    The workaround for this erratum is to ensure that the debugger software handles the faulting address. When the debugger is signalled a watchpoint, and identifies that the page being accessed is subjected to an MMU fault, which it would like the OS to patch up before dealing with itself, it can perform the following actions:    â¢ Disable the watchpoint    â¢ Set vector catch on the local Data Abort exception (secure or non-secure, as appropriate)    â¢ Set the PC at the watchpointed instruction and restart execution The processor restarts, re-executes the instruction and generate the MMU fault. It then fetches the instruction from the Data Abort handler and re-enter Debug state because of the Vector Catch event. The debugger can then perform the following actions:    â¢ Re-enable the watchpoint    â¢ Disable the vector catch    â¢ Set the PC at the Data Abort vector and restart execution    The processor restarts and re-executes the Data Abort vector instruction. The OS then patches up the MMU fault and attempts to re-execute the original instruction. Re-executing the instruction regenerates the Watchpoint debug event, but now the page is properly patched up.    	 10701    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    1. Category 3 defined as: Behavior that is not the originally intended behavior but should not cause any problems in applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    39	 Cortex-A8
	 NXP	 	 :    If the integer to floating point conversion operation, VCVT.f32.u32, is executed with the FPSCR    register configured for Default NaN and Flush-to-zero enabled, and the rounding mode used is RP    (Round-to-Positive infinity), it returns the incorrect result for the source operation 0xFFFF_FF01.    Specifically, it returns the result 0x0000_0000 instead of the correct result 0x4F80_0000. The erratum can occur only for this specific input value and this specific configuration of the FPSCR    register.    The conditions are as follows:    1. Default NaN is enabled (FPSCR[25] = 1âb1)    2. Flush-to-zero is enabled (FPSR[24] = 1âb1)    3. RP rounding mode is enabled (FPSR[23:22] = 2âb01)    4. A VCVT.f32.u32 instruction is executed with the source operand 0xFFFF_FF01    5. The result of the instruction is incorrect 0x0000_0000 rather than 0x4F80_0000    The issue is reported by ARM, erratum ID 715847, Category 31.     Projected ImpactJEEHEHRECONSTRUCT:    The incorrect result from the conversion operation can result in further incorrect results calculated and unexpected program behavior.    	 :    The erratum only occurs if the floating point unit is configured in run fast mode with RP rounding.    The easiest workaround is to avoid using this particular mode combination. Round-to-Nearest (RN) is a common rounding mode used, but if RP functionality is desired, it should be done without using Default NaN and/or without Flush-to-zero enabled. Default NaN signalling, Flush-to-zero, and rounding mode are all configured using bits [25:22] of the FPSCR register. This register is typically configured by the system software and should not change within an application.    	 10703    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    If a Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is performed in a memory region that is marked non-cacheable, device, or strongly ordered, it is possible for the processor to deadlock or have stale data left in the processor. This erratum occurs when the address hits the cache in a way that is not predicted by the Hash Virtual Address Buffer (HVAB), which is a cache way predictor inside the processor. This erratum can occur only for the cache maintenance operations that are performed by MVA. It does not occur for the set/way based cache maintenance operations.    The conditions are as follows:    1. A memory region is marked cacheable in a page table entry, and a cache line from that region is placed in the data cache    2. A second page table entry marks the same memory region as non-cacheable, device, or strongly ordered. This can occur by changing the memory attributes in the existing page table entry, or through an alternative page table entry that maps the same virtual to physical address but with non-cacheable, device, or strongly ordered attributes rather than cacheable 3. A Clean by MVA, Invalidate by MVA, or Clean and Invalidate by MVA cache maintenance operation is done to this address    4. The maintenance operation receives a false hit indication from the HVAB array 5. The maintenance operation receives a true hit indication from the Tag lookup, which implies that the data is present in the array, but located in a different way that is not predicted by the HVAB    6. An eviction of the dirty line has started but not finished, and the processor leaves stale data in the cache and can potentially enter a deadlock state    The issue is reported by ARM, erratum ID 728018, Category 21.     Projected ImpactJEEHEHRECONSTRUCT:    If stale data is left in the cache, the processor does not work as intended. If deadlock state occurs, it can only be exited by asserting the RESET pin on the processor.    	 :    There are two possible workarounds for this erratum.    The first workaround is to avoid performing the cache maintenance operations to non-cacheable addresses previously marked cacheable and therefore may be resident in the cache. If the address is present in the cache, it implies that the memory region is marked cacheable at some earlier point of time and explicitly changed to non-cacheable before the maintenance operation is performed. If the region type is not changed to non-cacheable before executing the maintenance operation, this erratum can be avoided. The value of changing a memory region from cacheable to non-cacheable 1. Category 2 defined as: Behavior that contravenes the specified behavior and that can limit or severely impair the intended use of specified features, but does not render the product unusable in all or the majority of applications.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    43	 10724    mode which is another condition for this erratum. Our FP support comes from a DLL provided by ARM. The ARM DLL should avoid the specific rounding mode associated with the erratum. Need to ensure RP rounding mode is not enabled.    Chip Errata for the i.MX51, Rev. 5    42    Freescale Semiconductor11205    ENGcm11205    ARM: Cache maintenance operations by MVA for a    non-cacheable memory region can result in processor deadlock 		 Cortex-A8
	 NXP	 	 :    When Neon performs a single byte load from Strongly Ordered or Device type memory with an access size of more than 8 bytes, the system AXI bus issues a burst access which is longer than 8    beats of a single byte.    However, the M4IF is capable of supporting only access with a burst length of less than or equal to 8, as indicated in the i.MX51 Multimedia Applications Processor Reference Manual ( MCIMX51).    The AXI bus access with burst length larger than 8 beat cannot complete. The results can be unpredictable and may lead to system hang. The MLEN bit indicates on an error, but it may not be possible to read it if the system hangs.    Conditions for this issue:    1. A single byte Neon load is issued with more than 8 bytes access, for example: Vld1.8 {d0,d1,d2,d3}, [Rs]!    2. The source address is Strongly Ordered or Device memory type  Projected ImpactJEEHEHRECONSTRUCT:    The Neon access to memory region marked as Strongly Ordered or Device are not usually a practical case in general. Note that there are also other reported limitations for Neon access to Device type memory such as ENGcm10716.    	 :    Several software solutions can be proposed for this issue:    â¢ Use 8-bit Neon load with access size of less or equal to 8 bytes. For example: Vld1.8 {d0-d1}, [Rs]!    This solution results in some performance degradation.    â¢ Use 16 or 32-bit Neon load instructions instead. For example: Vst1.32 {d0 â d3}, [Rs]!    The limitation of this proposal is that the source data address must be 16 or 32-bit aligned.    â¢ Define the memory region as Normal Non-Cacheable type instead of Strongly Ordered or Device memory type. In this case, need to avoid potential memory consistence issues and perform Data Synchronization Barrier (DSB) before other DMA engine access the region for read, as the Write Buffer is enabled.    	 11205    before performing the maintenance operations is that this is the only way that the ARM v7    Architecture guarantees the line is not immediately placed back into the cache due to the possibility of data speculation. However, in Cortex-A8, this degree of data speculation is never done.    Therefore, changing the memory type to non-cacheable before executing the cache maintenance operation is not required to assure that the line is not immediately placed back into the cache.    However, if there is a code compatibility with other v7 implementations (that may exhibit this level of data speculation) is a concern, then this first workaround is insufficient, and the second workaround should be used.    The second workaround is to execute the loop of cache maintenance operations twice. Execute the loop once with the memory region still marked cacheable. Then change the page table entry to make the memory region non-cacheable and execute the loop for a second time. The first loop cleans the data from the cache in the Cortex-A8. On the Cortex-A8, the second loop is redundant as it misses on all lines in the cache, but resolves the data speculation issue that can occur on a different v7 architecture implementation. The existing cache maintenance code in a dynamically paged environment can be dependent on the maintenance operation triggering a page fault to set the correct page table entry. The workaround code must independently ensure that the correct page table entry is present.    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    45	 Cortex-A8
	 NXP	 	 :    There are two muxes which select a clock source for pll1_sw_clk (which is also the source for ARM clock). One of them is a regular mux (step select mux), and the other is a synchronous mux.    The clock sources are selected by a single register (CCSR). If the pll1_sw_clk_sel bit is cleared (CCSR[2]) and the selection of the regular mux (CCSR[8:7]) is changed at the same time, then the regular mux is likely to switch first and can cause a glitch on pll1_sw_clk and hence on ARM clock and possibly other clocks as well.    Due to above, the CCSR[8:7] bits may only be modified when step_clk is no longer selected.    Therefore, CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].     DescriptionJEEHEHRECONSTRUCT:    When the emi_int1 clock in the CCM_CCGR5 register is disabled, the transaction to the CCM    passes through the INT1 channel of the EMI. However, the BRESP cannot be received by the ARM    because the clocks are already turned off. This causes the system to hang.     Projected ImpactJEEHEHRECONSTRUCT:    None, if the proposed workaround is implemented.     Projected ImpactJEEHEHRECONSTRUCT:    None. User should refrain from disabling the EMI int1 clock.    	 :    The CCSR[8:7] bits can be modified only when step_clk is no longer selected. The ARM clock source selection should be done in two accesses. The CCSR[2] must be cleared in separate register access prior to changing CCSR[8:7].     WorkaroundsJEEHEHRECONSTRUCT:    None    	 11208    ENGcm11208    CCM: ARM clock source switch limitation    	 :    No fix is scheduled. A clarification is added to the reference manual.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled. A clarification is added to the reference manual.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    47	 Cortex-A8
	 NXP	 	 :    The CSPI automatically clears the overrun error status bit when the RxFIFO is read. This bit should not be cleared. This bit is designed for the interrupt access mode, and not for the DMA access mode.    The conditions are as follows:    â¢ When the RO bit is cleared by an RxFIFO read, it does not cause a problem if no DMA accesses to the CSPI occur    â¢ When DMA is utilized, the interrupt status of RO can be lost because of uncontrolled RxFIFO    access by DMA     DescriptionJEEHEHRECONSTRUCT:    There is a synchronization mechanism at the DAP AHB access port (AHB-AP) between the clock domains connected at the SoC level (PCLKDBG and HCLK for dap_sys).The problem occurs in DAPAHBAp DapSync module when synchronizing AhbStateDbg HCLK to AhbStateSyncPCLK.    This is a 3-bit bus and each bit is being sampled twice. This method does not ensure valid data on output bus.     Projected ImpactJEEHEHRECONSTRUCT:    If the RxFIFO is read before reading the Overrun error status bit, it is possible to miss the Overrun and thus miss the data.     Projected ImpactJEEHEHRECONSTRUCT:    Invalid data may appear on the output bus.    The DapStateSync bus is also implemented in the same way and suffers from the same issue ZEffectZ: preventing reliable access of the IPs by DAP without CPU intervention.    	 :    When DMA is used for data transfers, the software can program the CSPI to only allow the interrupt generation during the overrun condition and not enable any other interrupt sources. In this way, whenever an interrupt comes from CSPI, the software can assume that it is the result of an Overrun condition.     WorkaroundsJEEHEHRECONSTRUCT:    Ensure the core is in the active mode and the debug IPs are accessed through the core.    	 08209    ENGcm08209    CSPI: Incorrectly clears the overrun status bit    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    Debug ROM address is defined wrong in DAP design (0x8000_0000 instead of 0x6000_0000).     DescriptionJEEHEHRECONSTRUCT:    Under certain conditions, the DPLL IP TOG_SEL bit is not cleared after the TOG_DIS bit is set.    This issue is random in nature.     Projected ImpactJEEHEHRECONSTRUCT:    When RVI (the debugger) connects to the i.MX51 (the target), the scan chain can not automatically be built.     Projected ImpactJEEHEHRECONSTRUCT:    The proposed workaround resolves the issue.    	 :    The scan chain must either be manually built or an external RVI script must be used.     WorkaroundsJEEHEHRECONSTRUCT:    A software delay for a fixed amount of time based on TOG_COUNT after the TOG_DIS bit is set.    	 09395    ENGcm09395    DAP: Debug ROM address in DAP design is incorrect    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When the SSB_POL is set to â1â the associated slave select does not automatically return to an inactive state after the data transaction is complete.    NOTE    This bug only applies to eCSPI modules and is not present in CSPI modules.    The BGA signals CSPI1_MOSI, CSPI1_MISO, CSPI1_SSO, CSPI1_SS1, and CSPI1_RDY are not labeled correctly. The actual source for these signals is one of the on-chip eCSPI modules.     DescriptionJEEHEHRECONSTRUCT:    According to the eCSPI specifications, when eCSPI is set to operate in the Slave mode (CHANNEL_MODE[x] = 0), the SSB_CTRL[x] bit controls the behavior of burst completion.    In the Slave mode, the SSB_CTRL bit controls the behavior of SPI burst completion as follows:    â¢ 0âSPI burst completed when (BURST_LENGTH + 1) bits are received    â¢ 1âSPI burst completed when SSB input negated    Also, in BURST_LENGTH definition, it is stated âIn the Slave mode, this field takes effect in SPI transfer only when SSCTL is cleared.â    However, the mode SSB_CTRL[x] = 1 is not functional in Slave mode. Currently, BURST_LENGTH always defines the burst length.    According to the SPI protocol, negation of SSB always causes completion of the burst. However, due to the above issue, the data is not sampled correctly in RxFIFO when    {BURST_LENGTH+1}mod32 is not equal to {actual burst length}mod32.    Therefore, setting the BURST_LENGTH parameter to a value greater than the actual burst does not resolve the issue.     Projected ImpactJEEHEHRECONSTRUCT:    This issue produces an undesired behavior in the channels configured to SSB_POL = 1. The ports operate properly when SSB_POL = 0.     Projected ImpactJEEHEHRECONSTRUCT:    Slave mode with unspecified burst length cannot be supported due to this issue. The burst length should always be specified with the BURST_LENGTH parameter and the SSB_CTRL[x] should be set to zero.    	 :    There are two workarounds, as follows:    â¢ The software solution applies to channels configured as SSB_POL = 1. After the data transaction is complete, the SS signal must be reconfigured as a GPIO. The GPIO must be programmed to a low level.    â¢ A hardware solution is to place an inverter on the SS signal and program SSB_POL = 0.     WorkaroundsJEEHEHRECONSTRUCT:    There is no workaround except for not using the SSB_CTRL[x] = 1 option in the Slave mode. The accurate burst length should always be specified using the BURST_LENGTH parameter.    	 09397    ENGcm09397    eCSPI: Slave select remains asserted after transfer is complete when the SSB POL = 1    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    There is a problem in WARM_RESET during sleep mode. The WARM_RESET flow is as follows: 1. SRC recognize WARM_RESET case (for example, RESET_IN_B)    2. SRC issues dvfs_req to EMI12SPACEJEEHEH3. SRC wait to dvfs_ack      4. If after some time the acknowledge does not arrive a counter in SRC recognizes it and SRC    issues a cold RESET. When in Sleep Mode, EMI does not get clocks and therefore results in the issue.     DescriptionJEEHEHRECONSTRUCT:    The exclusive accesses are used as a semaphore mechanism in the AXI protocol. The basic process of an exclusive access is as follows:    1. A master performs an exclusive read from an address location.    2. At some later time a master tries to complete the exclusive operation by performing an exclusive write to the same address location.    3. The exclusive write of a master is signaled as:    â Successful, if no other master has written to that location between the read and write accesses.    â Failed, if another master has written to that location between the read and write accesses.    In this case the address location is not update.    On some occasions the EMI fails to detect a write access to the location tagged by the exclusive read and does not report on failure at exclusive write. This is happens when the tagged location is accessed indirectly in the middle of a burst.    For example, assume the following sequence:    â¢ Master A tags address nn by performing exclusive read access    â¢ Master B writes to address mm    â¢ Master A tags performs exclusive write to address nn    If address nn = mm, the exclusive tag is cleared (exclusive write is not successful) - as expected.    If master B performs a burst with the first address of the burst is equal nn, the exclusive tag is also cleared as expected.    However, if master B performs a burst where the first address of the burst is not nn, but during the burst it does cross address nn, the exclusive tag is not cleared (exclusive write succeeds) - not as expected.     Projected ImpactJEEHEHRECONSTRUCT:    Any reset arriving in sleep mode even if it is supposed to be a warm reset is treated as cold reset, for example resetting all EMI registers. DDR content is preserved even though a cold reset is issued because in Sleep mode the memory is already in self refresh.     Projected ImpactJEEHEHRECONSTRUCT:    In i.MX51 based systems, only the Cortex-A8 is capable generating exclusive access.    The exclusive access of the core to non-shared memory locations are all handled internally within the Cortex-A8 (CA8) monitor and do not propagate to the EMI.    The exclusive access based semaphore mechanism between the core and other masters in the system is not utilized in practice.    In case this mechanism is still required, it can be successfully operated with non-burst access.    	 :    None.     WorkaroundsJEEHEHRECONSTRUCT:    Exclusive access to EMI works only if the tagged address is accessed directly. The access detection mechanism fails if the tagged location is written by consecutive burst access.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    55	 09421    ENGcm09421    EMI/SRC: Warm reset can not be issued in sleep mode    	 :    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    8-bit memory devices are supported by WEIM interface connecting only to one of the following three locations:    â¢ EIM_DA[7:0] pads    â¢ EIM_DA[15:8] pads    â¢ EIM_D[31:24] pads    Connection to the EIM_D[23:16] pads is not supported.    This erratum clarifies the statement in the MCIMX51 Multimedia Applications Processor Reference Manual (MCIMX51RM) that only 16-bit and 32-bit memory devices are supported by the WEIM interface.     Projected ImpactJEEHEHRECONSTRUCT:    WEIM 8-bit memory devices are supported according to above description.    	 :    None    	 09424    The issue can be avoided if the software constrains the regular write to the tagged location to use non-burst access or use and addresses corresponding to the first word in the burst.    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled. A clarification is added in the reference manual.    	 Cortex-A8
	 NXP	 	 :    There is a possibility of an extra pulse on SCLK in the EPIT, when switching between the clock sources.     DescriptionJEEHEHRECONSTRUCT:    After application of write commands, tWR clocks are required between the last written data until the precharge command to same bank. In cases where there is also an access to bank x followed by a back-to-back write access to bank y, bank x does not accept a precharge command until the data write of the second access (to bank y) is completed. According to the JEDEC standard, the precharge command to bank x should only be held until it has finished its own data and tWR.     Projected ImpactJEEHEHRECONSTRUCT:    It can result in an incorrect counter increment in the EPIT.     Projected ImpactJEEHEHRECONSTRUCT:    Due to the bug, writes to a bank are influenced by data writes to other banks. This results in minor performance degradation.    In a situation where two masters are accessing two different DDR banks and one of the masters performs a new access to a different row, a precharge sent to the first row must be performed before the master can access the new row. In that case the second master must finish its access before the precharge can be issued. This situation also can occur in the case of one master making multiple accesses one after another to two different rows. This produces a minor performance decrease, because the new access is waiting for a precharge command to be issued. Some precharge commands are delayed a few extra clocks. In cases where missed access to any of the banks occurred between the time of the last access and the access to the original bank there is no impact and this limitation does not occur.    	 :    Clock source should be changed only when the EPIT is disabled. A way to accomplish the same is as follows:    1. Disable EPITâEPITCR[0] = 0 (EN = 0), that is, disable EPIT    2. Disable EPIT outputâEPITCR[23:22] = 00 (OM = 00)    3. Disable EPIT capture interruptâEPITCR[2] = 0 (OCIEN = 0)    4. Change clock sourceâEPITCR[25:24] (CLKSRC), determines which clock source is selected for running the counter    5. Clear status registerâEPITSR[0] (OCIF), this is a write one to clear register 6. Configure EPIT to start count once enabled from load valueâEPITCR[1] = 1 (ENMOD = 1) 7. Re-enable EPIT EPITCR[0] = 1 (EN = 1), that is, enable EPIT12SPACEJEEHEH8. Reconfigure output and interrupt       WorkaroundsJEEHEHRECONSTRUCT:    None required, as the performace degradation is approximately 0.1%.    	 04773    ENGcm04773    EPIT: Possibility of additional pulse on src_clk when switching between clock sources    	 :      No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The Enhanced SDRAM General Purpose Register (ESDGPR register at address 0xBASE+0x1034) bits 19 through 31 do not return correct value on read.    The write operation works according to the specification.     DescriptionJEEHEHRECONSTRUCT:    For slow CPU read polling with WML (Water Mark Level) as 1, excessive data can be read from the card due to the presence of a flop between the buffer and the system bus. This causes the read buffer to overrun and by this halting the data transfer at both the sides and hanging the operation.     Projected ImpactJEEHEHRECONSTRUCT:    No functional impact.     Projected ImpactJEEHEHRECONSTRUCT:    CPU polling reads when WML is set to 1 can not be supported.    	 :    None.     WorkaroundsJEEHEHRECONSTRUCT:    Do not set WML to 1. The eSDHC does not allow WML as 1 for CPU polling reads. This scenario is unusual even for single access. A read when WML is set to 2 can still be split into two successive reads.    	 08971    ENGcm08971    eSDCTL: ESDGPR register bits 19 to 31 are not readable    	 :    No fix scheduled. The reference manual is updated accordingly.    Chip Errata for the i.MX51, Rev. 5    60    Freescale Semiconductor06545    ENGcm06545    eSDHC: Buffer overrun prevents CPU polling reads when WML    is set as 1     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    After stopping at a block gap during a write operation, when the transfer is resumed, the data transfer can not complete and the transfer complete status bit is not set.     DescriptionJEEHEHRECONSTRUCT:    When eSDHC attempts to stop the transmission by sending CMD12, the clock does not always stop even though the data transfer is aborted.     Projected ImpactJEEHEHRECONSTRUCT:    The eSDHC can not finish write operations after encountering a block gap stop.     Projected ImpactJEEHEHRECONSTRUCT:    The result is communication with the SD/MMC card is lost    	 :    Do not use stop-at-block-gap during write operations.     WorkaroundsJEEHEHRECONSTRUCT:    After sending CMD12 to abort the data transfer, poll the card clock status to see if it is stopped. If it is stopped, write to the XFER_TYPE register to issue the CMD12 as normal, and make several accesses (write or read, depending on the current transfer direction) to the buffer until the clock is restored.    	 09111    ENGcm09111    eSDHC: Cannot finish a write operation after a block gap stop 	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The eSDHC does not support infinite data transfers, if the Block Count register is set to one, even when block count enable is not set.     DescriptionJEEHEHRECONSTRUCT:    When HS-I2C is used with SDMA (for example with a camera sensor) along with a read/write to/from an SD card, the eSDHC does not appear to forward the interrupt event to the TZIC    (Cortexâs interrupt controller).     Projected ImpactJEEHEHRECONSTRUCT:    The eSDHC does not support infinite Block Transfer Mode.    There is no limitation for single block transfers (with Multi/Single Block Select set to zero, Block Count Enable set to zero, and Block Count set to one).     Projected ImpactJEEHEHRECONSTRUCT:    The software ISR is never signaled, and as a result the read/write to the SD card causes it to hang.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    	 :    The following software workaround can be used instead of the infinite block mode: 1. Set BCEN bit to one and enable block count    2. Set the BLKCNT to the maximum value in Block Attributes Register (BLKATTR) (0xFFFF    for 65535 blocks)     WorkaroundsJEEHEHRECONSTRUCT:    Do not use SDMA with the HS-I2C.    	 09107    ENGcm09107    eSDHC: Does not support Infinite Block Transfer Mode    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    After DMA read operation, if hclk is automatically gated off, the DINT status can not be cleared by software.     DescriptionJEEHEHRECONSTRUCT:    Corrupted data is read if the buffer RAM is read until it is empty and the buffer register only contains one word. At this time, the buffer ready is still active when the Watermark level is 1    (RD_WML register bits is 1 or [{(BLK_SIZE + 3) Ã· 4}% RD_WML = 1).     Projected ImpactJEEHEHRECONSTRUCT:    Can not clear bit     Projected ImpactJEEHEHRECONSTRUCT:    Corrupted data is read from a buffer when the buffer RAM is read.    	 :    Set HCKEN bit before starting DMA read operation, to disable hclk auto-gating feature; after the DINT and TC bit received when read operation is done, clear HCKEN bit to re-enable the hclk auto-gating feature.     WorkaroundsJEEHEHRECONSTRUCT:    Do not use RD_WML and [{(BLK_SIZE + 3) Ã· 4}% RD_WML = 1) configuration for read operations.    	 09403    ENGcm09403    eSDHC: Software can not clear DMA interrupt status bit after read operation    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    A glitch may occur on the SDHC card clock when the software sets the RSTA bit (software reset) in the system control register. It can also be generated by setting the clock divider value. The glitch produced can cause the external card to switch to an unknown state. The occurrence is not deterministic.     DescriptionJEEHEHRECONSTRUCT:    A possible data corruption or incorrect bus transactions on the internal AHB bus, causing possible system corruption or a stall, can occur under the combination of the following conditions: 1. ADMA2 or ADMA1 type descriptor12SPACEJEEHEH2. TRANS descriptor with END flag      3. Data length is less than or equal to 4 bytes (the length field of the corresponding descriptor is set to 1, 2, 3, or 4) and the ADMA transfers one 32-bit word on the bus 4. Block Count Enable mode     Projected ImpactJEEHEHRECONSTRUCT:    Potential disruption of SD card operation.     Projected ImpactJEEHEHRECONSTRUCT:    Data corruption or incorrect bus transactions on the internal AHB bus, causing possible system corruption or a stall.    	 :    A simple workaround is to disable the SD card clock before the software reset, and enable it when the module resumes the normal operation. The Host and the SD card are in a master-slave relationship. The Host provides clock and control transfer across the interface. Therefore, any existing operation is discarded when the Host controller is reset.    The recommended flow is as follows:    1. Software disable bit[3] of the System Control register    2. Trigger software reset and/or set clock divider    3. Check bit[3] of the Present State Register for stable clock 4. Enable bit[3] of the System Control register.    Using the above method, the eSDHC cannot send command or transfer data when there is a glitch in the clock line, and the glitch does not cause any issue.     WorkaroundsJEEHEHRECONSTRUCT:    The software should avoid setting ADMA type last descriptor (TRANS descriptor with END flag) to data length less than or equal to 4 bytes. In ADMA1 mode, if needed, a last NOP descriptor can be appended to the descriptors list. In ADMA2 mode this workaround is not feasible due to    ENGcm11161.    	 10407    ENGcm10407    eSDHC: Glitch is generated on card clock with software reset or clock divider change    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    Issue in eSDHC ADMA mode operation. The eSDHC read transfer is not completed when block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2. The eSDHC DMA controller is stuck waiting for the TC bit in the interrupt status register.    The following examples trigger this issue:    1. Working with an SD card while setting ADMA1 mode in the eSDHC    2. Performing partial block read12SPACEJEEHEH3. Writing one block of length 0x200      4. Reading two blocks of length 0x22 each. Reading from the address where the write operation is performed. Start address is 0x512 aligned. Watermark is set as one word during read. This read is performed using only one ADMA1 descriptor in which the total size of the transfer is programmed as 0x44 (2 blocks of 0x22).     Projected ImpactJEEHEHRECONSTRUCT:    The issue exists only when the block size is not a multiple of 4 in transfer mode ADMA1 or ADMA2.    	 :    When the ADMA1 or ADMA2 mode is used and the block size is not a multiple of 4, the software should set the block size to:    4    block size    â ------------    4    In other words, the block size should be rounded to the next multiple of 4 bytes. In case of write, the software should add the corresponding number of bytes at each block end, before the write is initialized. In case of read, the software should remove the dummy bytes after the read is completed.    For example, if the original block length is 22 bytes, and there are several blocks to transfer, the software should set the block size to 24. The following data is written/stored in the external memory:    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    4 Bytes valid data    2 Bytes valid data + 2 Byte dummy data    Chip Errata for the i.MX51, Rev. 5    70    Freescale Semiconductor11104    In this example, 48 (24 x 2) bytes are transferred instead of 44 bytes. The software should remove the dummy data.    Alternatively, the PIO mode can be used if the block size is non-4 byte aligned.    	 11104    ENGcm11104    eSDHCv2: ADMA transfer error when the block size is not a multiple of four    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    ADMA2 mode in the eSDHC is used for transfers to/from the SD card. There are three types of ADMA2 descriptors: TRANS, LINK or NOP. The eSDHC has a problem when the last descriptor (which has the End bit '1') is a LINK descriptor or a NOP descriptor.    In this case, the eSDHC completes the transfers associated with this descriptor set, whereas it does not even start the transfers associated with the new data command. For example, if a WRITE    transfer operation is performed on the card using ADMA2, and the last descriptor of the WRITE    descriptor set is a LINK descriptor, then the WRITE is successfully finished. Now, if a READ    transfer is programmed from the SD card using ADMA2, then this transfer does not go through.     DescriptionJEEHEHRECONSTRUCT:    An issue is identified when interfacing the SDIO card. There is a case where an SDIO interrupt from the card is not recognized by the hardware, resulting in a hang.    If the SDIO card lowers the DAT1 line (which indicates an interrupt) when the SDIO interrupt is disabled in the eSDHC registers (that is, CINTEN bits in IRQSTATEN and IRQSIGEN are set to zero), then, after the SDIO interrupt is enabled (by setting the CINTEN bits in IRQSTATEN and IRQSIGEN registers), the eSDHC does not sense that the DAT1 line is low. Therefore, it fails to set the CINT interrupt in IRQSTAT even if DAT1 is low.    Generally, CINTEN bit is disabled in interrupt service.    The SDIO interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear the CINT interrupt in IRQSTAT.    3. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    If a new SDIO interrupt from the card occurs between step 2 and step 3, the eSDHC skips it.     Projected ImpactJEEHEHRECONSTRUCT:    Limitation for configuring the last descriptor as LINK or NOP.     Projected ImpactJEEHEHRECONSTRUCT:    The issue is relevant only for the SDIO card interrupt usage.    	 :    Software workaround is to always program TRANS descriptor as the last descriptor.     WorkaroundsJEEHEHRECONSTRUCT:    The workaround interrupt service steps are as follows:    1. Clear CINTEN bit in IRQSTATEN and IRQSIGEN.    2. Reset the interrupt factors in the SDIO card and write 1 to clear CINT interrupt in IRQSTAT.    3. Clear and then set D3CD bit in the PROCTL register. Clearing D3CD bit sets the reverse signal of DAT1 to low, even if DAT1 is low. After D3CD bit is re-enabled, the eSDHC can catch the posedge of the reversed DAT1 signal, if the DAT1 line is still low.    4. Re-enable CINTEN bit in IRQSTATEN and IRQSIGEN.    	 11161    ENGcm11161    eSDHCv2: Problem when ADMA2 last descriptor is LINK or NOP    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    ENGcm11403    eSDHCv2: Erroneous CMD CRC error and CMD Index error may    occur on sending new CMD during data transfer    When sending new, non data CMD during data transfer between the eSDHC and EMMC card, the module may return an erroneous CMD CRC error and CMD Index error. This occurs when the CMD response has arrived at the moment the FIFO clock is stopped. The following bits after the start bit of the response are wrongly interpreted as index, generating the CRC and Index errors.    The data transfer itself is not impacted.    The rate of occurrence of the issue is very small, as there is a need for the following combination of conditions to occur at the same cycle:    â¢ The FIFO clock is stopped due to FIFO full or FIFO empty    â¢ The CMD response start bit is received     DescriptionJEEHEHRECONSTRUCT:    The FEC only creates wrap burst accesses upon data access (non-buffer descriptor). The NFC    under EMIv2 cannot handle such accesses from the MAX (M2) input port.     Projected ImpactJEEHEHRECONSTRUCT:    Sending new, non data CMD during data transfer between eSDHC and EMMC card may not succeed with indication on CRC and Index errors.     Projected ImpactJEEHEHRECONSTRUCT:    The FEC cannot use the NFC to access memory.    	 :    The recommendation is to not set FIFO watermark level to a too small value in order to reduce frequency of clock pauses.    The problem is identified by receiving the CMD CRC error and CMD Index error. Once this issue occurs, one can send the same CMD again until operation is successful.     WorkaroundsJEEHEHRECONSTRUCT:    The FEC should use the DDR for its buffer.    	 11403    	 :    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    74    Freescale Semiconductor04798    ENGcm04798    FEC: Fast Ethernet Controller (FEC) accesses to NAND Flash Controller (NFC) does not work     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    There is a possibility of an extra pulse on SCLK in the GPT when switching between the clock sources.     DescriptionJEEHEHRECONSTRUCT:    Due to an issue with ALU precision, several features of the GPU2D hardware incur accumulation of errors, which can result in visual artifacts. This can affect gradient rendering for certain step values and image transformation for larger render target sizes.     Projected ImpactJEEHEHRECONSTRUCT:    The bug can produce an incorrect counter increment in the GPT when switching between the clock sources.     Projected ImpactJEEHEHRECONSTRUCT:    The issue can cause artifacts in gradient rendering for certain step values and image transformation for larger render target sizes.    	 :    Changing the clock source should only be done when the GPT is disabled. A way to accomplished this is as follows:    1. Disable GPTâWrite 1'b0 to EN bit of GPTCR    2. Disable interruptsâWrite 6'b000000 in Bits [5:0] of GPTIR    3. Configure Output Mode to unconnected/ disconnectedâWrite zeros in OM3, OM2, OM1 in GPTCR    4. Disable Input Capture ModesâWrite zeros in IM1,IM2 in GPTCR12SPACEJEEHEH5. Change clock source CLKSRC in GPTCR      6. Clear Status registerâWrite 003F in GPTSR12SPACEJEEHEH7. Set ENMOD in GPTCR      8. ENABLE GPTâWrite 1'b1 to EN bit of GPTCR. The GPTSR should not be read immediately after changing the clock source (a wait of at least one SCLK is required).     WorkaroundsJEEHEHRECONSTRUCT:    This issue will be fixed in the software driver libraries resolving the visual artifacts. There is no customer-side workaround for earlier driver versions.    	 07200    ENGcm07200    GPT: Possibility of additional pulse on src_clk when switching between clock sources    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No hardware fix scheduled. This issue will be addressed in the software drivers in the next driver release.    	 Cortex-A8
	 NXP	 	 :    When HS-I2C is configured for 7-bit address master mode operation, and the slave does not acknowledge the address, the HS-I2C starts generating high frequency clocks on the SCL line. This bug is only applicable to certain addresses, as follows:    00_00001âThis combination is reserved for CBUS operation.    01_00001âIssue address    10_00001âIssue address    11_00001â Issue address    There is no issue with other addresses.     DescriptionJEEHEHRECONSTRUCT:    When writing the WA(0x15) in the FIFO (HITDR), the bit TDE remains asserted, the write in the FIFO is not detected.     Projected ImpactJEEHEHRECONSTRUCT:    The impact of this bug is minor (loss of 3 addresses out of 127) and it is unlikely that amount of devices that are attached to the HS-I2C bus in an actual application reaches that number.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard 2    I C modules.     Projected ImpactJEEHEHRECONSTRUCT:    During data transfers the device address is sent twice (instead of the address + WA). but, if the FIFO    is written a second time just after the first FIFO write, the TDE is cleared and the read works as expected.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    	 :    The workaround is to ensure that the above addresses are not used while configuring the hardware on the board.     WorkaroundsJEEHEHRECONSTRUCT:    There are two software workarounds, as follows:    â¢ Replace the simple write in FIFO register with the following code: while(MEM_GET_BITS16(HSI2C_HISR, BIT1)!=0) {MEM_WRITE16(HSI2C_HITDR, *data)    â¢ Generate the start signal only after filling both HIMADR and HITDR with data. This workaround is under review.    	 09194    ENGcm09194    HS-I2C: Address Issue    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    In HS-I2C, the purpose of the HICR[AUTO_RSTA] bit is to generate a repeat start when NOACK    is received in Master mode Tx operation with FIFO enabled or FIFO and DMA enabled mode.    When the HICR[AUTO_RSTA] (AUTO repeat start generation) bit is set and NOACK is received in address phase. The HS-I2C is not generating the repeat start.     DescriptionJEEHEHRECONSTRUCT:    If the slave device uses clock stretching to delay the HS-I2C controller after every byte is sent, the i.MX51 waits for the clock to go high between bytes but does not wait between the final byte and the STOP signal. Because of this, no valid STOP signal is seen on the bus.    In other words, the use of HIRDCR automatically generates a stop condition on the data bus (HIRDCR[RDC_RSTA] = 0) after the final byte of data is received regardless of whether the slave is in a condition to accept it. If the slave device holds the clock low (clock stretch) after the final byte of data is transferred, the slave never receives the immediate STOP condition from the i.MX51.     Projected ImpactJEEHEHRECONSTRUCT:    The auto-restart feature does not work.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     Projected ImpactJEEHEHRECONSTRUCT:    TBD    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    	 :    Use the HICR[RSTA] bit for repeat start. There is a NOACK status (HISR[RXAK]) bit. The corresponding interrupt should always be enabled and AUTO_RSTA should be disabled.     WorkaroundsJEEHEHRECONSTRUCT:    The workaround is to use the GPIO alternate input to the I2C1_CLK pad to detect when the external device has released the clock and only after sending the STOP signal.    	 07892    ENGcm07892    HS-I2C: Auto Restart not working    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The HICR[HIIEN] bit that should operate as a interrupt enable bit, does not mask the interrupts.     DescriptionJEEHEHRECONSTRUCT:    Read after write from an external device fails randomly     Projected ImpactJEEHEHRECONSTRUCT:    The HICR[HIIEN] bit does not work.     Projected ImpactJEEHEHRECONSTRUCT:    The first data is not written before START condition therefore the Read after write from an external device fails randomly    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    	 :    Use the individual interrupt mask bits of the status register in the Interrupt Mask Register (HIIMR) or disable them in TZIC.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     WorkaroundsJEEHEHRECONSTRUCT:    See â7-Bit/10-Bit Address Master Transmitâ section of the âHigh Speed Inter IC (HS_I2C)â    chapter in the i.MX51 Applications Processor Reference Manual (MCIMX51RM). Item 6 in the section reads: âWrite one Byte of DATA to be transmitted to the Tx Data Register (HITDR).â    Before the Start condition, data must be written to HITDR and the second data has to be written to HITDR after the ADDRESS phase of Byte Transfer Done (BTD). Going forward, Data must be written to the HITDR in advance before the BTD of previous data has been issued.    	 07894    ENGcm07894    HS-I2C: HICR[HIIEN] bit does not mask the interrupts    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    In the HS-I2C module the HISR[RDC_ZERO] status bit is not cleared when HIRDCR[RDC_RSTA] is not set.     DescriptionJEEHEHRECONSTRUCT:    When 9 is written to the HIFSFDR, the ipg_hsi2c_clk should be divided by 72, but the output is incorrect.     Projected ImpactJEEHEHRECONSTRUCT:    The HS-I2C Interrupt may occur unexpectedly.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     Projected ImpactJEEHEHRECONSTRUCT:    Specifically when the ipg_hsi2c_clk = 26/3 MHz the expected output is 120 kHz (approximately) where as the actual output is approximately 103.3 kHz.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.    	 :    There are two software workarounds, as follows:    1. Use the mask bit to clear the HS-I2C interrupt and enable it again after generating the start (MSTA bit setting) condition when required.    2. Avoid this issue by eliminating the use of the RDC and TDC counters.     WorkaroundsJEEHEHRECONSTRUCT:    The I2C protocol works with range of frequencies and an accurate frequency is not a requirement.    In I2C protocol FS mode, bit by bit clock stretching by slave device is possible.    If a very accurate frequency is required, software may need to execute the following steps: 1. Configure HIFSFDR according to the SCL clock frequency required.    2. Check if it works.    3. If it does not work, configure for a lower division frequency until it works.    	 07886    ENGcm07886    HS-I2C: TDC_ZERO and RDC_ZERO status bits are not cleared 	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The HS-I2C module does not operate in high speed mode.     DescriptionJEEHEHRECONSTRUCT:    If the alpha value is set to 0xFF for IC (Image Converter) combining, combining result is incorrect.    This is relevant to the IC module only.     Projected ImpactJEEHEHRECONSTRUCT:    The high speed mode of the HS-I2C module can not be used.     Projected ImpactJEEHEHRECONSTRUCT:    Very minor difference in result because we do not use full masking visible only in very special case.    	 :    None.    NOTE    This erratum only applies to the HS-I2C module and not to the two standard I2C modules.     WorkaroundsJEEHEHRECONSTRUCT:    The workaround is to use any value between 0x0 to 0xFE and to avoid the usage of 0xFF.    	 09113    ENGcm09113    HS-I2C: High Speed mode of HS-I2C does not work    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    When the IPU frequency change is configured to End-of-Line or End-of-Frame operation, the frequency change ready ack is stuck due to and early EMI ACK to the DVFS frequency change request (EMI stops transfers until the frequency changes). When the IPU frequency change is configured to âpixel clockâ, the ACK from the IPU to the CCM is granted rapidly (before the EMI can stop the transfer) and system functions correctly at the new DVFS frequency. In order to support End-of-Line or End-of-Frame configuration, the CCM must send the DVFS frequency change request to the EMI after all the ACKs are received from other masters (IPU, HSC).     DescriptionJEEHEHRECONSTRUCT:    This issue applies to the Image Processing Unit's Pre-processing and Post-processing. When the flow of CSC1 + Combining + CSC2 is activated in the Image Convertor and the input to CSC1 is in YUV (4:2:0 or 4:2:2) format, then every second pixel in the output is black resulting in 50%    black columns on the screen.    The issue is observed for CSC1 outputs of YUV or RGB.    The issue disappears if CSC2 is off. In addition, the issue disappears if the input to CSC1 is RGB    (8:8:8 or 5:6:5).    The combined picture is not impacted by black pixels     Projected ImpactJEEHEHRECONSTRUCT:    There is no support for End-of-Line and End-of-Frame IPU frequency changes when using DVFS.     Projected ImpactJEEHEHRECONSTRUCT:    Two CSC (color space conversions) can not be performed in the IC (Image Converter) if the input to the first CSC is in YUV format.    	 :    Configure IPU for DVFS changes only on pixel boundary.     WorkaroundsJEEHEHRECONSTRUCT:    The CSC function in the IC requires 3 cycles per pixels. The CSC function in the DP (Display Processor) requires one cycle per pixel.    Due to the very high load on the IC module when CSC2 is used, it was never planned to use CSC2.    If a second CSC is required, the DP should be used instead.    In a use case where CSC has to be done twice, the user should perform the first CSC in the IC and the second one in the DP.    	 09131    ENGcm09131    IPU/CCM: Configuration for DVFS_PER operation    (pixel/EOL/EOF)    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The problem can happen under the following conditions:    1. Two simultaneous tasks are running in the IC.    2. Both tasks perform combining.    3. Local alpha is used.    The IC reads a set of 4 pixels and 4 alpha values. The IC has a 2 bit pointer that points to the current alpha value to be used (out of 4).    Due to an error during task switching thereâs a situation where the alpha pointer is not updated correctly. As a result the pointer of task1 is used for task2. Hence, a wrong alpha value is used.    The IPU overcomes the problem on the following task switching.     DescriptionJEEHEHRECONSTRUCT:    The registers setup described in Table 4 is required for proper display and sensor interfaces operation. This configuration bypasses the unsupported HSC module (removed from specification) and configures the system for legacy mode operation.    Table 4 shows bypass mode registers setup.    Table 4. Bypass Mode Registers Setup    Required    Register    Address    Access    Reset Value    Bypass Value    MCG Control Designation Register (MCD)    0x83FD_C000    R/W    0x0000_0000    0x0000_0F00    MCG CCM Control Register (MCCMC)    0x83FD_C0D8    R/W    0x0000_0000    0x0000_000C    MXT Configuration Register (MXT_CONF)    0x83FD_C800    R/W    0x0000_0000    0xF003_008B     Projected ImpactJEEHEHRECONSTRUCT:    The actual visual impact is very small as the problem may happen sporadically and the IPU    overcomes it on the next task switching. The problem affects the correctness of the data only so wrong data can be displayed for a short period of time.     Projected ImpactJEEHEHRECONSTRUCT:    None.    	 :    1. Use global alpha for combining.    2. Perform one of the combining tasks in the DP.    3. Run the flows through the IC in consecutive order.     WorkaroundsJEEHEHRECONSTRUCT:    Setup the registers accordingly.    	 10295    ENGcm10295    IPU: Error while combining in IC when two simultaneous tasks are involved    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    If the step-by-step mechanism is enabled while the M4IF is operational (there are transactions in the internal buffers), there can be a situation where one or more of the arbitrations' AXI protocol is violated in the âwrite address channelâ or âread address channel.â     DescriptionJEEHEHRECONSTRUCT:    Enabling the power-saving mode in M4IF before configuring the DDR module causes deadlock during DDR configuration.     Projected ImpactJEEHEHRECONSTRUCT:    The M4IF violates the AXI protocol and crashes if step-by-step is set ON or OFF during the run-time.     Projected ImpactJEEHEHRECONSTRUCT:    None    	 :    Before entering the step-by-step mode, configure the EMI to the software LPMD and then read the LPACK register. The LPACK register indicates that the M4IF is idle and the step-by-step can be enabled. The difference between the regular procedure of LPMD and this procedure is that the EMI clocks remain ON.     WorkaroundsJEEHEHRECONSTRUCT:    Initialization must be performed first, followed by enabling the M4IF power saving.    	 07168    ENGcm07168    M4IF: Step-by-step mechanism violates AXI protocol    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The FPST (Fast arbitration Power Saving Timer) control bit field in the M4IF MCR1 register defines the timer value of the power saving mode of the fast arbitration. The value in this field represents clock cycles of the fast memory arbitration clock multiplied by 8.    The minimum value for FPST in MCR1 reg is defined as follows: The minimum time interval between LPMD/DVFS requests requires that two refreshes be sent to memory during that interval. So the minimum time is tXSR + tRFC, which is the time from exit self-refresh to first refresh command and the time from first refresh to second refresh.     DescriptionJEEHEHRECONSTRUCT:    Reading the M4IF status registers of an inactive AXI master or slave ports stalls the entire IC    system. This occurs when a specific master or slave clock is not provided to the M4IF, but the ARM/JTAG tries to read that masterâs status bits.    When the master or slave clock is not active, the read request fails to propagate the status bits that go through synchronization (IPG_CLK to *_clk), acknowledge never comes back, and the entire chipâs IP bus is stuck.    Some M4IF status registers bundle the status of several masters or slaves. If one of the masters or slaves is inactive, accessing such a register stalls the entire system, even if the user is interested only in the status of other active ports.    Table 5 lists the impacted registers and the clock signals that should be active for read access to succeed.    Table 5. List of Impacted Registers    Registers    Required Master/Slave to be Active for Read Action to Succeed MDCR    fast, slow, int1, int2    WMIS0    fast    WMIS1    fast    MLEN    m0, m1, m2, m3, m4, m5, m6, m7, fast, slow, int1, int2    FDPS    fast    SSRL0    fast    SSRL1    fast    SSRH0    fast    SSRH1    fast    MDSR0    The arbitration domain selected by MDCR/RARB    MDSR1    The arbitration domain selected by MDCR/RARB    MDSR2    The arbitration domain selected by MDCR/RARB    MDSR3    The arbitration domain selected by MDCR/RARB    MDSR4    The arbitration domain selected by MDCR/RARB    MDSR5    The arbitration domain selected by MDCR/RARB    MDSR6    The arbitration domain selected by MDCR/RARB    MDSR7    The arbitration domain selected by MDCR/RARB    MDSR8    The arbitration domain selected by MDCR/RARB    SBS0    The arbitration domain selected by MDCR/RARB    SBS1    The arbitration domain selected by MDCR/RARB    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    95 Projected ImpactJEEHEHRECONSTRUCT:    None.    	 :    M4IF and DDR control programing must meet this restriction:    tXSR (DDR parameter) + tRFC (DDR parameter) < 8 Ã FPST (M4IF parameter) 	 10709    ENGcm10709    M4IF: Power-saving restriction on FPST due to DDR    	 :    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    When performing auto_erase/auto_program/copy_back operation, NFC is supposed to detect the deassertion of RB_B signal, and then send a status-read command in order to capture the status of the last operation, and thus reducing software overhead. In ~50% of the cases, the NFC does not send this status-read command.     Projected ImpactJEEHEHRECONSTRUCT:    No impact on regular functionality. The status registers are usually accessed for debugging purposes.     Projected ImpactJEEHEHRECONSTRUCT:    Status is not correct.    	 :    Enable the relevant M4IF masters or slaves clocks for the status read.     WorkaroundsJEEHEHRECONSTRUCT:    The software must launch a status-read command at the end of auto_erase, auto_prog or copy_back operations.    	 11226    Table 5. List of Impacted Registers (continued)    Registers    Required Master/Slave to be Active for Read Action to Succeed PSM0    m0,m1    PSM1    m2,m3    PSM2    m4,m5    PSM3    m6,m7    MDCR    fast, slow, int1, int2    MCR0    fast, slow, int1, int2    	 :    No fix scheduled    Chip Errata for the i.MX51, Rev. 5    96    Freescale Semiconductor09044    ENGcm09044    NFC: Auto_erase/auto_program does not latch status correctly  Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    When ECC_MODE = 1 the 8-sym error detection and correction does not work with 512 byte main area Ã16 NAND Flash.     DescriptionJEEHEHRECONSTRUCT:    The copy back feature of the NFC module does not work as expected. When trying to copy a page from source address to destination address, the destination address is always the successive page of the source address.     Projected ImpactJEEHEHRECONSTRUCT:    The 8-sym ECC mode does not work with Ã16 bus width NAND. This mode works with Ã8 bus width NAND. This restricts 8-sym ECC operation to 8-bit NAND devices.     Projected ImpactJEEHEHRECONSTRUCT:    The copy back cannot be done to an address that is not successive to the source address.    	 :    None     WorkaroundsJEEHEHRECONSTRUCT:    There are two options:    â¢ Perform the copy back through Atomic operations    â¢ Instead of copy back, perform a read operation followed by a write operation Both options affect the overall performance.    	 09619    ENGcm09619    NFC: 8-Sym ECC mode does not work with 512 byte page x16    bus NAND Flash    	 :    No fix scheduled. The reference manual is updated accordingly.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    NFC offers a block-write-protect feature in which only a range of pre-defined blocks can be modified. This range of blocks can be set to UNLOCK (blocks that can be modified), LOCK    (blocks that cannot be modified) or LOCK_TIGHT (blocks that cannot be modified and the range cannot be changed).    Though switching to LOCK_TIGHT mode, the range of blocks can still be modified.     DescriptionJEEHEHRECONSTRUCT:    NFC offers a block-write-protect mechanism. Only a configurable range of NAND blocks can be modified. Any erase/program operations on the blocks outside this range should be blocked by NFC. This mechanism does not work in automatic program and in automatic erase.     Projected ImpactJEEHEHRECONSTRUCT:    Lock cannot be trusted to prevent data from being overwritten. As the software does not use this feature (both WinCE and LINUX), there is no impact.     Projected ImpactJEEHEHRECONSTRUCT:    As there is no workaround for this bug, the write protect mechanism cannot be used.    	 :    As there is no difference between LOCK and LOCK_TIGHT modes, the software should not use LOCK_TIGHT mode.     WorkaroundsJEEHEHRECONSTRUCT:    It should be handled in the software, as it is done now for the Windows and Linux drivers.    	 09135    ENGcm09135    NFC: Block write-protect does not support lock-tight    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When working with addr_op = 01, and trying to perform a copy-back operation, the NFC ignores the destination address configured, and copies the page to âsource addressâ +1. Additionally, the following automatic operation is carried out from address_register1 instead of address_register0.     DescriptionJEEHEHRECONSTRUCT:    The software reset (setting the NFC_RST bit in NFC and then sending reset command 0xFF to NAND Flash) does not work correctly under the following conditions:    â¢ Reset between the read operations    â¢ With atomic program operation, the RESET command is not being issued    â¢ Auto program operationâIf reset occurs after writing data to the NFC and before the write confirm command, the CACK bit is not set after setting CREQ     Projected ImpactJEEHEHRECONSTRUCT:    Automatic operation is carried out from address_register1 instead of address_register0.    Workaround:    If the system requires to work in addr_op = 01, switch to addr_op = 11, before the copy-back operation, and switch back after the copy-back operation is complete.     Projected ImpactJEEHEHRECONSTRUCT:    The software reset does not work consistently, but the failure conditions are not common in real world applications.    	 :    Do not to apply software reset for the above conditions.    	 09400    ENGcm09400    NFC: Copy-back does not work properly when addr_op = 01    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    After automatic Program operation the NFC is expected to perform a status read and store the status in STATUS_SUM register. With RBB_MODE = 1 (that is, NFC waiting using BSY_B signal), the status read does not occur at the end of the Program/CopyBack0 and CopyBack1 operations.     DescriptionJEEHEHRECONSTRUCT:    When a warm reset is issued, all the NFC registers should not be reset. This is done to enable a quick return to operation after the warm reset occurs. But when a warm reset is asserted to the NFC, the unlock registers are also reset. Therefore, the commands are not executed after warm reset.     Projected ImpactJEEHEHRECONSTRUCT:    The status is not correct.     Projected ImpactJEEHEHRECONSTRUCT:    Commands are not executed after warm reset. Workaround has minor performance impact.    	 :    Workaround for this erratum:    â¢ In the Automatic mode, use RBB_MODE = 0    â¢ If RBB_MODE = 1 is to be used, then after the Automatic program, Automatic CopyBack0 and Automatic CopyBack1 operations, Status read should be done explicitly.     WorkaroundsJEEHEHRECONSTRUCT:    After a warm reset, the user should unlock the unlock registers of the NFC. This allows the NFC    to start working as expected. Unlocking the registers cause a minor delay until the NFC is ready to work.    	 08208    ENGcm08208    NFC: Status read does not occur at the end of the program, with RBB_MODE = 1    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The NFC should issue a read status command and move to the next operation only when the status is ready (status = 0xE0) but the NFC uses the ready/busy signal instead. For example, in automatic program operation, the NFC should perform a read status loop until the status is ready and only then assert the interrupt. But the NFC asserts the interrupt when the ready/busy signal returns to 1    (ready) while the read status is still busy.     DescriptionJEEHEHRECONSTRUCT:    When working in symmetric mode with a clock ratio 1:2, and using a 16-bit Flash bus width, the NFC reads data and organizes it using a shift in the internal RAM in such a way that the last 16 bits of the data block being transferred are not written to the memory.     Projected ImpactJEEHEHRECONSTRUCT:    When RBB_MODE = 0, the user can not tell if the device is busy or not. Automatic operations fail.    Also, the system can hang.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data may be read.    	 :    Connect the ready/busy signal from the Flash to the i.MX51 and program RBB_MODE = 1.    However, using this workaround restricts the number of CS supported to 4 instead of 8.     WorkaroundsJEEHEHRECONSTRUCT:    Avoid combining the following parameters/conditions:    â¢ 16-bit flash bus width    â¢ Symmetric mode    â¢ 1:2 clock-ratio    	 09970    ENGcm09970    NFC: NFC does not work properly when RBB_MODE = 0 (read    status)    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    The NFC does not issue DMA read request (dma_rd_req) when the page size is 1/2 Kbyte (PS = 00) and in SDMA mode (NO_SDMA = 0). It works normally when using other page sizes.     DescriptionJEEHEHRECONSTRUCT:    When the NFC is configured to addr_op = 1 or 3    â¢ If num_of_devices = 0â1, then the LSB of the page/blocks address section of the addr_group bits is not used for address generation.    â¢ If num_of_devices = 2â3, then the 2 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.    â¢ If num_of_devices = 4â7, then the 3 LSB's of the page/blocks address section of the addr_group bits is not used for address generation.     Projected ImpactJEEHEHRECONSTRUCT:    Data can not be read by the SDMA     Projected ImpactJEEHEHRECONSTRUCT:    Working in these addr_op modes has some limitations on the size of the devices (depending on the number of devices). Such large devices do not exist at this time. This can be an issue when using larger devices that may become available in future.    NOTE    addr_op = 0 works as designed with any combination.    	 :    Do not use the combination of parameters/conditions described above.     WorkaroundsJEEHEHRECONSTRUCT:    Do not use the combination of parameters/modes described above.    	 10033    ENGcm10033    NFC: Does not Issue DMA read request using 1/2 Kbyte Page in SDMA mode    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When the NFC_CONFIGURATION1[NFC_RST] bit is asserted, the state machines of the NFC is supposed to be initialized, but the state machines of the ECC encoder/decoder do not return to IDLE mode. Therefore the operation that is executed right after NFC_RST operation incorrectly indicates an uncorrectable ECC error.     DescriptionJEEHEHRECONSTRUCT:    When working in asymmetric mode, using a clock ratio of (flash_clock:axi_clock) 1:2 and a Flash bus width of 16-bits, the NFC reads data from the NAND Flash it sometimes repeats the same address of the internal RAM and therefore writes to the same addresses, overwriting data instead of incrementing the write pointer.     Projected ImpactJEEHEHRECONSTRUCT:    The program/read operations execute correctly, but the NFC indicates uncorrectable ECC errors in the ECC_STATUS_RESULT register.     Projected ImpactJEEHEHRECONSTRUCT:    Corrupted/invalid read data when operating with the combination of conditions described above.    	 :    Avoid using the NFC_RST bit of the NFC_CONFIGURATION1 register.     WorkaroundsJEEHEHRECONSTRUCT:    Avoid operating in this combination of conditions    	 10135    ENGcm10135    NFC: Incorrect ECC Error Detection when NFC_RST bit is set 	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The bug occurs when the NFC is configured as follows:    Interleaved mode    Addr_op = 2    More than one device    Number of iterations > 1    During automatic read operations the NFC only reads the data from the last device and not from all the devices. The reason for that is that in addr_op = 2 the NFC issues the address phase to each of the devices separately because the address is taken from different register.     DescriptionJEEHEHRECONSTRUCT:    When the number of iterations are greater than the number of devices then the NFC is supposed to issue accesses to each device in a loop until the proper number of iterations is reached. The problem is that when the NFC completes the first loop it does not check whether the device is busy and issues accesses to the devices when they are in busy state.     Projected ImpactJEEHEHRECONSTRUCT:    Incorrect read operations when using the combination of conditions described above.     Projected ImpactJEEHEHRECONSTRUCT:    Incorrect read operations under the combination of conditions mentioned.    	 :    Avoid using this combination of conditions.     WorkaroundsJEEHEHRECONSTRUCT:    Configure the number of iterations to less than or equal to the number of devices used in interleaved mode, so that the NFC can issue one page per connected device.    	 10158    ENGcm10158    NFC: Reads only from the last device using addr_op = 2 without read confirmation    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The NFC-ECC engine does not protect the last 10 spare bytes of the last section in page size of 4 Kbytes + 218 bytes.    In the case where the page size is 4 Kbytes + 218 bytes, the first 7 sections are of 512 bytes and have spare of 26 bytes, and the last section has spare of 36 bytes.    In the case where 4/8 bits ECC protection, the arrangement of the last section of the memory is as following: 18 bytes/12 bytes then 8 bytes/14 bytes of ECC and 10 bytes of user-specific. Those 10 bytes of the last section are not ECC protected.     DescriptionJEEHEHRECONSTRUCT:    If RBB_MODE = 1 and atomic operation, the NFC monitors only the rb_b signal of device0    (rb_b0) instead of the rb_b# signal that corresponds to the selected device. Thus, when the NFC    executes atomic operation with a device other than device0, it monitors the incorrect ready/busy signal.     Projected ImpactJEEHEHRECONSTRUCT:    The last 10 spare bytes of the last section in 4 Kbytes + 218 bytes are not ECC protected.     Projected ImpactJEEHEHRECONSTRUCT:    Can not work in atomic operation with a device other than device0.    	 :    Do not use these bytes. The Freescale WinCE and Linux BSPs (board support packages) do not use these bytes.     WorkaroundsJEEHEHRECONSTRUCT:    Connect on board to rb_b0 port a wired-OR of all the ready/busy signals of all the devices.    	 10205    ENGcm10205    NFC Doesn't Protect the Last 10 Spare Bytes of the Last Section in 4KB+218    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The NFC error correction mechanism is based on BCH error correction codes. The BCH error correction code allows correction up to a particular number of errors (T = 4 or 8 depending on the configuration), and detection in case of higher number of error bits. In a situation where the number of errors (NOBER) is larger than the number of errors the NFC can correct (T), the NFC should report on uncorrectable error.    Due to a theoretical limitation, the BCH code can fail in detecting the error when the number of actual error bits is much larger than the number of correctable bits. The failure depends on the location of the errors (related to Hamming distance), and its probability is very small. The detection failure probability can be calculated using the formula as follows: 1    P = --------    e    T    T! â 2    where T is number of correctable errors.    â¢ For 4-bit ECC, the calculated probability for a decoder error is 1 : 384    â¢ For 8-bit ECC, the calculated probability for a decoder error is 1 : 10,321,920    In case of failure, the NFC reports only on T or less errors (NOBER=T) and tries to correct them.    As a result the data is damaged and the NFC does not report on it.     DescriptionJEEHEHRECONSTRUCT:    When the host issues a read burst access to the NFC and during the data phase the host deasserts the rready signal (indication from the host that he is ready to accept the read data), then the NFC    fails to drive the next datums after the deassertion and also the assertion of the rlast (indication from the slave for end of read data transfer) does not occur on time. Thus, the current read access is incorrect and causes a severe AXI protocol violation.     Projected ImpactJEEHEHRECONSTRUCT:    There is a small probability for failure in detection of the errors by the ECC mechanism due to theoretical limitation of the ECC code.     Projected ImpactJEEHEHRECONSTRUCT:    The NFC is not able to handle more than 4 data word read transactions at a given time.    A restriction is imposed on read access to NAND Flash that require special attention in software and may cause some performance degradation for NAND Flash usage.    	 :    To reduce the failure significantly, treat the case where NFC reports NOBER = T as uncorrectable error. This implies that if the number of errors is equal to T, the software must invalidate the block.    It is a common practice for the software to mark the block as bad in advance when the number of reported errors approaches T.     WorkaroundsJEEHEHRECONSTRUCT:    Due to this coherency issue, the system should prevent the NFC buffers from being cached. This can be prevented by limiting the outstanding read accesses to the NFC buffers to four data words for all combined accesses at any time.    In case of access from single AHB bus masters, which can only submit one outstanding access at a time (such as the SDMA), the burst size must not exceed 4.    In case of AXI bus masters, such as the ARM core, the software must control the data read accesses to be less then 4 data words at a time. Note that there is also a need to make sure that both Neon and the Core do not read together more then 4 data words at a time from the NFC buffers.    In case of multiple masters accessing the NFC, the limitation remains the same. For example, if both ARM and SDMA need to access the NFC buffers, the SDMA could limit its burst reads to 2    and ARM must not request more the 2 data words at a time.    	 10356    ENGcm10356    NFC: ECC mechanism may fail to report uncorrectable error situation    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    This issue is related to SDMA access to NFC in automatic interleave mode.    The faulty NFC operation occurs in the following conditions:    â When NUM_OF_ITERATION is greater than zero, and NO_SDMA = 0 for automatic interleave mode access from SDMA.    â FMP (Fifo Mode Protect) is set to a value smaller than the Page Size (PS). The FMP    determines the interval between the write and read pointers to memory buffer.    â FMP threshold is reached before the host drives more data to the RAM    In this case, the NFC fetches data from the RAM and drives it to the flash line. This causes the difference between the write and read pointers to violate the FMP threshold and as a result, the NFC    stops driving data to the flash line. In such a situation, the last data that is driven to the flash line does not pass through the ECC (Error Correction) encoding engine. As a result, the ECC engine fails to encode the whole 0.5 Kbyte data and reports wrongly on uncorrectable errors.     Projected ImpactJEEHEHRECONSTRUCT:    The above described case with the FMP (FIFO Mode Protection) feature activated and with NUM_OF_ITERATIONS greater than zero (that is, for SDMA) can result in wrong function of NFC.    The issue impacts only SDMA access to NFC in interleave mode with page size equal to 4 Kbyte.    In this case, the automatic interleave mode can not be supported and has to be managed manually.    Other cases can be resolved using the settings described in the workaround section. The implication of proposed setting is some additional latency in write operation only. The latency is derived from the time it takes to fill the internal RAM with the page data.    	 :    The 0.5 Kbyte and 2 Kbyte use cases can be supported under the specified restrictions:    â¢ In case of the write operation with page size of 0.5 Kbyte (PS = 00), it is allowed to configure the NFC to automatic interleaved mode (that is, with NO_SDMA=0 and setting NUM_OF_ITERATIONS to greater than zero). In this case, the FMP field (that defines a safety buffer inside the NFC internal RAM between the AXI host address and the NAND address) must be set to 0.5 Kbyte (set FMP = 4).    In read operation, the FMP can be set to any value that is less than or equal to 0.5 Kbyte, (that is, setting FMP to either 0, 1, 2, 3 or 4).    Chip Errata for the i.MX51, Rev. 5    118    Freescale Semiconductor10676    â¢ In case of write operation with page size of 2 Kbyte (PS = 01), it is allowed to configure the NFC    to automatic interleaved mode (that is, with NO_SDMA=0 and setting NUM_OF_ITERATIONS to greater than zero). Here, the FMP field must be set to 2 Kbyte (that is, setting FMP = 6).    In the read operation, any value of FMP which is less than or equal to 2KB can be configured (that is, setting FMP to either 0, 1, 2, 3, 4, 5, or 6).    In case the page size is 4 Kbyte (PS = 10), it is forbidden to configure the NFC to automatic interleaved mode for both write and read operations. NO_SDMA should be set to 1 and the field NUM_OF_ITERATIONS should be set to 0. Instead, the interleave operation should be    implemented manually as also proposed in erratum ENGcm10967.    â¢ Set the number of pages to read/write to 1 (set NUM_OF_ITERATIONS = 0).    â¢ Set the number of devices connected (that is, setting the field NUM_OF_DEVICES).    â¢ Use addressing option 1 (set ADR_OP = 1, part of the address is used for chip select) and configure the target address and the target chip select at address group0 (that is, setting the fields NAND_ADD0 and NAND_ADD8).    â¢ An interrupt is issued after each single page read/write transfer. Upon receiving the interrupt, reconfigure RBA (Ram Buffer Address) and the corresponding bits of ADDR_ADD0 to repeat the operation for the next device.    	 10676    ENGcm10676    NFC fails to perform ECC encoding in interleave mode if FMP is larger than PS    	 :    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    This issue is related to SDMA access to NFC in automatic interleave mode (NO_SDMA = 0).    NFC buffer mechanism does not operate properly under the following set of conditions, potentially feeding wrong data from the internal NFC RAM to FLASH data line.    The fault occurs under the following set of conditions:    â¢ NFC is set to operate in interleave mode (NO_SDMA = 0) and NUM_OF_ITERATION > 0 for SDMA access.    â¢ Page Size is set to 4 Kbyte (PS = 10)    â¢ FIFO Mode Protect is set to 4 Kbyte (FMP = 7)     DescriptionJEEHEHRECONSTRUCT:    NFC issues premature DMA read request for each page in case of the TOO configuration in interleaved mode.    The TOO (Two On One) configuration is a case where two 8-bit NAND devices are connected to the same CS line to form a 16-bit data width (one device on the lower byte of data bus and second device on the upper byte).    An interleaved mode is configured by setting the number of devices and NUM_OF_ITERATION    to a value greater than zero, and NO_SDMA = 0 for SDMA access.    When the NFC is configured for the above two modes, in addition to the DMA request at the end of the buffer, it wrongly issues additional DMA read request for each page in the middle of the buffer.    Due to this, the SDMA starts fetching data from the RAM buffer before the complete data is available.     Projected ImpactJEEHEHRECONSTRUCT:    The above described case can result in wrong functioning of NFC and should be avoided. The issue is relevant only for SDMA access to NFC in interleave mode with page size equal to 4 Kbyte.     Projected ImpactJEEHEHRECONSTRUCT:    Erroneous behavior under the above mentioned conditions.    	 :    For Page Size equal to 4 Kbyte (PS = 10) the NUM_OF_ITERATION must be set to 0 and NO_SDMA must be set to 1, disabling the interleave mode.    An interleave mode can be implemented manually by configuring the appropriate NUM_OF_DEVICES while setting ADD_OP = 1 (Addressing Option 1, part of the address is used for chip select). In this case, an interrupt is issued after each single page read/write transfer. Upon receiving the interrupt, reconfigure RBA (Ram Buffer Address) and the corresponding bits of ADDR_ADD0 to repeat the operation for the next device.     WorkaroundsJEEHEHRECONSTRUCT:    Avoid using interleaved mode in TOO configuration.    	 10967    ENGcm10967    NFC does not function properly for 4 Kbyte Page Size in    interleave mode    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    When the NFC is configured to perform an automatic status read operation (that is, setting AUTO_STAT), it should execute that operation on the device ID that is configured in the ACTIVE_CS. Due to the reported issue the NFC executes the operation on another device rather than the one specified in ACTIVE_CS.     DescriptionJEEHEHRECONSTRUCT:    The NFC may not properly sample the ready/busy (R/B) signal under the following conditions: 1. RBB_MODE = 1 (Ready-Busy mode 1 - NFC monitors ready-busy status by checking NANDF_RBx (R/B) signals)    2. ADD_OP = 01 (Addressing Option 01 - NFC uses only address_group0 with single NAND    device    3. enfc_clk period is less than twb/3 (twb is the period from WE write enable signal HIGH to R/B    ready/busy signal assertion)    If RBB_MODE = 1 and ADD_OP = 01, the NFC may miss the sampling of the ready/busy signal (R/B) if the enfc_clk is too fast. According to the NAND flash protocol, the NAND device should enter the busy mode and assert the R/B signal (driving R/B signal to zero) after the maximum time period of twb after the deassertion of the WE signal (driving write enable to one).    The NFC samples the R/B signal after a fixed time of 3 enfc_clk cycles after the deassertion of WE.    Typically, the twb period is 100 ns. When the enfc_clk is set to less than 33 ns period, the NFC may miss sampling the R/B.     DescriptionJEEHEHRECONSTRUCTs table in the i.MX51 Multimedia Applications Processor Reference Manual ( MCIMX51) for detailed modes description.    If the above two options are not feasible, the enfc_clk frequency can be reduced such that clock period is larger than twb/3. This results in small performance degradation as the supported ONFI1.0    NAND can run at up to 40 MHz.     Projected ImpactJEEHEHRECONSTRUCT:    Incorrect status return for automatic status read operation.     Projected ImpactJEEHEHRECONSTRUCT:    Violation of NAND interface protocol can result in data corruption. The implementation of the proposed workaround may have insignificant performance impact.    	 :    Perform atomic status read operation (that is, send command 70 followed by single toggle of RE).     WorkaroundsJEEHEHRECONSTRUCT:    The recommended workaround is to set RBB_MODE = 0. This also frees up the NANDF_RBx pads for other usages. The NFC monitors the ready-busy status by performing a status-read command.    Another option is to work with ADD_OP other than 01, allowing to work automatically with a single device other than device0.    See, NAND_FLASH_CONFIG Register Field 	 11060    ENGcm11060    NFC does not perform automatic status read operation    (AUTO_STAT) according to ACTIVE_CS    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Data corruption or EMI hanging can occur on SDMA Multi-Page read from the NFC in case of simultaneous read access by other master from WEIM. Use of SDMA is relevant for a case of multiple pages read from the NFC (that is, setting NUM_OF_ITERATION to a value greater than zero and setting NO_SDMA to zero in NFC for automatic interleave mode).     DescriptionJEEHEHRECONSTRUCT:    If the power supply of an unused UHVIO pad power group is pulled down, it can cause malfunction in the other functional UHVIO IO cells. The UHVIO IO cells (that support signal levels above 3 V) are used in interfaces such as SD card, NAND Flash. For example, grounding SD2 power supply rail through a small resistor (say 470 Î©) causes boot issues from the SD1 interface. This is caused due to a particular HVIO IO cell design limitation.     Projected ImpactJEEHEHRECONSTRUCT:    SDMA read access from NFC may be corrupted in case other masters perform read from WEIM    at same time.    There are no issues in following cases:    â ARM accesses the NFC when WEIM is accessed by any other master in the system    â SDMA accesses the NFC when the WEIM is idle    â NFC is idle and WEIM is accessed by any master in the system  Projected ImpactJEEHEHRECONSTRUCT:    Pay attention to this limitation during board design. An unintentional grounding can occur because of nonfunctional or disabled voltage supply device connected to the UHVIO based interface VCC    line.    	 :    Avoid the above described situation. Note that, in current WinCE and Linux BSP releases from Freescale, the SDMA Multi-Page mode read from NFC is not activated.     WorkaroundsJEEHEHRECONSTRUCT:    Take measures to avoid such cases. Leaving the unused interface supply open, does not cause any issue. The issue occurs only when a supply is grounded through a small resistor. The best design practice is to apply power to all the supply rails.    	 11036    ENGcm11036    SDMA multi-page read from the NFC, when the WEIM is    operating, can result in data corruption or EMI hanging    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    125	 Cortex-A8
	 NXP	 	 :    Pulling down the power supply of any of NVCC_HSx supplies (from the group of NVCC_HS6, NVCC_HS10, NVCC_HS4_1, NVCC_HS4_2 supplies) or VREG supply results in high leakage current from VCC through the supply that is pulled down. Leakage of order of a few hundreds of mA is observed in case NVCC_HSx or VREG supplies are shortened to ground.    If the supplies in NVCC_HSx supplies and VREG are left unconnected or in high impedance state, the leakage would not be observed.    This is caused due to a particular MIPI shielding IO cell design limitation. The leakage current in this case is caused by the ESD protection diode inside the MIPI interface shielding pads.     DescriptionJEEHEHRECONSTRUCT:    If the HAB_TYPE e-fuse is blown as Production, then accesses to peripherals from DCD and SDP    commands is disabled and DDR controller cannot be configured, so DDR cannot be used.    The ROM does not check if the address is valid if HAB_TYPE is not Production for write header and write file SDP commands. So there is no issue in this case.    However, if HAB_TYPE is Production, the ROM allows SDP commands only if the target address lies within the DDR, IRAM, GMEM, NAND flash buffer or WEIM memory regions. SDP Write commands to peripherals such as the memory and clock controllers are denied.     Projected ImpactJEEHEHRECONSTRUCT:    Need to consider this limitation during the board design.    This is mostly relevant to suspend mode, in which the supply regulator of those pins may be turned off to save power.    Typically, when a regulator is off, there would be high impedance on the associated supply pin(s), and leakage depends on the resistive path to ground that exists on the board. If there is a high resistive path, almost no leakage would be observed.    This is also relevant to power-up sequence, because these supplies would be powered-up after VCC    supply and depends on the resistive path, there could be some leakage till these supplies are stable.     Projected ImpactJEEHEHRECONSTRUCT:    Can not execute serial boot if HAB_TYPE is set to Production.    	 :    Take measures to avoid such cases. Note that leaving the unused interface supply open, does not cause any issue. Having this situation for short periods (such as during power up sequence) should not cause any damage.    Alternatively, if high impedance with a low resistive path to ground is projected on the supply, then leakage is negligible.     WorkaroundsJEEHEHRECONSTRUCT:    Use internal RAM boot image. In this case DDR configuration is not required.    	 11041    ENGcm11041    Dependency between VCC, VREG and NVCC_HSx supplies    	 :    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    126    Freescale Semiconductor10656    ENGcm10656    Serial boot will fail if HAB_TYPE is PRODUCTION     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    127	 Cortex-A8
	 NXP	 	 :    The Boot procedure fails when the boot code tries to initialize and access the NAND Flash, in case one of the unused R/Bx signals is grounded. In a system with a single NANDF Flash device, NANDF_RB1, NANDF_RB2, NANDF_RB3 are not in use, as the Boot code uses only CS0. These signals can be alternatively used for other functions (such as GPIO input). Due to reported limitation, the boot in NAND Flash mode fails, if one of the unused NANDF_RBx signals is held at zero during the boot.     DescriptionJEEHEHRECONSTRUCT:    OneNAND boot driver calculates page and sector numbers incorrectly for 4 Kbyte devices.     Projected ImpactJEEHEHRECONSTRUCT:    This limitation impacts the possible usage of NANDF_RB1, NANDF_RB2 and NANDF_RB3 in other alternate IOMUX modes as input, with zero level at boot.     Projected ImpactJEEHEHRECONSTRUCT:    4 Kbyte OneNAND devices boot does not work for image sizes above 1 Kbyte.    2 Kbyte OneNAND devices boot works properly.    	 :    The only workaround is to avoid setting the unused R/Bx signals to zero during boot, in case of NAND Flash boot mode.     WorkaroundsJEEHEHRECONSTRUCT:    For 4 Kbyte devices, it is possible to use only the top half of pages. In this case, ROM reads the boot image properly, but the bottom half of pages are wasted.    	 11189    ENGcm11189    ROM (Boot)/NFC: NAND Flash Boot fails when one of the unused NANDF_RBx signals are held at low    	 :    No fix scheduled.    Chip Errata for the i.MX51, Rev. 5    128    Freescale Semiconductor11353    ENGcm11353    ROM (Boot): OneNAND boot fails for 4 Kbyte devices     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled for the i.MX51.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    129	 Cortex-A8
	 NXP	 	 :    The sw_reset bit in the RTIC spec says that it should not be modified in run-time check mode. A software reset was done during one time hash mode and immediately after that RTIC was enabled.    The RTIC state machine is corrupted in such a scenario. The assertion of software reset when hash_once_command is set in rtic_control, leads to the assertion of hash_once and hence of zero_byte_length in rtic_dma_request. This in turn sets the mem_part_1_done bit and even when RTIC is enabled this remains set, leading to corruption of the state machine.     DescriptionJEEHEHRECONSTRUCT:    The RTICv3 feature that allows the TrustZone software to disable the run-time check of the selected memory regions (region unlock), can cause the RTICv3 to hang and stop the run time integrity check of other regions.     Projected ImpactJEEHEHRECONSTRUCT:    RTIC hangs.     Projected ImpactJEEHEHRECONSTRUCT:    The RTICv3 feature that allows the TrustZone software to disable run-time check of the selected memory regions cannot be utilized.    	 :    Be aware of limitation. Do not reset RTIC during one time hash mode.     WorkaroundsJEEHEHRECONSTRUCT:    None. Avoid using the memory region unlock feature in the TrustZone code.    	 05863    f    ENGcm05863    RTIC: Software reset during one time hash mode corrupts RTIC    state machine    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    SAHARA does not work properly if AHB:IP buses clock ratio is 1:1. It works fine with AHB:IP    buses clock ratio 2:1.     DescriptionJEEHEHRECONSTRUCT:    There is the possibility of a loss of SRTC failure status upon peripheral supply voltage (the HP    section) power up.    The SRTC incorporates a System State Retention Register (SSRR) that stores system parameters during system shutdown modes. This register and all SRTC counters are powered by dedicated supply rail NVCC_SRTC_POW that remains active, allowing all other supply rails to shut down.    The SSRR also stores the system security state. If a security violation occurs, the SSRR marks the event as a security violation indication.    The SRTC is split to two supplies: LP and HP. The LP section is powered by NVCC_SRTC_POW    and always remains active, whereas the HP section is powered by VCC rail and can be shut down.    As long as the SRTC LP section remains active with its separate power supply and clock inputs, it continues to detect and record security violations when the HP section and the rest of the chip are powered down. When power is restored to the HP section, any security violation detected during power down becomes visible to the rest of the system through a security monitor alarm and the SRTC register interface. In particular, software can examine the LP status register to observe the LP Failure state and status bits indicating which security violation occurred.    In rare cases, an erroneous reset of the LP section has been observed during HP power-up when a security violation was recorded during HP section power down. This causes the LP to move to Initialize state rather than Failure state, and erases all record of the security violation.    Please note that this scenario can occur only if SRTC LP has gone into failure state when the peripheral supply power (HP) is off. The unintended SRTC reset does not occur while the SRTC    LP remains in the Valid state.     Projected ImpactJEEHEHRECONSTRUCT:    Adds limitation on system configuration for the clock ratio of 1:1 between AHB and IP buses.     Projected ImpactJEEHEHRECONSTRUCT:    This issue is relevant for systems supporting DRM (digital rights management) and other applications requiring a secure clock or monotonic counter. If the SRTC failure status is lost as above, then a system which has been tampered while the main power was off may appear indistinguishable from a system which has a SRTC that is not violated. If software is then permitted to provision the LP time and monotonic counters insecurely, this could mislead the application relying on the SRTC.    Note that this issue does not permit the SRTC LP clock and monotonic counters to be modified directly without leaving the Valid state. In order to complete the attack, there is a need to execute malicious or insecure software that tries to reconfigure the SRTC after it is reset. The system can be protected against such software by code signing and authentication methods.    	 :    Avoid using a ratio of 1:1 between AHB and IP buses clock frequencies. Other software workarounds are considered, but not yet confirmed.     WorkaroundsJEEHEHRECONSTRUCT:    None. However, this issue can be mitigated by ensuring that the LP time and monotonic counters are securely reprovisioned. One approach is to authenticate all provisioning software using HAB    (high assurance boot) and to lock the LP time and monotonic counters against further changes before allowing unauthenticated software to execute.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    133	 10334    ENGcm10334    SAHARA/CCM: Frequency ratio restriction for AHB and IP buses in SAHARA    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    In Network and Synchronous mode of operation, if Rx is enabled and after one or more frames passes Tx is enabled, the first data is transmitted from FIFO1 instead of FIFO0.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data is transmitted.    	 :    Enable Tx and Rx in same frame when in Network and Synchronous mode of operation 	 10272    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    If Tx is enabled or disabled within a 5 clock cycle window before Frame Sync. Data transmission may not be proper in the following conditions:    â¢ Normal Synchronous mode: With Rx disabled if Tx is enabled 3 clock cycle before non-early FS, glitch of 0.5 clock cycles can be seen on the STXD line.    â¢ Normal Synchronous mode: If Tx is enabled 4 clock cycle before external early word length frame sync with fifo0 disabled two channel disabled, ddr_stxd is high for 1.5 clock cycles.    â¢ Normal Synchronous mode: If Tx is reenabled 2 clock cycles before early FS, ddr_stxd line goes high for 0.5 clk cycles.    â¢ I2s_slave: Tx is disabled in the first time slot and is again reenabled in the 2nd time slot of a different frame wrong data getting transmitted in the next frame. The tx state machine is not running for the frame in which wrong data is transmitted.    â¢ I2s_master: Tx is disabled 2 clk cycle before FS data is repeated in second time slot 6.Network Synchronous mode: Reenabling Tx, 1 clock cycles before External FS, and frame count as 2, results in data in first time slot getting missed.    â¢ Network Synchronous mode: External Early word length FS. If Tx is reenabled 2 clk cycles before FS signal then in the next frame data is transmitted for 0.5 clk cycles.     DescriptionJEEHEHRECONSTRUCT:    In Normal Asynchronous mode: If Tx is disabled 2 clk cycle before non early bit length external FS, ddr_stxd signal is indefinitely set high even when no data is transmitted.     Projected ImpactJEEHEHRECONSTRUCT:    Data transmitted may be lost.     Projected ImpactJEEHEHRECONSTRUCT:    Wrong data transmission may be recognized.    	 :    The following workaround can be implemented to avoid these issues. Enable/disable Tx after occurrence of RFS interrupt:    1. Enable RE(SCR[2])    2. Enable RIE and RFS_EN in SIER12SPACEJEEHEH3. Wait for occurrence of RFS      4. Enable/disable TE(SCR[1])     WorkaroundsJEEHEHRECONSTRUCT:    Disable Tx after occurrence of TFS interrupt, using the following steps to disable TX_EN bit is: 1. Enable TIE and TFS_EN in SIER.    2. Wait for occurrence of TFS.    3. Disable TE(SCR[1]).    	 09220    ENGcm09220    SSI: If TX_EN bit toggled 5 clk cycles before FS, the data transmission not correct    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    When SSI is in normal synchronous mode and frame sync is configured as bit length early frame sync, data is not transmitted.     DescriptionJEEHEHRECONSTRUCT:    I2S_master mode: If Rx is disabled and again enabled with Tx disabled along with TFR_CLK DIS    set, the first data after reenabling is received in the second time slot and hence channel swapping takes place. Network Synchronous mode: If Rx is disabled and again enabled with Tx disabled when TFR_CLK_DIS is set. Data is not accepted into the fifo according to the masking bits.     Projected ImpactJEEHEHRECONSTRUCT:    There is no toggling on the TXD data line.     Projected ImpactJEEHEHRECONSTRUCT:    Channel swapping or data lost (according to mode).    	 :    1. Enable SSI_EN and Tx_EN in the same frame.    2. Do not use early FS in Internal FS mode.     WorkaroundsJEEHEHRECONSTRUCT:    Two different workarounds can be used for this issue:    â¢ Reset SSI every time Rx is enabled.    â¢ Do not use TFR_CLK_DIS feature.    	 06569    ENGcm06569    SSI: Transmission does not take place in case of bit length early frame sync mode    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The receive overrun error is generated when the received FIFO index is 1 more than the watermark level, but the data is received properly in the FIFO. There is no loss of data, the only problem is that the receive overrun interrupt is generated at the wrong time.     DescriptionJEEHEHRECONSTRUCT:    In AC97, 16-bit mode, the Rx data is received in bits [19:4] of RxFIFO, instead of [15:0] bits.     Projected ImpactJEEHEHRECONSTRUCT:    The receive overrun error is not valid when the watermark mechanism is used.     Projected ImpactJEEHEHRECONSTRUCT:    The SDMA script should be updated accordingly to perform the shift to the right location on the fly during data transfer. If the data register is accessed directly by software, it should account for the shifted data and perform shifting to the right location.    	 :    If no overruns can be guaranteed on a system level (based on the serial data rate and latency of servicing the SSI), two options are suggested:    a) Give up on the overflow indication. Set the watermark at a sufficiently low level such that the probability for true overflow condition is very low. This option allows smoother performance but lacks any indication that a true overflow has occurred.    b) Set the watermark level to the FIFO size so that the overflow interrupt corresponds with the actual overflow condition. This option provides overflow indication, however there is larger probability for overflow to occur because the watermark indicator is the FIFO size.    Option (a) can be utilized in cases where the application actually has no means to recover from overflow condition in any case (for example in case of audio playback). This option gives smoother performance.    Option (b) can be utilized in cases where there are good means to recover from an overflow state (for example in case the SSI channel is used for control or status indication and there is an option for data retransmit). In this case, the probability of actual overflow is higher, but there is a reliable indication that the overflow has actually occurred.     WorkaroundsJEEHEHRECONSTRUCT:    The data should be shifted to the right location by the SDMA script or by the software in case of direct access to the register.    	 09668    ENGcm09668    SSI: Receive Overrun Error Generated at Wrong Time for    Watermark Level    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    When receiving this sequence OUT - DATA0 - OUT - DATA1, if the inter-packet delay between DATA0 and the 2nd OUT is under 200ns, the device sees the DATA1 packet as a short-packet, even if it is correctly formed. This terminates the transfer from the device point of view, generating an IOC interrupt. DATA0 is correctly received, though.     DescriptionJEEHEHRECONSTRUCT:    The occurrence of an error in device mode sends ISO data in the next Î¼Frame that should have been discarded.     Projected ImpactJEEHEHRECONSTRUCT:    It should only be applicable to ISO OUT as a Device.     Projected ImpactJEEHEHRECONSTRUCT:    Critical for timing-dependent device ISO IN Mult = 3.    	 :    When MX51's USB is operating in device mode, the host should not send two ISO_OUT sequences within less that 200 ns, otherwise i.MX51's USB does not operate correctly.     WorkaroundsJEEHEHRECONSTRUCT:    The SW has to set the MULT < 3 to avoid this bug.    	 09134    ENGcm09134    USB: Core device fails to receive two sequential OUT    transactions in short time    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The USBOH core uses the erroneous hrdata (when hresp is high) and results in the false USB    transfer at the external Interface.     DescriptionJEEHEHRECONSTRUCT:    The following software flow produces this issue.    1. Configure PTS of Host (or OTG) controller to select ULPI (or UTMI) mode (default is serial mode) and turn USB_CLK_ROOT (comes from on-chip PLL) off.    2. Set PORTSC.PHCD bit to put USB controller & PHY into suspend mode -> ULPI (or UTMI) PHY clock stops correctly.    3. Turn USB_CLK_ROOT on and wait a short time.    4. Turn USB_CLK_ROOT off.    5. Clear PHCD bit â PHY clock starts running correctly    6. Delay to allow PHY clock to become active    7. Set PHCD bit again â Controller suspends the PHY and immediately wakes it up, which is incorrect behavior.    This happens because after Step 4, the serial USB engine stays in suspend mode even after the PHCD bit is cleared. This is because the USB_CLK_ROOT is not valid any more.    The root cause is that USB_CLK_ROOT is used for the USB controller's serial engine. For one USB controller, the USB_CLK_ROOT for serial engine can be always turned off in ULPI or UTMI mode. The case mentioned above (turn on, turn off this clock while PHCD is high) is not a real use case.    However on MX51, there are several USB controllers which share the same USB_CLK_ROOT    clock. In this case, if one USB works in ULPI or UTMI mode while PHCD is set, another USB    may work in serial mode which may turn on, turn off the USB_CLK_ROOT. This is the flow which has issue mentioned above.     Projected ImpactJEEHEHRECONSTRUCT:    False transfer of USB.     Projected ImpactJEEHEHRECONSTRUCT:    Improper USB interface operation as described above.    	 :    This should not happen in real system because when configured correctly, the USB should not get an error response. If it happens, then Garbage In Garbage Out.     WorkaroundsJEEHEHRECONSTRUCT:    The situation can be avoided if the USB_CLK_ROOT clock is turned on briefly when any port wakes up from low power suspend. This ensures that the âsuspendedâ state is cleared in the serial PHY interface.    One can optionally check, during wake-up processing, if the USB clock did run during low-power suspend and only turn on USB_CLK_ROOT when needed.    	 07300    ENGcm07300    USB: Erroneous descriptor handling by USBOH module    	 :    No fix scheduled     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    The USB-OTG port ULPI mode is provided for debugging purposes and is not supported for regular operation. There is no commitment for proper timing functionality on this interface.    This erratum is related to USB OTG port only, for which internal USB-PHY is provided.     Projected ImpactJEEHEHRECONSTRUCT:    The USB-OTG port does not support ULPI interface.    The erratum does not relate to the functionality of ULPI mode on other USB-Host ports or to the USB-OTG internal PHY interface.    	 :    Utilize the USB-OTG PHY interface instead or use other USB-Host ports for ULPI interface.    	 10636    	 :    No fix scheduled. Specification documentation updated accordingly.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    147	 Cortex-A8
	 NXP	 	 :    HS-TLL and FS-TLL are not supported. These features will be removed from the specification.     DescriptionJEEHEHRECONSTRUCT:    The VC-1 intensity bug occurred during motion compensation interpolation process. This bug is that the intensity register is set for wrong intensity scale/shift values in special cases.This bug induces the image distortion because VPU has one intensity information about motion vector in the intensity process. In VC-1 standard, this codec should have all intensity information by line. This bug affects the VC-1 stream which have both field interlace mode and frame mode. There is no impact on the normal decoding stream of VPU except the VC-1 Intensity field mode stream.    The VC-1 AP bug includes three sub bugs:    â¢ Field picture boundary distortion:    â Appear condition: Current picture is a field, reference picture is a frame, reference vector is set for the outer of P/B Frame, intensity is enabled, and scale/shift intensity value for top and bottom are different to each other.    â  DescriptionJEEHEHRECONSTRUCT: If the reference vector is set for the outer of reference picture, the intensity scale/shift value should be changed in VC-1 Standard. VPU has the intensity information which is the âintensity bottomâ without change. But, In VC-1 standard, the intensity information changed from â-1:intensity bottomâ to â0:intensity Topâ.    â¢ Field picture reference to the same frame field picture:    â Appear condition: Current picture is a field, reference picture is in the same frame, scale/shift intensity value for top and bottom are different to each other.    â  DescriptionJEEHEHRECONSTRUCT: When current field picture is referencing a field picture in same frame, current version of MC is always referencing parameters for forward intensity compensation which cause distortion on the any field position.    â¢ Frame picture reference to previous field picture:    â Appear condition: Current picture is a frame, reference picture is a field, intensity is enabled, and scale/shift intensity value for top and bottom are different to each other.    â  DescriptionJEEHEHRECONSTRUCT: In VC-1 standard, the intensity value must be changed by y-position on the two field reference picture. But VPU VC-1 intensity value always indicate the âtop Field Intensity valueâ which cause distortion on the line of the picture.     Projected ImpactJEEHEHRECONSTRUCT:    Removed support for the option of on board USB connection without transceiver.     Projected ImpactJEEHEHRECONSTRUCT:    There are three different cases for the projected impact:    â¢ Case 1    This bug only affects VC-1 stream which have both field interlace mode and frame mode. That kind of bitstream rarely appears in real application case.    â¢ Case 2    There is no impact on the normal decoding stream of VPU except the VC-1 Intensity field mode stream.    â¢ Case 3    Visual quality impact.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    149	 :    None. Need to add transceiver for on board connection.    	 11408    ENGcm11408    USB: High Speed Transceiverless Logic interface (HS-TLL) and Full Speed Transceiverless Logic interface (FS-TLL) USB    interfaces are not supported    	 :    No fix scheduled. Feature is removed from the reference manual.    Chip Errata for the i.MX51, Rev. 5    148    Freescale Semiconductor09125    ENGcm09125    VPU: VC-1 AP bug    	 Cortex-A8
	 NXP	 	 :    This logic bug is in the DC prediction for H.263-P3 Advanced Intra Coding (Annex I) decoding.    A clip function logic design was mistakenly implemented thus causes a wrong clipping result when H.263 Annex I is enabled and the DC prediction value falls in the range of [0, -2048]. This condition most likely happens in a picture having very black and white neighborhood 8x8 blocks.     Projected ImpactJEEHEHRECONSTRUCT:    This bug can cause a very noticeable visual impact. However, because H.263-P3 content is not common, so the general impact is small.    There is no impact on the encoder, the effect is on H.263-P3 decoder only. Annex I is not implemented/supported by the H.263-P3 encoder.    	 :    Workaround for case 1:    This case needs RTL fix, no firmware workaround. And it has minor visual impact along the boundary of the picture.    Workaround for case 2:    This case can be fixed by firmware. Firmware sets the parameters for forward intensity compensation with values for forward and current intensity compensation.    Workaround for case 3:    Can not be fixed by firmware, but visual quality can be improved by firmware. RTL update can fully fix the problem.     WorkaroundsJEEHEHRECONSTRUCT:    None. No firmware workaround fix feasible.    	 09125    	 :    Case 1 â No fix scheduled.    Cases 2 and 3 â Fixed in last firmware release. For case3, the issue is not completely fixed; however, the visual quality is improved.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    This logic bug is for the VLC implementation for DivX Version 3.11. Almost escape and run tables had wrong values, and escape run manipulation had been implemented incorrectly.    Regarding to the level tables, there's no problem in normal stream except the table intra_mb_last_10. Some parts of syntax could be regarded as an error with the table intra_mb_last_10, in a normal, error free, stream.    Regarding to the run tables, some run values are coded wrong. So, the counts of run length is different as maximum one in these cases.    The wrong run-escape manipulation can make difference either as minus one to the counts of run length against luminance values.    In general, there are two kinds of bug. One is wrong error detection due to one omitted column of a table array. The other is difference of run length due to wrong run-escape manipulation and wrong table values. The differences of the counts could be maximum one.     DescriptionJEEHEHRECONSTRUCT:    Some MPEG1 bit streams are decoded unsuccessfully.    This hardware bug occurs in the process of updating the integer motion vector when the motion vector is negative. The VPU always assumes â0â in MSB even for a negative motion vector, thus mistakenly producing a positive motion vector.     Projected ImpactJEEHEHRECONSTRUCT:    This bug should cause a noticeable visual quality degradation (theoretically) for some of the video sequences. But visual quality impact is not significant, and the clip we used to find this bug does not have any visual quality degradation.    This bug occurs only in DivX V3.11, and DivX V4, V5, V6 do not have this bug. Since DivX V5    and V6 content is more popular than that of V3.11, so the overall impact should not be significant.     Projected ImpactJEEHEHRECONSTRUCT:    Some MPEG1 bit streams can be decoded unsuccessfully.    A wrong motion vector is produced for a negative integer motion vector. Because negative integer motion vectors in MPEG1 are very common, visual quality degradation is significant due to the wrong motion vectors for motion compensation.    The usage of MPEG1 is rare in new products, so the overall impact is small.    	 :    None. There is no way for firmware workaround fix because the tables and escape run manipulation are done in hardware logic.     WorkaroundsJEEHEHRECONSTRUCT:    There is a firmware workaround.    	 10260    ENGcm10260    VPU    DivX V3.11 Variable-length-decoding (VLC) bug    	 :    No fix scheduled.     Proposed SolutionJEEHEHRECONSTRUCT:    No fix scheduled.    	 Cortex-A8
	 NXP	 	 :    There is a limitation when selecting different Huffman tables for AC/DC coefficients for the two chrominance components, Cb and Cr. The JPEG decoder design cannot handle two different Huffman tables for Cb and Cr. Cb and Cr are assumed to use the same Huffman table, which is true in most cases.     DescriptionJEEHEHRECONSTRUCT:    The PLL loses frequency lock, drifting either higher or lower than the locked frequency, for a period of ~2 Î¼s, before re-locking itself with no user intervention. The root cause is a meta stable analog signal, which may cause the VCO to adjust the frequency of the output clock significantly out of range. The meta stable signal returns to normal operation after one VCO/4 clock cycle, and the PLL then acts as designed to return the PLL output to the programmed frequency (within ~2    Î¼s).    This erratum applies to i.MX512D, i.MX513D and i.MX515D devices.     Projected ImpactJEEHEHRECONSTRUCT:    The bug occurs when the two chroma components, Cb and Cr, use different Huffman tables for AC/DC coefficients. Therefore, if Cb and Cr use the same Huffman table, this problem does not occur. Normally, JPEG streams use the same Huffman tables for Cb and Cr. It should be rare for JPEG streams to use different Huffman tables for the two chroma components.    There is a large visual quality degradation. However, in reality, the probability of using two different Huffman tables for Cb and Cr is low. As a result, the overall impact for JPEG decoding should not be significant.     Projected ImpactJEEHEHRECONSTRUCT:    Drifting faster than the lock frequency can result in DDR and internal logic failures. Drifting slower than the lock frequency can result in DDR failures. Depending on system activity and magnitude of frequency drift, corrupt memory transactions may occur, possibly causing system failure.    Work Arounds:    The issue can be mitigated by using a Multiplication Factor Numerator (MFN) software work around which puts the PLL into an operating mode to avoid unintended VCO adjustments in response to any potential meta stable event. The PLL should also be configured into Phase Lock Mode (PLM = 1). The MFN implementation is accomplished by locking the PLL at a higher than targeted frequency (864 MHz), and then changing the MFN to reach the target frequency (800    MHz). This is a specified dither mode PLL function. By running the PLL slower than the locked frequency, even if a meta stable event occurs, erroneous deviations to the VCO are avoided. The workaround applies to devices with a target CPU frequency of 800 MHz operation.    There are two parts to the work around, and they need to be applied whenever the PLL is shutdown and re-started. The implementation below assumes PLL1 is being used as the source for the CPU    and DDR clock.    â¢ Part 1: Work around applied during system initialization (boot code)    â Disable auto-restart of PLL1 by clearing AREN bit in DP_CONFIG    â Configure PLL1 multiplication factors for 864 MHz using the following factors: MFI =    8; MFN = 180; MFD = 179; PDF = 0    â Change DDR clock to be sourced from PLL2    â Change ARM clock to be sourced from PLL2    â Manually restart PLL1 (RST = 1) with phase and frequency lock (PLM = 1) using DP_CTL    â Wait for PLL1 to lock by polling lock ready flag (LRF) in DP_CTL    â PLL1 will now be locked at 864 MHz    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    155	 :    None. There is no firmware workaround fix for this erratum.    	 10390    ENGcm10390    VPU: JPEG decoder does not support different AC/DC Huffman tables for Cb and Cr    	 :    No fix scheduled    	 Cortex-A8
	 NXP	 	 :    Occurs when a pending command which issues busy is completed. For a command with R1b response, the proper software sequence is to poll the DLA for R1b commands to determine busy state completion. The DLA polling is not working properly for the ESDHC module. This is relevant for all eSDHC ports (eSDHC1-4 ports).     Projected ImpactJEEHEHRECONSTRUCT:    DLA bit in PRSSTAT register cannot be polled to wait for busy state completion.    Software Work Around:    Updated block guide to reflect that DLA is not applicable to detect busy state, instead, should poll bit 24 in PRSSTAT register (DLSL[0] bit) to check that wait busy state is over.    Silicon Fix:    No plan to fix.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    157		 12051    â Update MFN to transition to 800 MHz by applying the following factor: MFN = 60    â Request PLL to load new MFN using DP_CONFIG (LDREQ bit)    â Wait for acknowledge of new MFN factor from PLL by polling DP_CONFIG (LDREQ    bit)    â PLL1 will now be locked at 800 MHz    â Delay 4 Î¼s to avoid PLL instability window    â Move ARM clock to be sourced from PLL1    â Move DDR clock to be sourced from PLL1    â¢ Part 2: Work around applied to suspend/resume code (kernel)    â Change DDR clock to be sourced from PLL2    â Change ARM clock to be sourced from PLL2    â Update MFN to transition to PLL1 to 864 MHz by applying the following factor: MFN    = 180    â Request PLL to load new MFN using DP_CONFIG (LDREQ bit)    â No need to wait for new PLL rate. PLL will be disabled during suspend    â Enter suspend    â Interrupt wakes system    â System will resume with PLL1 locked at 864 MHz. DDR and ARM are sourced from PLL2    â Update MFN to transition to 800 MHz by applying the following factor: MFN = 60    â Request PLL to load new MFN using DP_CONFIG (LDREQ bit)    â Wait for the acknowledgement of new MFN factor from PLL by polling DP_CONFIG    (LDREQ bit)    â PLL1 will now be locked at 800 MHz    â Delay 4 Î¼s to avoid PLL instability window    â Move ARM clock to be sourced from PLL1    â Move DDR clock to be sourced from PLL1    â Continue resuming system    	 :    No fix scheduled.    BSP Status:    Workaround is implemented via standalone software patch to u-boot and kernel, available on www.freescale.com/imx51tools. Software workaround implemented in BSP releases dated 7/15/2011 or later; refer to the accompanying BSP release notes for details.    Chip Errata for the i.MX51, Rev. 5    156    Freescale Semiconductor12364    ENGcm12364    eSDHC AutoCMD12 and R1b polling problem    	 Cortex-A8
	 NXP	 	 :    In the event that an uncorrectable ECC error occurs while reading Main/Main+Spare from the Nand device, then all spare read operations would fail until the next successful Main/Main+Spare read operation.     DescriptionJEEHEHRECONSTRUCT:    The DDR2 JEDEC standard requires the DDR clock (SDCLK) to start toggling at least 200 Î¼S    before clock enable (SDCKE) signal rise. In the ESDCTLv2 implementation, it was planned to count 7 CKIL clock periods, calculating to 30.05 Î¼S*7 or 210.35 Î¼S, which is greater than 200 Î¼S    and within the JEDEC requirement. However, in practice, SDCKE wait period can be as short as 6    CKIL periods, thus violating the above JEDEC requirement.    Impact:    So far, no issue has been seen.    Software Workaround:    No software workaround.    Silicon Fix:    No hardware fix is scheduled. This is a silicon design deviation from the JEDEC standard.    Chip Errata for the i.MX51, Rev. 5    Freescale Semiconductor    159 Projected ImpactJEEHEHRECONSTRUCT:    The NFC wrongly indicates ECC error.    Software Work Around:    Read main or main+spare after first uncorrectable error.    Silicon Fix:    No hardware fix scheduled. This issue will be addressed in the software drivers in the next driver release.    Chip Errata for the i.MX51, Rev. 5    158    Freescale Semiconductor12376    ENGcm12376    eSDCTL: ESDCTLv2 fails to wait the minimal 200uS between    DDR clk & clk enable    		 12362    ENGcm12362    NFC wrong indication of ECC uncorrectable error occurrence after reading the spare area    		 Cortex-A8
	 NXP	 	 :    When the AUS bit is set, the address lines of the EIM are un-shifted. By default, AUS bit is cleared and address lines are shifted according to port size (8, 16 or 32 bits). Due to an error, the address bits 27:24 are shifted when AUS=1. For example, CPU address: 0xBD00_0000 ([A27:20]=1101    0000 becomes: 0xB600_0000 ([A27:20]=0110 0000) on the EIM bus. Since A[27:25] is shifted to    [A26:24] and A[23:0] is not shifted. As a result A[24] is missed.    Impact:    If the memory used does not exceed 32 MB, there is no impact. This mode is related to a unique memory configuration that is not often used. Most systems can work in the default mode (AUS=0).    Board designers should connect the EIM address bus without a shift (for example, A0âA0, and A1âA1), while working in AUS=0 mode.    Software Workaround:    â¢ Use the AUS = 0 mode (default) while connecting the address signals without a shift (for example, A0âA0 and A1âA1).    â¢ For AUS=1, for devices larger than 32 MB, need to build a memory map that takes this shifting into consideration and does not include A[24] line.    Silicon Fix:    No hardware fix is scheduled.    		 12378    ENGcm12378    EIM: AUS mode is non functional for devices larger than 32MB    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     When configured as the master, the I2C module does not allow 0-byte data transfers.    Note: Programming I2Ci.I2C_CNT[15:0]: DCOUNT = 0 will cause undefined behavior.    	     No workaround. Do not use 0-byte data requests.    18    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.2    I2C Module Does Not Allow 0-Byte Data Requests    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     If a General Purpose Timer (GPTimer) is in posted mode (TSIRC.POSTED = 1), due to    internal resynchronizations, any values read in TCRR, TCAR1, and TCAR2 registers    immediately after the timer interface clock (L4) goes from a stopped state to an active    state may not return the expected values. This situation is most likely when the    OMAP35x Applications Processor wakes up from an idle state.    Notes:    â¢    GPTimer non-posted synchronization mode is not impacted by this advisory.    â¢    This advisory also impacts reads from Watchdog timers WCRR registers.    â¢    All of the watchdog timers support only posted internal synchronization mode. There    is no capability to change the internal synchronization scheme to non-posted mode    via software.    â¢    The 32K sync timer CR and 32SYNCNT_REV registers are also impacted by this    advisory, since the 32K sync timer is always in posted synchronization mode.    	     The software must wait at least 2 timer interface clock cycles + 1 timer functional clock    cycle after L4 clock-wakeup before reading TCRR, TCAR1, or TCAR2 registers for GP    Timers in posted internal synchronization mode, and before reading the WCRR register    of the Watchdog timers. The same workaround must be applied before reading CR and    32KSYNCNT_REV registers of the synctimer module.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    19    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.4    Delay Required to Read Some GP, WD, and Sync Timer Registers After Wake-Up    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Under certain conditions, parallel loads with predication to the same cache line may    cause victims to be dropped and/or DMA to hang.    All of the following conditions must be true in order for this problem to occur: 1. Two LD instructions in parallel.    2. Both are LDs to the same cache line (upper 26 address bits are the same).    3. The LD using T1 is predicated and the predicate is false.    4. The LD using T2 is either not predicated, or is predicated and the predicate is true.    5. The cache line is absent from the cache.    6. The two other lines in the same L1D set are valid.    7. The LRU cache line in the set is dirty.    Results:    â¢    L1D informs L2 to expect a victim for the affected set.    â¢    L2 stalls DMAs with addresses that correspond to that set (DMA includes accesses    from IDMA and EDMA).    Note: DMA includes accesses from IDMA, EDMA, and any external masters, such as    PCI or other CPUs.    â¢    L1D processes the true-predicated request correctly.    â¢    L1D does not send the indicated victim.    Impact:    â¢    If the load instruction reads a cacheable location:    â The updated data in the LRU line gets dropped.    â DMA accesses whose addresses match the affected set hang.    â¢    If the load instruction reads a non-cacheable location:    â L1D retains the updated data from the LRU line.    â DMA reads may see stale data if the LRU line's address is in L2 memory.    	     Use Code Gen patch 6.0.3 (available on update advisor) to recompile your source code    and avoid this issue. Libraries supplied by TI will be re-released using the 6.0.3 compiler    patch. Customer-generated libraries from TI's third-party supplier may also need to be    recompiled.    For existing object code and libraries, an available Perl script can determine locations of    parallel predicated loads that may fail. The script is available at the same update advisor    location as the Code Gen patch.    20    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.9    L1D Cache : C64x+ L1D Cache May Lose Data or Hang DMA Operations Under    Certain Conditions (OMAP3530/25 only)    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     If the I2C module is configured as a slave, in autoidle mode (I2C_SYSC.AUTOIDLE = 1)    and the ARDY (I2C.12C_STAT[2]) condition and the START condition are detected in    the module at the same time, internal clock gating will be incorrectly applied. This will    cause the I2C to NACK (I2C.12C_STAT[1]) the transfer for which the START    (I2C.I2C_STA[6]) condition was received. Subsequent transfers will be ACKed as    expected.    	     Workaround 1: Software must set SYSC_AUTOIDLE to 0. In this case, the failure condition never occurs.    Workaround 2: Ensure that the external I2C master always resends a NACKed transfer    via software. If a transfer was NACKed because of this race condition, the next transfer    will always be ACKed.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    21    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.11    Race Condition May Cause I2C Slave to NACK a Transfer    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Because of a glitchy structure inside the UART module, accessing the MDR1 register    may create a dummy underrun condition and freeze the UART IrDa transmission. Only    IrDa modes Slow Infrared (SIR), Medium Infrared (MIR), and Fast Infrared (FIR) are impacted. Even if the bug condition occurs in UART mode or IrDa CIR mode, it will have no effect. Therefore, UART1 and UART2 are immune to this problem, and only UART3    may exhibit this issue when used in one of the IrDa modesâ SIR, MIR, or FIR.    	     To ensure this problem does not occur, the following software initialization sequence    must be used each time MDR1 must be changed to one of the three failing IrDa modes:    1. If needed, setup the UART by writing the required registers, except MDR1.    2. Set appropriately the MDR1.MODE_SELECT bit field.    3. Wait for 5 L4 clock cycles + 5 UART functional clock cycles.    4. Clear TX and RX FIFO in FCR register to reset its counter logic.    5. Read RESUME register to resume the halted operation.    22    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.12    MDR1 Access Can Freeze UART Module When in IrDa Mode    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	"     When performing any block cache operation, such as ""Writeback"", ""Writeback with    Invalidate"", or ""Invalidate"", for any memory controller or memory range (e.g., L1P, L2, L1D) the word count programmed must be less than or equal to 0xFF80. If a value    greater than 0xFF80 is desired, then this must be broken into multiple operations. The    following registers are affected: L2WWC, L2WIWC, L2IWC, L1PIWC, L1DWIWC,    L1DWWC, and L1DIWC.    "	     No workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    23    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.13    IVA2: Block Cache Operations Word Count (*WC) Must Be Less Than or Equal to    0xFF80 (OMAP3530/25 only)    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Under certain rare conditions, the I2C_STAT[13].RDR bit may be set as well as the    corresponding interrupt fire, even when there is no data in the receive FIFO, or the I2C    data transfer is still ongoing. These spurious RDR events must be ignored by the    software.    	     Software must filter out unexpected RDR pulses, using the flowchart illustrated in    Figure 3 when receiving an I2C RDR interrupt.    24    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  3.1.1.15    I2C: RDR Flag May Be Incorrectly Set    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The EDMA channel controller (TPCC) has 2 event queues: Q0 and Q1. Each queue can    be mapped to one of the two Transfer Controllers (TPTC): TPTC0 or TPTC1. As    explained in the OMAP35x Technical Reference Manual (literature number SPRUF98 ), the events in each event queue will be extracted as soon as the corresponding TPTC is    available for a new Transfer Request (TR) to be programmed into the TPTC. However,    due to an issue in the IVA2.2 subsystem, the requests queued in Q1 cannot be    submitted to their TPTC as long as Q0 is not empty.    Specified behavior is that TR    When TPTC can accept a    shall be submitted from each    new TR, TPTC activates    queue as soon as the    empty signal    corresponding TC becomes    available    empty0    Q0    C    B    A    TPTC0    TPTC    Q1    F    E    D    TPTC1    empty1    Owing to the bug, Q1    remains blocked as long    TPCC    as Q0 is not empty    Figure 4. TR Submission Scheme    	     Infrequent short transfers (e.g., latency critical synchronized transfers to/from peripheral)    must be placed in Q0, and longer transfers (e.g., block copy) in Q1. For example, when    a latency critical transfer is placed in EDMA and a longer transfer in QDMA, the following    programming model will minimize the impact of this limitation:    â¢    EDMA Event is queued to Q0 (using IVA_TPCC.DMAQNUMn register, n from 0 to 7)    â¢    QDMA Event is queued to Q1 (using IVA_TPCC.QDMAQNUM register)    â¢    Queue to TC Mapping is Q0:TPTC1 Q1:TPTC0 (using IVA_TPCC.QUETCMAP    register)    â¢    Queue Priority is Q0 = 0x0, Q1 = 0x7 (using IVA_TPCC.QUEPRI register)    26    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.16    IVA2: EDMA Channel Priority Is Not Correctly Enforced (OMAP3530/25 only)    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     If a power domain meets the conditions to go to an INACTIVE state (i.e., POWERSTATE    is programmed to 0x3 (ON) and clock can be shut off), then the domain will transition to    INACTIVE state. However, the domain cannot go to RET or OFF state automatically    from INACTIVE state, even if software updates the POWERSTATE bit to 0x1 (RET) or    0x0 (OFF). The domain must be transitioned to the ON state before it can transition to    the RET or OFF states.    	     The following two conditions must be met:    1. Do not use autostate with PM_PWSTCTRL_XXX.POWERSTATE=0x3 (ON) to put    power state in INACTIVE. Using autostate from ON to RET (or OFF) transition is not    impacted.    2. Perform wake-up event (software must force wakeup) to transition to an active state    before transitioning to the RET or OFF states.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    27    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.29    Inactive State Management: Impossible to Transition to OFF or RETENTION States    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The Voltage Controller generates an I2C access error when an I2C command is sent to    PowerIC during a voltage domain sleep transition. When the access error is generated,    an interrupt is generated for software error handling. PRCM generates a warm_reset    when an access error is generated by the Voltage Controller during voltage domain    wake-up transition. This is to recover the full system (OMAP35x Applications Processor    + OMAP Peripherals + Power IC) and avoid a deadlock (OMAP35x Applications    Processor wakeup transition stalling due to I2C access error and VDD1/ VDD2 not    supplied). Since both VDD1 and VDD2 Voltage Controllers share the same interrupt line,    an access error for VDD2 Voltage controller is also propagated to VDD1 Voltage    controller.    This bug occurs only with the I2C module used by the Smart Reflex module. Other    instances of the I2C module are not impacted by this issue.    In the following scenario,    1. VDD1 is performing a wake-up transition while VDD2 is performing a sleep transition.    2. An I2C access error is generated on VDD2 sleep request and VDD1 and VDD2    share the same error line, so this access error on VDD2 is broadcasted to both VDD1    and VDD2.    The condition for a warm_reset generation is met on VDD1, and Warm_reset is asserted    inappropriately.    This issue was detected in simulation, but it is a corner case that is not expected to    occur in production, since the I2C access error should never occur if the PCB is safe.    This bug is reported in the silicon errata to help developpers in case this kind of behavior    is detected, but so far it has not been seen in real silicon.    	     By construction, the issue cannot happen if no I2C command is sent during a VDD2    sleep transition (use SYS_OFF_MODE and Smart Reflex disabled). It will never happen    if an I2C access error does not occur (this is the expected behavior).    28    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.36    Inappropriate Warm Reset Generation on Smart Reflex I2C Error    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     An issue can occur during C64x+ execution when:    1. The DSP code contains 2 contiguous SPLOOP/D/W    2. DSP is interrupted when executing the first SPLOOP/D/W    3. There are less than 2 execute packets between the SPKERNEL of the first    SPLOOP/D/W and the SPLOOP/D/W instruction of the second    When this issue occurs, the first SPLOOP/D/W terminates abruptly (i.e. without    completing the loop), even though the termination condition is false. The failure    mechanism can be seen as a hang or by the first SPLOOP/D/W draining for the interrupt    and starting the second SPLOOP/D/W without taking the interrupt or returning to    complete the first SPLOOP/D/W.    	     Ensure there are at least two execute packets between the SPKERNEL of the first    SPLOOP/D/W and the SPLOOP/D/W instruction of the second.    A fix is implemented in the compiler included in version CGT6.0.6 of the Code    Generation Tool (CGT). From this revision of CGT, the compiler now ensures there are    two cycles between SPKERNEL and SPLOOP/D/W instructions by adding the    appropriate number of NOP instructions following the SPKERNEL instruction.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    29    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.41    CPU: Back-to-Back SPLOOPS With Interrupts Can Cause Incorrect Operation on    C64x+ CPU (OMAP3530/25 only)    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     A false internal exception can be generated by C64x+ if an interrupt happens during    DSP code flow and the instructions that will be annulled during pipeline flush are    dependant. This issue occurs in the exception detection logic. It examines the DSP    instructions during the pipeline flush, even though they have been annulled. The    hardware does not detect this and incorrectly assumes that multiple write instructions to    the same register with 2 different conditional registers will be executed.    The DSP generates an incorrect internal exception in the following scenario: the CPU is    draining the pipeline as part of an interrupt context switch. During this time, it annuls    instructions in the pipeline. The first annulled execute packet changes the value of one    or more predicate registers. The second annulled execute packet has two or more    predicated instructions that use the predicates written in the previous cycle. The values    held in the predicate registers appear to cause the instructions in the second annulled    execute packet to write to the same register. The conflicting writes would not happen if    the first execute packet was not annulled.    Example:    ZERO A0    ZERO A1    ------------> (interrupt occurs here)    MVK 1, A0; (annulled)    [!A0] MVK 2, A1; (annulled)    || [!B0] MVK 3, A1; (annulled)    Invalid exception triggers as it appears that the last two MVK will both write A1.    Even if this issue appears in a DSP code, it does not affect the code flow and does not    produce an unexpected exit routine value.    	     The CPU only recognizes the incorrect exception while it drains the pipeline for an    interrupt. As a result, the CPU begins exception processing upon reaching the interrupt    handler. The NRP (NMI Return Pointer Register) and NTSR (NMI Task State Register)    will reflect the state of the machine upon arriving at the interrupt handler.    Therefore, to identify the incorrect resource conflict exception in software, verify the    following conditions at the beginning of the exception handler prior to normal exception    processing:    1. Exception occurred during an interrupt context switch.    â¢    In NTSR, verify that INT=1, SPLX=0, IB=0, CXM=00.    â¢    Verify that NRP points to an interrupt service fetch packet. That is, (NRP &    0xFFFFFE1F) == (ISTP & 0xFFFFFE1F).    2. The exception is a resource conflict exception. In IERR, verify that RCX == 1 and all    other IERR bits == 0.    3. The exception is an internal exception. In EFR, verify that IXF == 1 and all other EFR    bits == 0.    Upon matching the above conditions, suppress the exception as follows:    â¢    Clear EFR.IXF by writing 2 to ECR.    â¢    Resume the interrupt handler by branching to NRP.    The above workaround identifies and suppresses all cases of the incorrect resource    conflict exception. It resumes normal program execution when the incorrect exception    occurs, and has minimal impact on the execution time of program code. The interrupted    code sequence runs as expected when the interrupt handler returns.    The workaround also suppresses a particular valid exception case that is    30    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.42    IVA2: DSP Generates False Internal Exception for Multiple Writes (OMAP3530/25    only)    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The GPMC may stall if the following conditions are met:    1. GPMC_CONFIG[0].NANDFORCEPOSTEDWRITE=1.    2. Software performs more than 256 continuous write accesses in    NAND_COMMAND_x, NAND_ADDRESS_x or NAND_DATA_x registers.    3. GPMC_STATUS[0].EMPTYWRITEBUFFERSTATUS is always 0 (buffer not empty)    during write accesses. This means the software has to write fast enough in GPMC    registers in order to never have the write buffer empty.    This mechanism is CS independent. If the software performs 128 write accesses in    NAND_DATA_0 followed by 128 write accesses in NAND_DATA_1 then the bug will    occur.    	"     Accesses performed through the ""prefetch and write posting engine"" of the GPMC are    not impacted by this limitation, and software should use this mechanism for the best    performance.    If the prefetch and write posting engine is not used, when    GPMC_CONFIG[0].NANDFORCEPOSTEDWRITE=1 and after 255 write accesses in    NAND_COMMAND_x, NAND_DATA_x or NAND_ADDRESS_x registers, the software    has to wait until GPMC_STATUS[0].EMPTYWRITEBUFFERSTATUS=1 before sending    the next 255 write accesses.    32    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    "	  3.1.1.53    GPMC May Stall After 256 Write Accesses in NAND_DATA, NAND_COMMAND, or    NAND_ADDRESS Registers    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     A dummy DMA RX request is generated as soon as the SPI is configured in slave mode    and a SPI clock edge is detected. The dummy DMA RX request is generated during    module configuration, when the module is not performing an SPI transfer. The dummy    DMA RX request occurs as soon as the SPI interface signal sensitivity is changed    compared to the default value.    The dummy DMA RX request is generated because the mechanism to avoid dummy    data capture on a CS glitch is done regardless of channel activation.    SPI RX DMA    Request    2âSPI Slave Configuration    SPI CS    SPI CLK    4âEnable Slave, then Master. Dummy DMA    Request is Generated Because of Previous    CLK Falling    3âSPI Master Configuration (CLK Driven Low)    1âSPI Pin Muxing Configuration (CLK Pulled Up, CS Pulled Down)    Figure 5. SPI Dummy DMA RX Generation    	     Avoid conditions where the SPI is in slave mode and the SPI clock toggles (see    examples below).    SPI RX DMA    Request    2âSPI Slave Configuration    SPI CS    SPI CLK    4âEnable Slave, then Master. No Dummy    DMA Request Generated (No Previous CLK    Falling Edge)    3âSPI Master Configuration (CLK Driven Low)    1âSPI Pin Muxing Configuration (CLK Pulled Down, CS Pulled Down)    Figure 6. Dummy DMA RX Generation (No Clock Edge)    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    33    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.57    SPI Dummy DMA RX Request Generation    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The DMA optimization functionality has been implemented in the display controller to    reduce bandwidth.    The access to the memory in 90- and 270- degree-rotation can be programmed to fetch    two pixels per access. When this feature is used, the re-sampling (even if the ratio is 1)    must be enabled to store the pixel in the lines buffer. This feature can be used with    RGB16 and YUV422 pixels formats. Due to the address generation and the horizontal    scaling issue, the DMA optimization does not work properly with RGB16 and YUV422    format for 90-degree and 270-degree rotations. The image is not correctly displayed on    the panel.    	     No workaround. The bit VIDDMAOPTIMIZATION (bit 20 of DISPC_VID1_ATTRIBUTES    or DISPC_VID2_ATTRIBUTES register) must be left to its default value: 0x0.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    35    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.62    90 and 270-Degree Rotation DMA Optimization Does Not Function Properly    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The DMA4_IRQSTATUS_Lx and DMA4_IRQENABLE_Lx registers, where x is 0, 1, 2 or    3 are not protected in secure and supervisor modes. Therefore, the channel interrupt line    of a secure / supervisor channel can be asserted. However, it is not possible to set or    reset an interrupt event.    	     No workaround.    36    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.66    SDMA: DMA4_IRQSTATUS_Lx and DMA4_IRQENABLE_Lx Registers Are Not    Secure    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The PRM_VOLTCTRL and PRM_CLKSRC_CTRL registers are reset on a Warm Reset;    however, they should be reset on Cold Reset only. These parameters depend on the    device environment only, but the registers must be re-programmed.    	     No consequence. If default values are used, the registers must be re-programmed at    Warm Reset release.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    37    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.74    PRM_VOLTCTRL and PRM_CLKSRC_CTRL Registers Reset on Warm Reset    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Scenario:    â¢    IVA2 is idled.    â¢    Interrupt is propagated to the IVA2.    â¢    IVA2 INTC (WUGEN) generates a Wake-Up event to the PRCM for IVA2 Wake-Up.    â¢    A Wake-Up dependency is defined between IVA and CAM, or IVA and SGX.    â¢    PRCM wakes-up IVA2, which initiates wake-up for CAM/SGX.    â¢    Interrupt is propagated to IVA2 Core.    â¢    At this point IVA2 Core could initiate a transfer to CAM/SGX even though the    CAM/SGX module may not have finished its wake-up sequence, thus resulting in    OCP transfer fail.    	     The IVA2 software should look at the CAM/SGX clock activity status bit to verify that the    CAM/SGX domain is ON before performing any accesses. Next, 10 NOPs should be    inserted for additional margin.    38    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.75    IVA2: CAM/SGX Dependencies (OMAP3530/25 only)    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     An OCP bus error (SRESP) occurs when an access to the module is performed while    the module is coming out of Soft Reset.    	     Insert 2 NOPs after Soft Reset assertion.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    39    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.76    Erroneous SResp Generation Issued to AES Immediately After Soft Reset    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The MPU L2 Cache Size Status register value is inverted compared to the value given in    the spec. The MPU L2 cache size status    (CONTROL_FEATURE_OMAP_STATUS[11:10].MPU_L2_CACHESIZE) is inverted:    Expected:    â¢    00 = 0KB    â¢    01 = 64KB    â¢    10 = 128KB    â¢    11 = 256KB    Current implementation:    â¢    00 = 256KB    â¢    01 = 128KB    â¢    10 = 64KB    â¢    11 = 0KB    	     The software should appropriately handle the inversion.    40    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com 	  3.1.1.77    MPU L2 Cache Size Status Register Value Inverted    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     This defect will only occur for the following conditions:    â¢    The USBMOTGHS is acting as a host    â¢    BULK IN Split transactions in which the RX polling interval (RXINTERVAL) is large    and the peripheral is not responding    This may cause tokens and packets to be transmitted near the SOF causing inter-packet    gap violations and data corruption of the packet.    When the USBOTGHS is acting as a host and a Bulk Split IN transaction is in progress,    the USBOTGHS transmits an in token and the device responds by sending data. If data    is received, the USBOTGHS requests another packet at its scheduled time (send an IN    token). However, if the device responds with a NAK by default, then the USBOTGHS will    continue to request a packet until stopped by software. However the RXINTERVAL    (0x1D) register can be used to limit the number of NAKs received. By default, the    USBOTGHS will not limit the number of requests. The error identified by this defect    occurs if the USBOTGHS has been transmitting IN tokens for the entire micro frame In    this case, the MUSBMHDRC can transmit an IN token that is so close to the SOF that if    the device responds by sending a packet, the packet would be corrupted by the    transmission of the SOF. The result would be a corrupted packet (which can be    identified by the CRC). For all other transactions, this corruption is avoided by use of the    HS_EOF1 (0x1C), FS_EOF1 (0x1D) or LS_EOF1 (0x1E) registers. These registers    define a blackout that prevents transmission of IN tokens too close to the SOF.    	     Limit the number of times the USBOTGHS will transmit an IN token if no packet is    available. Limiting the number of attempts to 2 or 3 attempts will ensure that this    corruption will never occur.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    41    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.80    Acting as a Host; For Bulk Split IN Transactions, the MUSBMHDRC Can Transmit    Tokens too Close to the SOF Packet, Causing an IPG Error    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The OCP master interface of the sub-chip has a design limitation. This interface    connects to an OCP slave on one side and to the AHB master interface of Mentor    GraphicsÂ® USB On-The-Go (OTG) controller, MUSBMHDRC on the other side. It's a    wrapper that converts AHB master read/write requests to equivalent OCP read/write    requests and the OCP response/data from OCP slave is expected to be converted to    equivalent AHB response/data. In the design, the AHB hresp is always set to OKAY. As    a result, an OCP response is never translated to an equivalent AHB response. If an OCP    error response is received on the master interface, it will be sent as an AHB OKAY    response and not as an AHB Error response.    The DMA controller will continue with the DMA read/write transfer since it is unaware of    the OCP error response that occurred for the given read/write transfer. The bus error bit    in DMA_CNTL register will never be set.    	     In an OCP error scenario, halt the DMA and terminate the DMA transfer.    42    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.81    OCP Error Does Not Get Communicated to USBOTG    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The SDRAM output clock is gated when an incorrect L3 CLK_SEL ratio is set. This    operation is generally transparent and handled at boot time by the ROM code. The    workaround should be implemented for the following scenarios:    â¢    GP device External Fast boot is used.    â¢    EMU device External boot is used.    	     For External Boot or External Fast Boot which are both impacted by the issue,    CLKSEL_L3 (bit 1:0) = 10b must be set before performing SDRC configuration. In all    other cases, this programing is handled by the ROM code and no workaround is    necessary.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    43    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.83    L3 Interconnect Clock Divisor Default Value Must Be Modified Before    Configuration of SDRAM Controller    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The Drain_IE bit in the DMA4_CICRi[12] register is not initialized after POR, and its    default value can be either '0' or '1' while the documentation specifies '0'.    	     Prior to the DMA setup, the software must write 0x0 to this bit to disable the Drain_IE    interrupt in the CICR register.    44    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.114    DMA: Drain_IE Reset Value    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     During a destination synchronized transfer on the write port (or source sync with    SDMA.DMA4_CCRi[25] BUFFERING_DISABLE = 1), if a transaction error is reported at    the last element of the transaction, the channel is not automatically disabled by DMA.    	     Whenever a transaction error is detected on the write side of the channel, the software    must disable the channel by writing a '0' to DMA4_CCRi[7]: ENABLE bit.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    45    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.115    sDMA: Channel Is Not Disabled After a Transaction Error    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     When the OMAP35x device is programmed to go to OFF/RET mode, the power, reset,    and clock management module (PRCM) powers down the High-speed USB Host    Subsystem. In response, the High-speed USB Host Controller suspends the bus and the    USBTLL issues a suspend interrupt.    Before USB Host Controller is switched OFF its register contents are automatically    saved to voltage domain retention memory. Also, before the CORE voltage domain is    switched to OFF/RET, the USBTLL contents are saved. Once these registers are saved,    the OMAP35x device transitions to the OFF/RET state.    When an external device initiates a remote wakeup, the PRCM wakes the OMAP35x    device. The CORE domain reset is released and the USBTLL registers are restored.    Upon the completion of the USBTLL register restore an ALT interrupt is erroneously    generated by the USBTLL to the external device. This breaks the USB remote wakeup    protocol and as a result the external device aborts the remote wakeup sequence.    	     To workaround this issue the IdGnd fall interrupts should be disabled by the external    device at boot-up. This interrupt can be disabled by clearing the IDGND_FALL bit of the    ULPI_USB_INT_EN_FALL_i registers.    46    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.121    USB DEVICE Aborts Remote Wake-Up Sequence When OMAP35x Device Wakes    From OFF/RET to ON in USB TLL Mode    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The registers CONTROL_SWRV_i and CONTROL_MSV are expected to be readable    regardless of the device type, i.e. general purpose (GP) device or high security (HS)    device.    The expected behavior is implemented on GP devices. However, on HS devices there is    a difference between read accesses performed in secure and non-secure modes:    â¢    Read access to CONTROL_SWRV_i or CONTROL_MSV in non-secure privilege    mode always returns 0s.    â¢    Read access to CONTROL_SWRV_i or CONTROL_MSV in secure privilege mode    returns the accurate register value.    	     No workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    47    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.127    CONTROL_SWRV_i and CONTROL_MSV Registers Accessible Only in Secure    Mode on HS Devices    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     All the interrupt events either masked or un-masked should be cleared before    transitioning the IVA2 domain to standby. This condition is mandatory to allow the idle    transition, otherwise the IVA2 is kept active.    This issue may occur if the video sequencer is not used (i.e., kept under reset or already    idled) while the IVA2 idle sequence is performed. In this case, if an interrupt is    propagated to the video sequencer, it will not be handled by the interrupt handler which    is inactive but would avoid the IVA2 standby transition. The interrupt is not processed    because the video sequencer is inactive, thus avoiding the standby transition of the    whole IVA2 domain.    The following is an example of this issue: When performing an MP3 low-power use case,    the video sequencer is not used, kept under reset, and only the DSP domain of the IVA2    sub-system is used. Any interrupt (even masked) to the video sequencer avoids standby    transition for the entire IVA2 domain.    	"     Any write/read to the video sequencer IRQ Register (SEQ_IRQCLR/SEQ_IRQSTATE,    etc.) from the DSP or L3 interconnect resolves this issue and allows the standby    transition.    See below sample code example which can be inserted in C source code:    // Definition of Constant Values    asm(""IVA2_SEQ_BASE_ADDRESS .set 0x00090000"");    asm(""SEQ_IRQSTATE_OFFSET .set 0x0000004C"");    asm(""EFI_READ32_REQ_CMD .set 0x02"");    //;; Required Code Fragment for Dummy read register in Sequencer    // push registers to be used    asm("" STW A3, *SP--"");    asm("" STW A4, *SP--"");    asm("" STW B4, *SP--"");    asm("" SUB SP, 4, SP""); // secure 1 word for local frame generation    //;; Sequencer ReadRegister() sequence    asm("" ZERO B4"");    asm("" MVKH IVA2_SEQ_BASE_ADDRESS, B4"");    asm("" DINT"");    OMAP3530 silicon errata Revision 5.0    150    asm("" ADDK SEQ_IRQSTATE_OFFSET, B4"");    asm("" NOP"");    asm("" EFSW.L1X B4, EFI_READ32_REQ_CMD"");    asm("" NOP 9"");    asm("" NOP 8"");    asm("" EFRW.S1 A3"");    asm("" STW A3, *B15[1]""); // if required to save the read data    asm("" NOP 2"");    asm("" RINT"");    // pop registers    asm("" ADD SP, 4, SP"");    asm("" LDW *++SP, B4"");    asm("" LDW *++SP, A4"");    asm("" LDW *++SP, A3"");    48    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    "	  3.1.1.128    Pending Interrupt to Video Sequencer Prevent IVA2 from Going Into Idle Mode    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     In the case where:    â¢    A McSPI module is configured as master and is connected to another McSPI module    configured as a slave (on the same chip, or on a different chip)    â¢    The CS polarity is changed from the reset state (i.e., changed from CS inactive low to    CS inactive high) on the master and slave sides    â¢    The slave is enabled and then the master is enabled according to the programming    guide    then the slave McSPI will generate a false underflow as soon as the first channel is    enabled on the master McSPI side. This is because the master McSPI sets the right    clock and chip select polarities only when the first channel is enabled. As the CS polarity    is changed on the master side, this will generate a low-to-high transition on the CS    signal. The slave McSPI will detect this transition and will try to load its shift register,    which will result in an underflow interrupt being generated because there is no data to    load.    If the slave is an external SPI device, then there is no issue. Only slave McSPI modules    will be impacted.    If the CS polarity is not changed from its reset state, then there is no issue.    This issue will only occur when performing loopback tests on the same chip between two    McSPI modules or when communicating through SPI between two McSPI modules on 2    different chips.    	     The following initialization sequence will solve this issue:    1. On the master side: Set MCSPI_MODULCTRL:SINGLE. Perform the following 3    steps by doing 3 different OCP accesses:    â¢    Configure channel I in MCSPI_CH(I)_CONF    â¢    Set MCSPI_CH(I)_CONF:FORCE    â¢    Reset MCSPI_CH(I)_CONF:FORCE    â¢    Reset MCSPI_MODULCTRL:SINGLE bit. The SPI bus polarity is now updated.    2. On the slave side : Configure channel 0 : write MCSPI_CH0_CONF Enable channel    0 : set MCSPI_CH0_CTRL:EN    3. On the master side : Enable channel i : set MCSPI_CH(i)_CTRL:EN    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    49    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.129    McSPI Can Generate a Wrong Underflow Interrupt    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The TV detect in AC coupling mode is not implemented accurately and is not functional;    therefore, TV detection in AC mode is impossible.    	     Use DC coupling mode only.    50    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.131    TV Detect AC Coupling Mode Not Supported    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     USB DMA can be used only with one channel (Rx or Tx) active at a time. When more    than one channel is active, then DMA transfers cannot be guaranteed.    	     Workaround A: Use the interrupt mode.    Workaround B: Use Tx DMA mode1 for highest throughput requirement endpoint. Use    interrupt mode for others.    Workaround C: Use Rx DMA mode0 for highest throughput requirement endpoint and    interrupt mode for others.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    51    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.132    USB DMA Cannot Handle Concurrent Channels    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Due to a hardware issue in an arithmetic operator in the iLF accelerator, the output of    the loop filter algorithm is corrupted (truncation error). This operator is not used in any    other block of the IVA2.2 subsystem. Other multimedia codecs (H264, RV9, WMV9, â¦)    using iLF are not impacted by this bug. It is safe to use iLF for codecs other than VC1.    Note 1: This bug does not create a noticeable impact on the video quality. Even if there    is no visible impact on the video quality for the end-user, using iLF loop filter for VC1    encoding or decoding generates a video stream that is not bit exact as compared to the    reference: SMPTE Standard for Television: Compressed Video Bitstream Format and    Decoding Process.    Note 2: iLF supports the WMV9 implementation, but not the whole VC-1 SMPTE    standard, even if VC-1 was originally derived from WMV9.    	     iLF accelerator cannot be used for VC1 decoding and will not produce a bit exact output    compliant with SMPTE standard. A SMPTE compliant bit stream can be achieved by    using IVA2.2 software solution (iLF not used ,and loop filtering handled by DSP    software).    52    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.133    VC1 En/De-coded Bit Stream Corrupted When iLF Is Used    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Due to faulty arbitration in the SBL (shared buffered logic: local interconnect of the ISP),    some LSC coefficients can be incorrectly applied on the image. This issue appears only    if the preview resizer is accessing the SBL simultaneously with LSC table prefetch. The    issue appears randomly depending on the access sequencing between resizer access    and LSC accesses. The occurrence of the issue increases with larger image size and    smaller paxel size. The corrupted LSC coefficients are not random values, but value of a    neighbor (the artifact is difficult to detect with regular values but can be clearly seen with    a dedicated LSC pattern).    	     The workarounds consist of avoiding concurrent accesses to the SBL from the resizer    and LSC which can be implemented using various methods. TI is currently validating the    different options, and this section will be updated once the optimal workaround in terms    of efficiency and software complexity has been confirmed.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    57    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.138    ISP: LSC Issue When Used Concurrently With Resizer    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The CCP2 Read-port cannot be used to read data from DDR into CCDC as image data    is dropped randomly, causing final image corruption. This issue only affects OEMs    requiring the data path from DDR through CCDC.    This issue will impact sensors that require throughput greater than 83 Mpix/sec, which is    only possible with CSI2-based sensors. There is no issue for CSI2 sensors that require    throughput greater than 83Mpix/sec â in this case, processing is OTF. This will not    impact CCP2 sensors based on CCP2 throughput limitations.    	     Use an alternate data path for ISP. Use read-back path in Preview Module. TI is    continuing to study implementation impact for future releases.    58    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.141    ISP CCDC DRAM Read-Port Issue    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The Lens Shading Correction (LSC) module in CCDC cannot be used simultaneously    with the Preview-to-Resizer path, as simultaneous accesses can result in data    corruption.    The LSC data is randomly dropped, resulting in a color-shifted final image. This issue    only occurs when LSC is used simultaneously with Preview-to-Resizer.    	     TI is investigating a work-around in which the LSC in CCDC is used along with the    Resizer in mem-2-mem operation.    Other possible work-around options for OEM/3P imaging software are possible:    â¢    Use the LSC available in the Preview module.    â¢    Modify the sensor timings to adjust the Resizer/CCDC timing so that the issue does    not occur.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    59    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.142    ISP Lens Shading Correction Issue    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The SDRC auto-refresh counter is not automatically triggered when the SDRC    configuration is restored after a CORE OFF. Not refreshing the memory may result in    data corruption after some time, which would cause system instability.    This issue is caused by the SDRC state machine remaining in an incorrect state after a    reset (either warm or cold).    	     A manual MR write command to SDRAM should be issued as soon as the device wakes    up from OFF mode. This will automatically transition the SDRC state machine to the    correct state i.e., resuming regular auto-refresh commands. This should be implemented    in two steps:    â¢    Read the SDRC_MR_p register content.    â¢    Write back the SDRC_MR_p register with the value read in the previous step.    In order to conform to JEDEC constraints regarding AR intervals (see slide JEDEC    Standard No. 209), it is mandatory that the SDRC issues automatic self-refresh entries    on inactivity periods for HS devices. This should be done by enabling automatic    self-refresh entries on timeout of Auto_cnt (CLKCTRL field of SDRC_POWER register    set to 0x2) AND defining this time out value to 1 (AUTOCOUNT field of SDRC_POWER    register set to 0x1) prior to any transition to OFF mode.    Note: Because of the SDRC design, an atomic PRECHARGE command is issued    automatically prior to any MR command. There is no need to account for concurrent    accesses that any other initiator in the SOC could generate.    60    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.144    SDRC Does Not Send Auto-refresh When OMAP Wakes-up From OFF Mode    		 Cortex-A8
     2.1, 3.0, 3.1, and 3.1.2    	 TI	 OMAP-3530	     CONTROL_REVISION register contains the same value (0x00000010) for each silicon    revision.    	     Use CONTROL_IDCODE, which is upgraded for each silicon revision and documented    in the OMAP35x Technical Reference Manual (literature number SPRUF98 .    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    61    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.145    CONTROL_REVISION Register Not Aligned With Silicon Revision    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     Upon performing a software reset by setting the OTG_SYSCONFIG:SOFTRESET bit,    â¢    The hsusb_stp pin will remain low instead of going high as expected.    â¢    The reset command will not be sent to the PHY as it should be (the module should    send 0x69 or 0x61 and nothing is actually sent).    There is no real impact on the USB link functionality except for the two items above.    Only software resets through the OTG_SYSCONFIG:SOFTRESET bit field are impacted    (cold or warm resets are not impacted).    	     Use the ULPI RegAddr and ULPI RegData registers to manually send the reset    command to the PHY. As soon as this is done, LINK and PHY can begin negotiating and    functioning normally.    62    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.146    HS USB OTG Software Reset Is Not Fully Functional    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     By default, the CKE pad is in safe mode after Power On Reset. A pull-up is connected to    it, so its default level is high. The ROM Code never configures it.    In case the booting image contains a Configuration Header which configures a CHRAM    section, the ROM Code can configure external RAM according to the parameters located    in CHRAM section. In case the platform boots from NAND, it can allow for example the    ROM Code to directly copy the booting image into external RAM. Because the ROM    Code does not configure this pad, the CKE signal does not reach the external RAM.    There is no functional impact at boot time. There is no limitation at run-time. The    CHRAM section defines the setting for register SDRC_POWER at physical address    0x6D00 0070. The SW designer must ensure that any special feature involving CKE    signaling is OFF (at boot time only).    â¢    SDRC_POWER must turn OFF all auto-count feature (CLKCTRL field = 0).    â¢    SDRC_POWER must disable the Power Down mode of the target memory, via CKE    (PWDENA field = 0).    	"     There is no workaround for this issue. The functionality ""configuration & boot from    external RAM"" remains operational following the basic rules indicated above. After    booting, the application can properly configure the CKE pad and configure a more    optimized refresh policy.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    63    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    "	  3.1.1.148    CKE PAD Is Not Set When Initializing External RAM    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     In case the booting image contains a Configuration Header which contains itself a    CHRAM section, the ROM Code can configure external RAM according to the    parameters located in CHRAM section. In case the platform boots from NAND, it can    allow for example the ROM Code to directly copy the booting image into external RAM.    The CHRAM section contains all the values to initialize the SDRC module. When setting    the SDRC_POWER register, the ROM Code does not read the value contained in the    Configuration header but applies instead a hard coded value set to 0xC1.    This value configures the SDRC as follows:    â¢    High power/High Bandwidth Mode (HPHB)    â¢    Power down mode feature disabled    â¢    Enable clock    â¢    No auto-count feature turned on    â¢    Enter self-refresh when hardware idle request    â¢    Enter self-refresh when a warm reset is applied    â¢    Auto-count = 0    There is no chance to configure SDRC_POWER register with a different value than the    one described above.    	     There is no workaround for this issue.    64    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.149    ROM Code: SDRC_POWER Register Is Initialized With Hardcoded Value    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     When configured in slave transmitter mode, the I2C_STAT:XUDF will not be set as    expected if an underflow occurs. Only slave transmitter mode is impacted. Master    transmitter mode is not impacted. The impact is rather low as the user can rely on    I2C_STAT:XRDY interrupt status bit instead.    	     Use the I2C_STAT:XRDY interrupt bit instead of XUDF when in slave transmitter mode.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    65    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.150    I2C : I2C_STAT:XUDF Is Not Functional in Slave Transmitter Mode    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     3 Timings do not follow the JEDEC standard:    â¢    tRP: Precharge command period on power down    â JEDEC standard: 0 to 7    â Current implementation: Fixed to 2    â Impact analysis: No impact, tolerated by memory components (checked with    memory vendors)    â¢    tRFC: Auto-refresh period on self-refresh    â JEDEC standard: 0 to 31    â Current implementation: tRFC depends on the delay with the next SDRC    command. tRFC min is 1 clock period. tRFC minimum period on self-refresh can    be controlled through tCKE (tRFCmin=tCKE) (in the range of tCKE [0 to 7])    â Impact analysis: No impact, tolerated by memory components (checked with    memory vendors)    â¢    tWR: Write Recovery time on power down    â Issue description: tWR is asynchronous, collides with power-down entry and    corrupts the last write operation    â Impact analysis: Random system crash    	     Disable power-down PWDENA=0. This will impact power consumption, variably    depending on use case, and memory type:    â¢    Use case IDLE: power impact less than 0.1mA    â¢    Use case FULL-ACCESS-RATE: power impact less than 1mA    For specific MEDIUM-ACCESS-RATE use-cases, the power impact can be minimized    using an alternate software work-around:    â¢    AUTOCOUNT=0, SRFRONIDLEREQ=1, CLKCTRL=1, EXTCLKDIS=1, PWDENA=0    â¢    Theory: play with AUTOCOUNT value to trade performance against power savings    â¢    Power impact ~1mA    All the above numbers are correlated by memory vendors' measurements. In all uses    cases, the proposed software work-arounds are robust and have less than 1mA power    impact.    66    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.152    SDRC Timings Are Not Aligned With JEDEC Standard    		 Cortex-A8
     3.1.2 and earlier    	 TI	 OMAP-3530	     The I2C is configured as master transmitter. After serving a XRDY/XDR interrupt (FIFO    empty), from the data sent on OCP, one, two or several bytes sent from the memory to    the I2C interface are lost. The bytes lost are always the first transmitted on the OCP,    when serving the XRDY/XDR interrupts. The occurrence of the bug is related to the    coincidence of the moment when data is sent on the OCP and the moment when the    most significant bit of a byte is sent on the I2C, always when starting serving the    XRDY/XDR interrupt.    Ideally, no data should be lost when transmitted from the OCP to the I2C. However, one,    two or several bytes at the beginning of a transmission from the OCP to I2C are lost, if    the moment when they are put on the OCP coincides with the transmission of the most    significant bit of a byte on the I2C.    	     A workaround exists for the interrupt mode of operation. Before serving the XRDY/XDR    interrupts, until also XUDF status bit is set. This marks the clearance of the internal shift    register and polls the Status Register â XUDF bit, from the local host, after receiving an    XRDY or XDR Note. For the data transmission using DMA, there is no available software    workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    67    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.155    I2C: Data Lost on Transmission From Memory to I2C Interface    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    This issue concerns HSUSBHOST controller of OMAP35x and more specifically the    EHCI controller (Only HS ports are impacted). The issue occurs after a Suspend when    trying to Resume the bus (Host initiating the Resume) and also when doing    RemoteWakeup (Device initiating the Resume).    The HSUSBHOST exits the resume/wakeup sequence without checking the USB bus    LineState to ensure that it is in High Speed Idle state after having put the PHY in High    Speed state. This error scenario will occur when there is a delay in PHY indicating the    controller that the bus has switched to High Speed, and during that time the host is    about to send an SOF packet.    Both TLL and PHY modes are impacted.    	 :    The clear of the âForceResumeâ bit in PORTSC register must be done at the beginning    of the Port- SOF counter boundary, knowing that PortSOF counter is out of sync after a    Suspend with GlobalSOF counter (PortSOF counter is stopped during Suspend while    GlobalSOF counter continues counting). The FrameIndex counter is based on    GlobalSOF counter (SOF counters are counting the 125us delay of a micro-frame). Only    FrameIndex counter can be accessed by Software.    Two Workarounds can be listed for this issue (See flow diagrams and SW programming    sequences below):    â¢    Workaround 1:    â Advantage: No limitation on the number of HS port usage.    â Disadvantage: This workaround applies only to the to Suspend/Resume case and    Suspend/RemoteWakeup case is not supported. This is because where within the    PortSOF counter the HW will set the Resume bit is not known.    â¢    Workaround 2:    â Advantage: This workaround applies to both Suspend/Resume and    Suspend/RemoteWakeup cases.    â Disadvantage: Limitation to have only one HS port used (No limitation on the    number of FS port usage as OHCI controller is not concerned). This is because    EHCI controller has to be stopped by SW before clearing portSC.FPR.    Workaround 1 detailed description: Any Write access to the âPort Suspendâ and âPort    Force Resumeâ bits in the PORTSC register must be done at the beginning of a    micro-frame. This ensures that the Clear of âForceResumeâ bit is done at the beginning    of PortSOF counter.    Workaround 1 SW implementation:    â¢    Suspend/Resume case SW implementation:    1. Read FRINDEX register.    2. Keep polling FRINDEX register to make sure that the register value has    incremented from the value read in Step (1).    3. Set the PORTSC.suspend bit.    4. Wait for the required suspend time.    5. When software is ready to issue resume, Read FRINDEX register.    6. Keep polling FRINDEX register to make sure that the register value has    incremented from the value read in Step (5).    7. Set PORTSC.FPR bit.    8. Wait for at least 20ms (as specified by the USB 2.0 Spec).    9. Read FRINDEX register.    10. Keep polling FRINDEX register to make sure that the register value has    68    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.157    EHCI Controller- Issue in Suspend Resume Protocol    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	" :    A pulse (0.4us) is seen after control module I/O pad configuration restore sequence is    completed upon wakeup from Device OFF mode. This pulse is seen on the pin    corresponding to GPIO_28 = ETK_D14 and GPIO_29 = ETK_D15 when the line is    programmed to maintain the line high through internal pull-up. This ""pulse"" corresponds to the line being driven temporary by the pull-down instead of expected pull-up.    Condition of occurrence of the issue: The device wakes up from OFF mode and the user    wants to maintain the line to high level using the internal pull-up.    Note: This issue does not occur when:    â¢    Device is not going to OFF mode    â¢    Device goes to OFF mode but OMAP is not driving the line (line is driven by other IC)    â¢    Device goes to OFF mode and user wants to maintain the line to low-level    Root cause: This is identified as an issue in the control module save and restore    implementation since handshake mechanism between prcm and control module is    launched even before the restoration of the last padconf-x register is complete.    Handshake mechanism refers to a signal generated by the control module to the PRCM    to notify the completion of the restoration of the pad configuration    The pulse occurs since control module asserts pull-down control of the pad before it    re-activates the pull-up control upon the completion of restore sequence. Since    pull-down is asserted for some time, the I/O pad toggles from High to Low then to High    again causing the pulse on the I/O pad.    "	 :    No issue if line is driven low during OFF transitions.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    71    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.159    Pull-up Not Maintained On GPIO_28/29 Pin During Padconf Restore    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When OMAP wakes up from OFF mode, a spurious transition (on the order of a    nanosecond) may occur on the pads internally muxed to a GPIO.    The conditions for this spurious transition to occur depend on:    â¢    The GPIO setup (GPIO is input, or output driving 1 or 0)    â¢    The PRCM settings concerning the power domains state transitions (HW or SW)    â¢    The configuration of the pad where the GPIO is muxed    Note: All GPIO blocks including GPIO block1 which is in the WU domain are impacted    by this issue.    Root cause: An internal race condition exists between the control signals of the pad    upon wake up from system OFF mode, which leads to a possible spurious transition on    the signal at the padâs boundary.    The case where a pad OFF mode configuration is used (OFFENABLE =1) but with an    override configuration different from the GPIOâs configuration in active mode is a valid    option and is out of the scope of this errata as we only consider the case where we want    the signal to stay constant all the time (same state during active and OFF mode).    	 :    GPIO belongs to GPIO1 in the WKUP domain (GPIO_0 to GPIO_31)    â¢    Do not use the padconf OFF override: CONTROL_PADCONF_X[9] resp    CONTROL_PADCONF_X[25]: OFFENABLE bit='0'    GPIO belongs to GPIO2 to GPIO6 in the PER domain    â¢    Workaround 1 (Recommended option): Use automatic HW transition with Automatic    HW wakeup: CM_CLKSTCTRL_PER=0x3 and define a WU dependency between    WU domain and PER domain (PM_WKDEP_PER[4]: EN_WKUP=1). Pad Off mode    override function must be disabled: CONTROL_PADCONF_X[9] resp    CONTROL_PADCONF_X[25]: OFFENABLE bit='0'    â GPIO maintaining a low level during OFF mode    It is sw responsibility to ensure that the padconf_x value is written to 0x10C    before initiating the transition to OFF (This means GPIO function is configured    and pull-down activated on the pad)    â GPIO maintaining a high level during OFF mode    Sequence before transition to OFF mode    1. Save context of the GPIO module.    2. Configure pull-up in padconf, padconf_x: 0x11C (Note: This can be done    before the OFF transition decision is done. One way to proceed is GPIO driver    always sets a pull-up in padconf when the GPIO_DATAOUT is set to '1')    3. Turn GPIO in input GPIO_OE=1    4. Select Safe mode function, padconf: 0x11F    Sequence after OFF mode at device wake-up    1. Complete restoration of the GPIO context    2. Turn back GPIO in output GPIO_OE=0 (Not needed if step1 and step3 of    sequence before transition to OFF mode is done in that order)    3. Select GPIO function, padconf_x: 0x11C    â¢    Workaround 2 (This option is valid either for SW supervised transition using force    wakeup or automatic HW transition) Disable the Pad Off mode override function and    ensure that the mode is changed to safe mode before transitioning to OFF mode by    following sequence described here after.    1. Save context of the GPIO module.    72    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.160    GPIO Pad Glitch/Spike Upon Wake-Up From System OFF Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When the I2C_CON:I2C_EN bit is reset during the I2C module reconfiguration, some    synchronization signals are not properly reset. This can generate a wrong RDR interrupt    when the next transfer begins (before RRDY interrupt and stop condition).    	 :    During the reconfiguration of the module, perform a software reset of the module    (I2C_SYSC:SRST) instead of just resetting the I2C_CON:I2C_EN bit.    74    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.161    I2C: Wrong RDR Interrupt After Disabling the Module With I2C_EN    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    VPx_TRANXDONE_ST interrupt is generated too early (immediately in worst case) if the    HW counter (in Voltage Processor) used to wait for voltage ramp duration is incorrect.    The HW counter could be incorrect in the following scenarios:    â¢    The voltage update is done through Voltage Processor force-update command.    â¢    Smart-Reflex was previously enabled.    This limitation impacts the low-to-high OPP transitions as SW waits for TRANXDONE    interrupt generation before changing the frequencies. The risk is that high frequency is    configured while high voltage is not yet fully ramped. High-to-low OPP transitions are not    functionally impacted by this HW limitation.    	 :    Upon Low-to-High OPP transitions, SW shall add a delay (software wait loop) when    receiving the VPx_TRANXDONE_ST interrupt and before increasing the frequencies.    This delay needs to be calculated according to:    â¢    PMIC slew rate for voltage ramp-up    â¢    Delta between âlowâ voltage and âhighâ voltage    â¢    Delay already introduced by SW execution (ISR, call to set_module_frequency...)    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    75    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.162    Voltage Processor TRANXDONE Interrupt Occurs Too Early    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    ARM SWAP instructions executed concurrently with another initiator traffic going through    SMS VRFB can create a deadlock in some corner cases.    Conditions of occurrence of the issue:    1. ARM executes a SWAP instruction to a non cacheable SDRAM location. This is    translated to an OCP ReadEx that should be followed by an unlocking write.    2. Once the ReadEx is issued by the SMS toward the SDRAM controller the arbitration    is locked on the ARM SMS thread (class 1 group 0) until unlocking write is received.    3. If VRFB is full before unlocking write is received and accepted by MCU SMS thread    (class 1 group 0) then SMS will assert threadbusy_all preventing the unlocking write    to be received and accepted by ARM SMS thread (class 1 group 0).    4. VRFB does not de-assert threadbusy_all in case FULL condition is due to a SMS    FIFO destination being full and locked (that can not be granted on SDRC arbitration    access) by the open ReadEx on the ARM SMS thread (class 1 group 0).    Note: SWP instruction is not generated by compiler then no risk that swap instruction    is generated anywhere outside specific assembly call.    	 :    Replace SWP instructions (locked access) by LDREX/STREX (Exclusive access). Based    on ARM documentation LDREX and STREX are supported to shared and non-shared    memory. Non-shared memory can be used when the processes to be synchronized are    running on the same processor. When the processes to be synchronized are running on    different processors, shared memory must be used.    76    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.164    SMS ReadEx Deadlock    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Like any other module, upon assertion of idle_req from the PRCM, the USB OTG    module, if it is inactive, will answer immediately by asserting idle_ack. Upon idle_req    de-assertion, the module will de-assert idle_ack immediately too.    In the specific case where the USB OTG autoidle feature is enabled at module level    (OTG_SYSCONFIG[0]:AUTOIDLE = 1), and where the idle_req is de-asserted very    shortly after assertion (less than four L3 clock cycles), the module will never de-assert    the idle_ack anymore.    Note:by default after an HW reset (at boot time or upon wakeup from OFF), the    OTG_SYSCONFIG:AUTOIDLE bit is automatically set to 1.) This kind of short idle_req    pulse can occur randomly during run time, when the CORE is going to retention and is    awoken immediately for example. In this case, not de-asserting the idle_ack signal will    stop the CORE entering retention again.    This issue is specific to the USB OTG module.    	 :    Disable the autoidle feature at module level (OTG_SYSCONFIG[0]:AUTOIDLE = 0).    If the USB module is not used at all, disable its interface clock at PRCM level. By doing    so it will always stay in idle mode.    Perform a dummy read of any USB OTG register. This will re-enable the clock inside the    module, which will then de-assert its idle_ack signal.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    77    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.166    HS USB OTG : Idle_req / idle_ack Mechanism Potentially Broken When Autoidle Is    Enabled    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Upon any source of HW reset (at boot time or when coming back from OFF mode for    example), the reset value of the OTG_SYSCONFIG:AUTOIDLE bit is 1 (autoidle feature    enabled). The behavior should be the same when applying a SW reset to the module    through the OTG_SYSCONFIG:SOFTRESET bit. Because of an implementation bug,    and because the AUTOIDLE and SOFTRESET bits are in the same OTG_SYSCONFIG    register, the value defined for the AUTOIDLE bit while performing the SW reset gets    over-written into it after SW reset is over.    For example : if the AUTOIDLE bit is 0 and a SW reset is performed. AUTOIDLE bit    should be reset to 1.    â¢    If the SW reset is performed by writing 0x2 in OTG_SYSCONFIG, AUTOIDLE will be    un-expectedly reset to 0.    â¢    If the SW reset is performed by writing 0x3 in OTG_SYSCONFIG, AUTOIDLE will be    reset to 1 as expected.    	 :    There is no workaround. When performing the SW reset, just write the AUTOIDLE bit at    the value you expect it to be after reset.    78    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.167    HS USB OTG : OTG_SYSCONFIG:AUTOIDLE Bit Not Correctly Reset    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The VLD engine for H.264 decoder doesnât throw up the data parsing errors as and    when they occur in a macro block, instead the errors are reported in header parsing after    decoding few subsequent macro blocks.    This Issue is applicable only for the error streams, which normally occurs in streaming    applications.    There is a delay in reporting the data parsing errors from the VLD engine side: On a    given erroneous stream, The MSVC reference decoder fails at the macro block (N). On    the same stream, iVLCD would not report the error so VLD will miss the error on macro    block (N), continue decoding, then finally meet a contradiction in later macro block.    CAVLD decoder will miss specific error patterns, which is happening in this stream.    While decoding coeff_token for which nC is 8 or higher, error checking for out-of-table is    not activated by mistake.    	 :    There is no S/W workaround. When an error is detected during the header parsing on    the DSP, the info about the exact erroneous MB is not available. Hence the decoder has    to do the error concealment for all the MBâs in that slice on the DSP.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    79    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.168    IVA iVLCD Cannot Detect Errors    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    As long as the UART RX FIFO is not empty, the UART will not assert its TX DMA    request. This means that in scenario using the DMA in both RX and TX, no UART    transmission will occur until the RX fifo is emptied. This can cause deadlock situation if    the software leaves some bytes in the RX FIFO.    	 :    Software must make sure to always empty the RX FIFO when using the UART in full    duplex mode.    80    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.169    UART Not Asserting Its TX DMA Request When RX FIFO Is Not Empty    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	" :    IVA2 may go to Retention during a brief period between ""a completion of an EDMA write    transfer"" and ""a deassertion of DMA request (MCBSP_DMA for example)"" . The    deassertion of DMA request could be delayed by making consecutive accesses (Write or    Read) to the low-speed peripherals (e.g., consecutive non-posted writes to GPTimerx    from DSP or from MPU if an EDMA write transfer and this GPTimerx use same L4    thread, i.e. McBSP1 and GPTimer1) while EDMA is transferring some data.    The DMA request is then de-asserted while the IVA2 has gone to retention but WUGEN    memorizes that the DMA request was asserted. When a new DMA is asserted while IVA    is in IDLE state then the WUGEN cannot see it because it considers that the DMA is still    asserted so it doesn't serve it and doesn't wake-up the IVA2.    "	 :    Workaround 1: Add a dummy Read access to the same peripheral for each EDMA write    transfer for one EDMA request to the peripheral by using EDMA chaining function. When    the deassertion of the EDMA request is delayed by other accesses (Write or Read) to    the low-speed peripheral, WUGEN sets IVA SS in Standby State without waiting of the    actual completion of the EDMA transfer.    If a dummy Read access to the same peripheral is added after each EDMA write transfer    to the peripheral then WUGEN sets IVA SS in Standby State after the dummy Read    access completion. At this time, the EDMA write transfer should be finished and also the    EDMA request is deasserted absolutely. A race between IVA goes to idle and the    deassertion of the EDMA request can be avoided.    Note: A dummy Read access to the peripheral should be added for each EDMA write    transfer for one EDMA request. Therefore, there is possibility to decrease the    performance.    Workaround 2: Enable DMATRUECOMPEN, ITCINTEN and TCINTEN. All EDMA write    request is posted-write in default. Enabling DMATRUECOMPEN changes EDMA write    request into a non-posted write. The write request which is affected by    DMATRUECOMPEN can be enabled/disabled by using ITCINTEN and TCINTEN That    is, if ITCINTEN=1 and DMATRUECOMPEN=1 then intermediate write events can be    non-posted write requests. And also if TCINTEN=1 and DMATRUECOMPEN=1 then    final write event can be a non-posted write request.    Therefore, even the service for EDMA write transfer is delayed by other accesses (Write    or Read) to the low-speed peripheral, WUGEN sets IVA SS in Standby State with    waiting the completion of this EDMA write transfer by enabling DMATRUECOMPEN,    ITCINTEN and TCINTEN.    Note: TCC interrupt is common for both intermediate requests (enabled with ITCINTEN)    and final request (enabled with TCINTEN). Therefore, there is no way to get only the    interrupt for final request when both ITCENTEN and TCINTEN are enabled.    To generate the interrupt only with final event, additional use of PaRAMs is required.    The method depends on the transfer synchronization dimension (that is, ASync or    ABsync):    â¢    Case1: In case of Async transfer and Bcnt !=1 or Ccnt !=1, and would like to get the    interrupt only with the final event, 3 or more linked PaRAMs are needed.    â¢    Case2: In case of ABsync transfer and Ccnt !=1, and would like to get the interrupt    only with the final event, 2 or more linked PaRAM are needed.    â¢    Case3: In other case (i.e. Async transfer and Bcnt =1, Async transfer and Ccnt =1, or    ABsync transfer and Ccnt =1), there is no need to care about the PaRAM setting to    get the interrupt of final event.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    81    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.170    IVA2 Does Not Wake-Up After It Goes to IDLE While DMA Request Is Still Asserted    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    A-LAW decompression cannot be performed in the PREVIEW module if data comes    from the CCDC (PRV_PCR[2] SOURCE = 0x0). This is a hardware defect in the    PREVIEW module.    	 :    Workaround 1: Do not use A-LAW decompression if data path is CCDC->PRV, but you    can transfer RAW data from CCDC to PRV.    Workaround 2: A-LAW decompression in the PREVIEW module can be used by    changing the data path to CCDC- >memory->PRV instead of CCDC->PRV.    82    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.173    ISP: A-LAW Decompression Cannot be Performed in the PREVIEW Module    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The ISP applies a SW reset (ISP_SYSCONFIG[1]:SOFT_RESET or    CCP2_SYSCONFIG[1] SOFT_RESET or CSI2_SYSCONFIG[1] SOFT_RESET)    immediately without checking if there is ongoing OCP traffic. Incomplete OCP    transactions may be generated when the reset occurs in the middle of an L3 OCP burst.    Incomplete OCP transactions stalls the L3 interconnect or cause a timeout condition.    	 :    SW needs to first stop all ISP traffic before doing a SW reset. Idea is to block the OCP    interface to avoid transfer are on going when reset is applied. To do that, MMU mapping    error mechanism is used. MMU is programmed to generate an IRQ when an address    which is unmapped in MMU table hit the MMU. Then all MMU tables are trashed so that    IRQ will happen on the next OCP access (and access will block the OCP port). Once the    IRQ happen, no transfer is on going by construction and reset can be applied.    Following sequence should be applied:    1. Configure the MMU in manual mode so that it requests translation entries from the    CPU by triggering an IRQ.    2. When an access arrives, the MMU will stall the OCP port on a clean OCP boundary.    3. The CPU doesn't provide the translation entry: that ensure that the OCP traffic has    been stopped.    4. Wait 1000 cycles to make sure all responses have been returned.    5. Issue a SW reset.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    83    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.174    SW Reset Done While ISP Processing Is Ongoing Can Cause OCP Protocol    Violations    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The CCDCPRV_2_RSZ_OVF event is continuously triggered when the resizer is used in    memory to memory mode. This event cannot be masked individually: all SBL events    must be masked to prevent continue CPU interruption. That prevent proper monitoring of    other SBL events (overflow conditions).    	 :    Overflow events donât need to be monitored continuously. It is enough to monitor them    once per frame to decide is a given frame can be used or if it must be dropped and    eventually the ISP restarted. Monitoring should be done when then respective end of    frame event has occurred (i.e. after a H3A-AF done check the overflow status of the H3A    AF FIFO).    84    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.175    SBL_PCR [24]CCDCPRV_2_RSZ_OVF Goes High as Soon as RSZ_CNT[28]INPSRC    Is Set to 1    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The PRV data read from memory behaves incorrectly when it receives a end of frame    pulse. This impacts use case where PRV processes a frame from memory while CCDC    sends a new one to HIST or H3A.    It is not possible to have concurrently Memory -> PRV and CCDC-> HIST/H3A.    This issue will impact high quality still image capture with multiple and concurrent    processing passes.    	 :    Avoid that the CCDC frame ends while PRV is processing data (by synchronizing the    modules). Or don't use the failing combination.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    85    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.176    PRV Pixel Data Read from Memory When CCDC Video Port Is Active    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When an overflow occurs during the write of H3A module in H3A buffers in SDRAM, next    write of H3A module does not start at the beginning of the buffer but where last overflow    occurred. Some write on next buffers can happen and it corrupts next data.    That typically happens when the system is heavily loaded and the Resizer is used in    upscaling mode. In fact, the Resizer has the highest priority inside the ISP and H3A has    a low priority class. H3A may not gain access to the OCP port when the Resizer outputs    data at high rates. That causes FIFO overflows and potentially the buffer overrun.    	 :    H3A FIFO overflows and not expected in normal utilization. As long as no overflows    there's no issue.    Workaround 1:    â¢    Rework the use case to not have an overflow    â¢    Increase H3A windows (Paxelsâ size) to decrease the bandwidth and avoid overflow    Workaround 2:    â¢    Double each H3A buffer size allocated in SDRAM to prevent bad writes on next    buffers.    86    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.177    H3A Buffer Overrun    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    In some cases, user is not able to access DDR memory after warm-reset.    This situation occurs while the warm-reset happens during a read access to DDR    memory. In that particular condition, DDR memory does not respond to a corrupted read    command due to the warm reset occurrence but SDRC is waiting for read completion.    SDRC is not sensitive to the warm reset, but the interconnect is reset on the fly, thus    causing a misalignment between SDRC logic, interconnect logic, and DDR memory    state.    Root cause description: A corrupted read transaction is issued to a closed row:    (address0, bank0) instead of the expected read access, violating protocol.    Failure signature: Once the failure occurs and system has restarted, memory content is    not accessible. SDRC registers can be accessed successfully, until 1st access to    memory location is performed. After 1st access to memory is done, SDRC is stuck.    	 :    Steps to perform before a SW reset is triggered, if user needs to generate a SW reset    and keep DDR memory content:    1. Set SDRC_POWER[SRFRONIDLEREQ]=1 //enable self-refresh on idle request    2. Set PRCM CM_ICLKEN1_CORE[SDRC]=0 //put SDRC in idle    3. Wait until PRCM CM_IDLEST1_CORE[SDRC]=1 //wait until SDRC goes to idle            4. Generate SW reset      Steps to perform after warm reset occurs:      if HW warm reset is the source, apply below steps before any accesses to SDRAM            1. Reset SMS and SDRC      (a) set SMS_SYSCONFIG[1].SOFTRESET=0x1, wait until      SMS_SYSSTATUS[0].RESETDONE = 0x1    (b) set SDRC_SYSCONFIG[1].SOFTRESET=0x1, wait until    SDRC_SYSSTATUS[0].RESETDONE = 0x1    2. Re-initialize SMS, SDRC and memory (if SW warm reset is the source, SDRAM    can be accessed reliably with no additional operation since user ensure above    sequence before applying the warm reset).    Note: DDR memory content is lost upon HW warm-reset (WDT, secure violation, â¦).    SDRC_POWER[SRFRONRESET] value does not matter.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    87    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.178    Accesses to DDR Stall in SDRC After a Warm-reset    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    OCP Write transactions to FIFO register gets killed internally causing short packet    transmission.    The failure happens when the below events occur in the same cycle.    â¢    RxPktRdy bit of the RX EP (with AutoClear enabled) is being cleared after DMA    completes unloading FIFO.    â¢    Data transactions happening in the USB bus.    â¢    FIFO is being loaded by software through OCP slave.    This results in short packet transmission or USB data corruption.    Note: The MCU Reads to FIFO are not impacted by this bug.    	 :    Use only DMA or only OCP Slave to load and unload FIFO. For better throughput good    option will be to use DMA for up to 8EPs since the USB core has 8 DMA channels.    For application with more than 8 EPs, assign only RX EPs to MCU and DMA can be    assigned either RX or TX EPs.    If MCU needs to load FIFO, it should check no DMA RX channel is active at that time.    MCU should disable all the DMA RX channels and then proceed to loading FIFO.    88    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.180    High-Speed USBOTG Short Packet Issue    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Below is the sequence performed to observe the issue:    â¢    Perform Enumeration as a HOST.    â¢    Perform USB Reset, Read the device descriptor, check for OTG defined specific    test-VID/PID.    â¢    Set test mode according the found PID (Program the test mode register in the    USBOTGHS.)    Now the DP-DM data lines are not in the expected states. Hence programming of    TestMode J results in the Data-Lines permanently toggle between J and K state.    	 :    Program the PHY OPMODE to 10 using the ulpi extended register access before    programming the TESTMODE registers in HOST Mode.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    89    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.181    Standard OTG Compliance Electrical Tests for HOST Mode Will Fail    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The GPMC supports 4- or 8-bit error correction BCH code. 4-bit error mode is using a    wrong polynomial, as a result for this mode the GPMC will:    â¢    On page write, generate incorrect ECC parity.    â¢    On page read, generate an incorrect syndrome.    This bug prevents having correct error location.    	 :    No workaround for this issue.    90    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.183    GPMC Has Incorrect ECC Computation for 4-Bit BCH Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    An issue in the USBHOST memory access arbiter prevents EHCI and OHCI Host    Controllers from working simultaneously. As a result one cannot connect a HS and a FS    USB devices on the USBHOST.    	 :    No workaround exists for the generic use-case. For low-throughput requirement a SW    arbitration scheme can be implemented.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    91    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.185    HS USB: ECHI and OHCI Controllers Cannot Work Concurrently    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Once enabled (CM_FCLKEN3_CORE.EN_TS = 0x1,), the PRCM provide the 32Khz    clock to the clock tree made of Thermal sensor+ MMC1/2/3.    As soon as 32Khz clock is provided to MMC module then debouncing operation is    started. Once debouncing is completed, then interface clock is ungated at module level    and OCP clock is enabled internally to the MMC module (while MMC module is not    used). This is creating unexpected over-consumption (100uA/MMC instance measured).    The auto gating stays inefficient as long as module is not enabled.    	 :    Each time thermal sensor is used, the MMC instances which are not used should be    enabled then disabled (write CM_ICLKEN1_CORE.EN_MMCn = 0x1,    CM_FCLKEN1_CORE.EN_MMCn = 0x1, wait until CM_IDLEST1_CORE.ST_MMCn =    0x0 then write CM_ICLKEN1_CORE.EN_MMCn = 0x0,    CM_FCLKEN1_CORE.EN_MMCn = 0x0) to avoid over-consumption due to OCP logic    being un-necessarily clocked.    92    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.186    MMC OCP Clock Not Gated When Thermal Sensor Is Used    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Context save operation saves the pad configuration register contents to the scratch pad    memory, that will be used at the context restore operation after OFF mode exit.    Sometimes randomly after context save operation, CONTROL_PAD_CONF_ETK14    register is not saved into scratch pad memory. This register contains pad configuration    information for 2 pads : etk_d14 and etk_d15. This is impacting only    CONTROL_PAD_CONF_ETK14, all other padconf registers are saved and restored as    expected.    The failure signature is this register not saved: the scratch pad memory keep value    saved during previous OFF transition. It is not a register content corruption. When    waking-up from OFF mode, CONTROL_PAD_CONF_ETK14 is restored with old value    (or non-initialized RAM value for first time).    CaseA: Issue occurs randomly when CORE_L4_ICLK/4 (default)    (CONTROL_PADCONF_OFF[2]. WKUPCTRLCLOCKDIV=0, default). Caused by the    polling for context save completion. Issue does not occur if a delay is added just before    SAVEDONE bit polling.    CaseB: Issue occurs always When CORE_L4_ICLK/2 (CONTROL_PADCONF_OFF[2].    WKUPCTRLCLOCKDIV= 1). No workaround available.    Root cause description:    Case A: Failure occurs when OCP port is accessed for context save operation at same    time as last save access of the SAR mechanism is performed. The OCP access is    delaying the completion of the save of CONTROL_PAD_CONF_ETK14 register. In that    case SAR never ended and SAVEDONE bit is wrongly returned.    Case B: Wake-up control clock is CORE_L4_ICLK/2, SAR is wrongly completed before    saving last context.    For caseA and caseB, result is current CONTROL_PAD_CONF_ETK14 is not saved in    scratchpad @0x480025F8 and previous value is kept in scratchpad.    	 :    Wake-up control clock = CORE_L4_ICLK/4 AND Do not access any SCM registers    before context save completed following recommended sequence below.    1. Ts = 2*(1/core_l4_iclk_freq)* X*200 (X=4 when CONTROL_PADCONF_OFF[2].    WKUPCTRLCLOCKDIV= 0)    â¢    Example: 21.2us for 83MHz CORE_L4_ICLK    2. Enable padconf save operation: CONTROL_PADCONF_OFF[1]:STARTSAVE='1'    3. Wait for Ts Delay + 10% (additional step)    4. Poll SAVEDONEBIT='1'    5. Read padconf_OFF save for etk_d14/15 @0x480028A0 is equal to    CONTROL_PADCONF_ETK_D14 @0x480025F8    (a) If padconf_OFF save equal CONTROL_PADCONF_ETK_D14 then Sequence is    completed successfully    (b) If padconf_OFF save NOT equal to CONTROL_ and Go back to step 1 (restart a    new save)    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    93    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.187    Context Save Operation Randomly Failing for CONTROL_PAD_CONF_ETK14    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    I2C4_SCL low period is fixed by hardware then cannot be modified by software. Due to    IO cell influence, I2C4_SCL AC timing is shorter than expected. As a result the standard    AC timing (SCL minimum low period) in FS mode is not met. Please see OMAP3530    Data Manual for exact I2C4 AC timings.    	 :    There is no workaround for I2C4.    I2C4 is dedicated for SmartReflex and expected to connect with Power IC. Design    review was done and concluded that there is no problem when OMAP is interfaced with    TPS659xx.    94    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.188    I2C4 Does Not Meet I2C Standard AC Timing in FS Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Due to IO cell influence, I2C1 to 3 SCL low period can be shorter than expected. As a    result, I2C AC timing (SCL minimum low period) in FS mode may not meet the timing    configured by software.    	 :    I2C1 to 3, SCL low period is programmable and proper adjustments to the    SCLL/HSSCLL values can avoid the issue.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    95    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.189    I2C1 to 3 SCL Low Period Is Shorter in FS Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    For High Secure devices, CONTROL_SEC_CTRL[0:1] are described as OCO (One time    Configurable after power on reset Only). In current implementation, these bits are reset    when device is coming back from OFF mode. No restoration is performed by the HW    when coming back from OFF resulting to CONTROL_SEC_CTRL[0:1] are back to reset    value after a WU from OFF mode.    CONTROL_SEC_CTRL[0] is used to freeze secure watchdog count and default value for    this bit is SWD NOT freezed.    If the secure Watchdog was frozen before an OFF mode transition, the SWD will be    re-enabled again unexpectedly when the device is waking-up from OFF mode. The    Secure Watchdog will generate a warm reset when the counter expires.    Note: Issue is systematic. Content of CONTROL_SEC_CTRL[0:1] is correctly    maintained to their previous value during OFF period. The reset value is applied after    WU when the isolation cells between power domains are released.    	 :    CONTROL_SEC_CTRL[0:1] are not reliable and must not be used. The Secure    Watchdog can be disabled by sw. Secure Watchdog is in the wakeup domain then it can    be configured only once after power on reset and will kept disabled until next power on    reset.    Recommended procedure is to use PA or PPA call to SW    SEC_SERVICE_SEC_WD_DISABLE() once after power on reset.    Note: This WA is mandatory for HS devices not using Secure Watchdog functionality    (goal it to keep the Secure Watchdog always disabled). No WA is needed in case    Secure Watchdog is used in the system and reload of the Secure Watchdog is managed    accordingly. This errata is not impacting Secure Watchdog capability.    96    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.190    Unexpected Warm Reset Assertion on HS Devices    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Warm_reset is not asserted for same duration depending if it is a secure_Warm_reset    (SSM, SWD) or a Global_Warm_reset (all other sources than secure).    Global_warm_reset behavior is consistent with TRM description while    Secure_Warm_reset has simplified logic (RSTTIME1 only is taken into account).    Impact: Warm_reset released before VDDs are stabilized which can lead to    unpredictable behavior (mainly MPU crash). However secure_Warm_reset during OFF    should never happen except in case of attack during OFF on a HS and system hanging    in that particular context looks acceptable.    Expected behavior: Warm reset assertion duration is    (OFFmodeSetupTime+RSTTIME1)*32Khz cycles. This formula is valid for all warm reset    source except SWD reset and secure violation reset (SSM).    For WD reset and secure violation reset (SSM)    PRM_VOLTSETUP2[15:0]:OFFMODESETUPTIME is ignored and formula is:    RSTTIME1*32KHz.    	 :    No WA needed since secure_Warm_reset during OFF is not happening with a correct    configuration. In any case RSTTIME1 can be enlarged to match VDD ramp-up    requirement.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    97    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.191    Warm Reset Assertion Time When Warm Reset Happen During OFF Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    In case of PER domain, due to a missed dependency if McBSP external clock is the only    enabled permanent clock of PER PD, then CORE PD is prevented to transition to idle    and therefore into OSWR.    Such issue disappears if at least one other permanent clock of PER PD is enabled.    Note: A permanent clock is a functional clock that can stay active while the    corresponding entity managing it, CM, can go into idle. That is, a permanent clock can    stay running while CM internal FSMs are clock-gated and even when CORE domain    goes to retention.    For WD reset and secure violation reset (SSM)    PRM_VOLTSETUP2[15:0]:OFFMODESETUPTIME is ignored and formula is:    RSTTIME1*32KHz.    	 :    Enable a permanent clock in PER domain when McBSP external clock is used.    To minimize power consumption impact, a 32KHz clock should be selected and enabled    (fclken = â1â) without enabling the module (iclken = â0â). In such way, only small 32KHz    clock tree contributes to power consumption increasing.    98    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.192    Missed Dependency With McBSP External Clock Avoid Transition to OSWR    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    MPU interrupt controller is not able to sort the input interrupt under idlereq pulse    application. The sequence which creates this situation is:    1. When there is a pulse of idlereq (one or two clock cycles) applied after coming out of    idle state.    2. There is change in input interrupt.    Impact: The input interrupt can not be sorted until the internal OCP clock starts running.    Interrupt to CPU will be delayed till the OCP clock starts running. The OCP clock can    start running if Another Idlereq pulse greater than two clock cycles.    	 :    Disabling auto-gating (INTCPS_SYSCONFIG[0]:AUTOIDLE=0) feature which will allow    the change in idlereq to be sampled. This can be done right before executing the idle    instruction to avoid power consumption impact.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    99    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.193    MPU Cannot Exit From Standby    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    There is an issue when sDMA channel is disabled on the fly, sDMA enters standby even    through FIFO Drain is still in progress. SW WA is to put sDMA in NoStandby before a    logical channel is disabled, then put it back to SmartStandby after the channel finishes    FIFO draining. The issue only happens when FIFO draining is used and sDMA is    configured SRC sync, BufferingEnabled and SmartStandby.    	 :    Put sDMA in NoStandby before a logical channel is disabled, then put it back to    SmartStandby right after the channel finishes FIFO draining. This issue can be avoided    when one of the conditions (sDMA FIFO drain function enabling, SmartStandby, or    On-the-fly channel disabling) is removed.    100    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.194    sDMA FIFO Draining Does Not Finish    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    After suspend sequence, USB3320 USB PHY goes correctly in low-power mode:    â¢    DP Line goes High and DM line remains Low (J state)    â¢    Rbias Voltage = 0 V    Whereas OMAP HOST controller exit from suspend mode (while it is expected to keep in    low power mode).    OMAP Host state (exited from low power mode) is inconsistent with PHY state (low    power mode) resulting in a lockup situation.    Resuming the port has no effect as HOST controller has already exited from low-power    mode.    Root cause: Delay in assertion of DIR causes USBHOST ULPI interface to exit ULPI    Low Power mode. USB3320 USB PHY assert DIR signal 3 clock cycle after STP signal    is de-asserted.    	 :    There is no workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    101    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.195    HSUSB Interoperability Issue With SMSC USB3320 PHY    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    IVA is allowed to transition to sleep as soon as the last pending IRQ was handled and    the clear command was sent. If latency is added to clear the interrupt source due to    system activity, then IVA2 will transition to sleep before the interrupt source is cleared,    meaning that the interrupt line is not de-asserted when IVA goes to sleep but will be    released later on.    In that particular condition (interrupt line active when IVA goes to sleep), then this    interrupt line is no longer able to generate a WU event to the IVA. The IVA will ignore the    activity on that line until it is woken-up by another source.    	 :    Whenever IVA clears interrupt, IVA needs to read back the same register. This ensures    the interrupt is always cleared before IDLE entry. This WA is implemented in TI DSP    Bridge for GP-Timer and mailbox interrupt. Similar sequence needs to be applied by    user in the ISR to all other possible interrupt sources.    102    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.196    IVA2 Does Not Wake-up After It Goes to IDLE While an Interrupt Line Is Not    Cleared    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The POWERVR SGX Bus interface contains an MMU address translation function which    works on 4KB page allocations. The page table entries are setup and located in external    DRAM memory and are fetched on demand as requests are made, there is a cache    within the POWERVR SGX which keeps the most recently used entries. When an    internal requester makes a request in virtual space the address is tested with the cached    entries.    If there is a hit then the physical high order address bits are returned and combined with    the lower address bits of the virtual address bits to form the external physical address    access.    If there is a cache miss then the MMU must make an external fetch to memory to update    the on chip cache, when this memory fetch completes the original memory access can    proceed.    The POWERVR SGX has 7 parallel memory request sources that feed into the MMU    translation logic, so at any one time there can be a maximum of 7 parallel request    sources that can all exhibit a page miss at the same time. The MMU contains a 3 bit    counter to keep track of cache-miss requests (7 requesters).    However there are scenarios where the request sources generate multiple cache    miss-requests causing the 3 bit counter to overflow and miss service requests. Ultimately    multiple passes through normal and miss phases together with various contributing    memory latency can result in the counter not returning to zero and the MMU will lockup    in the MMU miss phase. This will block all further accesses and the core will lock up.    This could result in lock up of the POWERVR SGX image processing pipeline and may    result in system hang.    	 :    If the core is forced to an idle state (in terms of TA and 3D processing) before a cache    invalidate is issued by setting , the occurrence of the lockup is substantially reduced.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    103    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.197    POWERVR SGXâ¢ : MMU Lockup on Multiple Page Miss    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When the USB OTG is physically connected to a host with a cable, and a software cold    reset is performed (PRM_RSTCTRL[2] RST_DPLL3), then the ULPI link with the PHY    may get stuck. The PHY state machines go into an unknown state.    Root cause: During the relock time of the DPLL3 following the cold reset, the system    clock (or system clock divided by 2) is the L3 clock provided to all modules (including the    USB OTG module).    At the same moment the USB OTG HW automatically sends ULPI commands to the    PHY.    The conjunction of sending ULPI commands while the DPLL is not yet locked can    potentially end up in timing violations in the PHY.    The probability for this failure to occur is very low for the following reasons:    â¢    A SW cold reset must be performed, which is not supposed to happen during run    time.    â¢    The device embedding OMAP needs to be connected with a cable to a host when the    cold reset happens.    â¢    Even if these conditions are met, experiments have shown that the timing violation    will likely occur once every several thousand cold resets.    	 :    Turning off USB_V1P8 LDO before issuing the software cold reset will eliminate the    issue by turning off the ULPI clock at boot    104    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.198    HS USB OTG: ULPI LINK Possibly Sticks After DPLL3 SW Reset if USB Cable    Stays Connected    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When the USBHOST module is set to smart-standby mode, and it is ready to enter the    standby state (i.e., all ports are supported and all attached devices are in suspend    mode), it may incorrectly assert the Mstandby signal too early while there are ongoing    residual OCP transactions.    If this condition occurs, the internal state machine may go to an undefined state and the    USB link may be stuck upon the next resume.    	 :    The software should explicitly disable (pause) the USB HOST OCP initiator activity by    disabling the schedules (USBCMD[5]ASE = 0, USBCMD[4]PSE=0) just before    suspending the connected ports and restoring their state after the USBHOST has    entered smart-standby state.    Software workaround sequence:    â¢    Read USBCMD register and save it;    â¢    Clear USBCMD[5]ASE and USBCMD[4]PSE bits;    â¢    Wait for the USBSTS[15]ASS and USBSTS[14]PSS bits to reflect this change;    â¢    Suspend the connected ports;    â¢    Wait for the ports suspend to take effect (~3ms);    â¢    Restore the USBCMD register    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    105    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.199    USB Host EHCI May Stall When Exiting Smart-standby Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The USB host module is AHB native. Therefore, there is an AHB2OCP bridge allowing    to connect it to the OCP L3 interconnect.    Both AHB and OCP masters are able to generate single accesses (R/W) as well as    bursts, depending on the configuration, as well as address ranges.    Under some specific L3 latency conditions, when a USB host write is followed by a USB    host single read (not burst read), then the read can be lost in the AHB/OCP bridge.    When this happens, the internal state machines of the module go into an undefined state    and the EHCI stalls; ongoing transfers are stopped, and new transfers cannot be    scheduled anymore.    This situation will only occur when both following conditions happen simultaneously:    â¢    The module is performing a write followed by a single AHB read.    â This can happen when processing control messages (Transfer descriptions in    memory are updated (written) by the host when being processed and an 8-byte    command is fetched by the host (2 single AHB reads))    â This can also happen for any OUT transfer (bulk, isochronous, interrupt)    depending on data payload size and maximum Tx packet size parameter    (TxMaxP)    â¢    Congestion peaks occur in the system, generating back pressure at the host    boundary with the interconnect    â This can typically happen when high priority initiators like Display Subsystem    and/or Camera are running heavy use cases in parallel of USB transfers.    This issue does not impact IN transfers.    	 :    Define ((payload size) modulo (MaxP size)) >=16 bytes. If ((payload size) modulo (MaxP    size))< 16 bytes, then dummy data can be added to the buffer in order to achieve    ((payload size)modulo (MaxP size)) >= 16 bytes.    However this is not always possible, typically for control transfers, for which payload size    is fixed to 8 bytes.    In this case, it is only possible to reduce the failure occurrence by:    â¢    removing un-necessary control commands (like get_device_state upon suspend exit)    â¢    avoiding enumeration during peak-bandwidth demanding use cases    Once the issue has occurred, the only way to recover will be to reset the USB host    module and re-enumerate.    106    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.200    USB Host EHCI May Stall When Running High Peak-Bandwidth Demanding Use    Cases    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    If the OTG module is in SmartStandby Mode ( OTG_SYSCONFIG.MIDLEMODE = 0x2)    when an OTG DMA channel is enabled ( DMA_CNTL.DMA_EN) very near a USB    SUSPEND condition, the MStandby signal may assert while there is residual OCP traffic    initiated by the DMA. This illegal traffic causes the OTG DMA to stall.    	 :    Ensure the module cannot enter standby mode while DMA transfers are active.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    107    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.201    USB OTG DMA May Stall When Entering Standby Mode    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    This occurs when the DPLL3 is in Manual Lock mode    (CM_AUTOIDLE_PLL[AUTO_CORE_DPLL] = 0).    Due to a wrong isolation cell on the dpll3clkon signal between CM and PRM (TIE-LOW    implemented instead of ISO_LATCH), the DPLL3 Lock state signal is not taken into    account by the PRM when CORE goes OSWR (Open Switch Retention) or to the OFF    state. Consequently, the PRM will consider that the DPLL3 is not locked and the DPLL3    input clock will be stopped.    Impacts:    â¢    CORE OSWR mode: DPLL3 cannot be kept Locked when CORE OSWR state if    DPLL3 is set in Manual Lock mode    â¢    CORE OFF mode: Architecture will not support a transition to OFF mode if DPLL3 is    set in Manual Lock mode    	 :    CORE OSWR and CORE OFF mode: DPLL3 must be set to Automatic mode when    CORE goes to CORE OSWR or OFF state. However, DPLL3 will need to relock after    Wakeup.    108    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.202    DPLL3 in Manual Lock Mode Cannot be Used When CORE Goes to OSWR or OFF    State    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When internal SWAKEUP event occurs while CORE DPLL is going to bypass, PRCM    may report that DPLL3 is locked when it is not. This is due to a timing path of an internal    signal that is not fitting into one L3 clock cycle. In that case, PRCM DPLL control FSM    deasserts the SDRC_IDLEREQ signal before DPLL3 Lock state is set. The consequence    is that SDRC is released from IDLE with bypass clock (which is too low), instead of the    locked frequency. DLL may or may not lock based on Process Voltage Temperature    conditions.    This issue is seen when DPLL3 Automatic mode is enabled:    CM_AUTOIDLE_PLL[AUTO_CORE_DPLL] = 1 or = 5.    	 :    Case 1: Initialization (Device boot up)    â¢    Disable DPLL3 automatic mode by default    (CM_AUTOIDLE_PLL[AUTO_CORE_DPLL] = 0)    â¢    This issue will not be faced since DPLL3 is always locked    Case 2: Before CORE Voltage Domain Sleep Trasition to RETENTION or OFF mode    After Disabling Smart Reflex:    â¢    Reduce DPLL3 M2 Frequency to get L3 running at OPP2 Frequency (by changing    M2 Divider value). This is increasing the period duration of one L3 clock cycle.    â¢    Increase CORE Voltage to 1.2V. This is reducing the timing duration of the critical    path signal, which will now fit to one L3 clock cycle.    â¢    Enable DPLL3 Automatic Stop mode. This will ensure proper transition to    RETENTION or OFF mode.    In summary, L3 = OPP2 + VDD2 = 1.2V combination must be used:    â¢    If OPP3 (L3=166 MHz, VDD2=1.15V):    â Lower the frequency to 83MHz    â Increase CORE Voltage to 1.2V    â Enable DPLL3 Automatic Stop mode    â¢    If OPP2 ( L3=83MHz, VDD2=1.05V):    â Keep the frequency as it is (83MHz)    â Increase CORE Voltage to 1.2V    â Enable DPLL3 Automatic Stop mode    Case 3: After CORE Voltage Domain Wakeup Transition from RETENTION or OFF    mode    Before Enabling Smart Reflex:    â¢    Disable DPLL3 Automatic mode    â¢    Restore previous DPLL3 M2 Frequency and CORE Voltage values    Notes for all cases:    â¢    Case 2 and Case 3 must be executed if there is a Voltage Domain transition. These    cases cannot be executed if only a Power Domain transition is targeted.    â¢    Due to another bug (See ), the following two scenarios must to taken into account:    â Target state is OSWR and voltage transitioning is happening: Case 2 and Case 3    can be applied.    â Target state is OSWR and voltage transitioning does not happen: Case 2 and    Case 3 cannot be applied; Target state must be changed from OSWR to CSWR.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    109    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.203    PRCM DPLL Control FSM Removes SDRC_IDLEREQ Before DPLL3 Locks    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    After Peripheral Power Domain (PER-PD) is woken up from the OFF/OSWR state while    Core Power Domain (CORE-PD) is kept active, write or read access to some internal    memory (UART3 FIFO and sidetone memory inside McBSP2/3) does not work correctly.    This leads to a corruption of transmit or receive data of UART3, or output from    McBSP2/3 sidetone modules. Other logics behave properly.    The cause of the issue is that memory control logic of UART3 FIFO and McBSP2/3    sidetone memory are not reset and remain uninitialized when PER-PD is woken up from    OFF or OSWR state. The logics are properly reset when CORE-PD is coming back from    OFF/OSWR state. They also get reset by warm-reset, but are not reset by a module    level software reset.    	 :    Do not allow PER-PD to go to OSWR/OFF as long as Core-PD is not switched to    OFF/OSWR.    When both CORE-PD and PER-PD goes into OSWR/OFF, PER-PD should be brought    to active before CORE-PD. This can be done by configuring a wakeup dependency    between PER-PD and WKUP-PD (PM_WKDEP_PER.EN_WKUP = 0x1) so that    CORE-PD and PER-PD will wake up at the same time.    Even with the above configuration, there is a small possibility that on transition to OFF    mode, a wakeup event is generated at a time when PER-PD entered OFF/OSWR but    CORE-PD is not. This timing window is very small (about 8 Âµs at most), but to ensure    the correct operation in this corner case, this procedure is recommended. After waking    up from CORE OFF/OSWR configuration:    â¢    Check this condition to see if the previous Core-PD transition to OFF/OSWR was    aborted (thus not actually reached OFF/OSWR state)    PM_PREPWSTST_PER[1:0].LASTPOWERSTATEENTERED = 0x0 (PER domain    was previously OFF)    PM_PREPWSTST_CORE[1:0].LASTPOWERSTATEENTERED = 0x3 ( CORE    domain was previously ON)    â¢    If this corner case is detected, check the UART3 FIFO and/or McBSP2/3 sidetone    functionally using their internal loopback features.    For UART3 the internal loop back mode can be enabled by    MCR_REG[4].LOOPBACK_EN    For McBSP2/3 sidetone feature, digital loop back can be used. Two different words    should be used (typically 0x55.. and 0xAA..) in the loop back test to confirm correct    behaviour    â¢    If error is detected by the above loopback tests, execute one of recovery sequences:    â Generate warm-reset    â Put the Core-PD and PER-PD to OSWR/OFF    110    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.204    PER Domain Reset Issue After Domain-OFF/OSWR Wakeup    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    When using McBSP in Slave mode and doing Power management (McBSP going to    IDLE state), if the external CLKX clock is not provided by external peripheral component,    McBSP cannot exit IDLE state. The consequence is that McBSP registers cannot be    accessed anymore (except MCBSPLP_STATUS_REG[CLKMUXSTATUS] register).    There is similar limitation on the CLKR when module is configured as a receiver.    	 :    These workarounds are still valid by replacing CLKX by CLKR. There are three possible    workarounds to avoid this situation.    Workaround 1:    Don't use the power management features of McBSP (SIDLEMODE field in    MCBSPLP_SYSCONFIG_REG register set to NO-IDLE all the time).    The impact of this workaround is that as McBSP transition to IDLE is avoided    (SIDLEMODE=NO-IDLE), PRCM cannot transition the chip to Low Power mode.    Workaround 2:    Keep external CLKX clock always running during application (for example during an    Audio Playback):    â¢    At the beginning of the application (e.g. Audio Playback), keep CLKX always running    by setting the external peripheral component register accordingly    â¢    At the end of the application (e.g. Audio Playback), unload McBSP2 drivers and set    XRST bit from SPCR2 to 0. Then stop CLKX in software (by setting external    peripheral component register accordingly).    The impact of this workaround is that the serial clock is kept active during whole    application (e.g. Audio Playback).    Workaround 3:    If SIDLEMODE is used (at some value other than NO-IDLE), ensure McBSP registers    can be accessed by reading/polling the MCBSPLP_STATUS_REG[CLKMUXSTATUS]    register. If registers can not be accessed (CLKMUXSTATUS=1), take corrective actions    in software, such as (re)enabling CLKX.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    111    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.205    McBSP Used in Slave Mode Can Create a Dead Lock Situation When Doing Power    Management    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    The state of SGX FCLK is not considered in a DPLL3 bypass condition, so DPLL3 can    be put in bypass mode even if SGX FCLK is still active, causing an unexpected SGX    FCLK frequency drop. There is no issue when the SGX FCLK source is DPLL4    (Selected through CM_CLKSEL_SGX).    	 :    There are two possible workarounds. The recommendation is to use Workaround #1, as    it is more efficient in term of power consumption.    Workaround #1: Clear the CM_AUTOIDLE_PLL[AUTO_CORE_DPLL] bit (that is, Auto    Control Disabled) when SGX FCLK is enabled (CM_FCLKEN_SGX[EN_SGX]='1') and    set it back to the expected automatic PRCM control configuration when SGX FCLK is    disabled. With this workaround, L3 gating will still be possible while DPLL3 is kept in    locked state.    Workaround #2: DPLL3 can be forced to stay in a locked state by enabling L3 interface    clock for SGX (CM_ICLKEN_SGX[EN_SGX]='1'). However, this will be less efficient in    terms of power consumption as the L3 clock tree is enabled.    112    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.206    DPLL3 Bypass Condition Does Not Consider State of SGX FCLK    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    In SCCB mode, if the XRDY/RRDY are not served during the address phase, the    module starts to hold the bus by keeping SCL low (FIFO empty or full). Then, after    serving these interrupts, the module does not continue the current transfer and blocks in    this state.    This bug appears only in applications where the module is used in SCCB mode. The bug    is not appearing at all if interrupts are served before the address phase starts quickly    enough to avoid entering this context.    	 :    None.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    113    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.207    I2C: In SCCB Mode, Under Specific Conditions, the Module Might Hold the Bus by    Keeping SCL Low    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Expected behavior: The scenario occurs when the IDLEREQ is sent after serving an    interrupt/DMA and system clock period is higher than ocp clock period (at least two times    higher) and prescaler value > 4 (internal clock is sysclk/(PSC+1)). If there is no other    interrupt or DMA request, the module enters the IDLE state and exits this idle with a    wakeup generated from some event.    Observed behavior: A spurious wakeup is asserted and maintained while no IRQ/DMA    request is generated once the module is brought out of idle.    	 :    If sysclk period and ocpclk period values are close, the prescaler PSC value of the    I2C_PSC register should be programmed to any value less than or equal to 4. For higher    values, bug may happen. There is no issue for prescaler value PSC = 1 (i.e. High    Speed).    114    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com 	  3.1.1.208    I2C: Spurious Wakeup Event When sysclk Period is Higher Than ocpclk Period    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Expected behavior: Before starting a new transfer from another I2C device, one byte of    data is written to TX FIFO. The module is addressed on a 10 bit address as a Slave    transmitter (one of his addresses) and I2C clock blocking is enabled. After a repeated    start condition SBLOCK is activated again for the second part of the address.    Observed behavior: Given the addressing and SBLOCK conditions defined above, if the    data put in FIFO has its MSB 0, the module makes a glitch on the SDA bus on the    eighth bit (SDA is set to 0 for a short period) which can be interpreted as an illegal    start/stop condition.    	 :    The scenario described is a corner case and it may very seldom happen in applications.    To avoid the situation, before a transfer is started on the I2C bus, all interrupts should    have been cleared (part of the guideline given in the spec), or when I2C is a transmitter,    no data should be placed in the FIFO without receiving the request to do so from the    slave.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    115    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.209    I2C: Wrong Behavior When a Data With MSB 0 is Put in the FIFO Before a Ttansfer    with SBLOCK is Started    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    Expected behavior: After a transfer on the I2C bus, where the module lost the arbitration    during the address phase, a new transfer as a Master is programmed in I2C_CON by    setting MST bit to 1, having the start bit STT in the I2C_CON register still unset. The    STT bit can be set after a significant delay to point to the moment in which the transfer    starts on the I2C bus. The module should only start the transfer on I2C after setting this    STT start bit in I2C_CON.    Observed behavior: The module starts the transfer on I2C before setting STT and    immediately after setting the MST bit in the I2C_CON to 1.    	 :    The MST and STT bits inside I2C_CON should be set to 1 at the same moment (avoid    setting the MST to 1 while STT = 0).    116    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    www.ti.com    	  3.1.1.210    I2C: After an Arbitration Lost the Module Starts Incorrectly the Next Transfer    		 Cortex-A8
 :    3.1.2 and earlier    	 TI	 OMAP-3530	 :    If a 4-cycle instruction that can saturate is writing back its result in the same cycle as a    2-cycle instruction that can saturate, only the saturation condition for the 4-cycle    instruction is recorded in the CSR.SAT bit and SSR.M1 or SSR.M2 control registers. In    other words, if the 4-cycle instruction does not saturate, but the 2-cycle instruction does    saturate, the fact that the 2-cycle instruction saturated is lost and is not recorded in the    CSR.SAT and SSR.Mx bit-fields.    The list of 4-cycle instructions that can mask the 2-cycle saturation condition is:    â¢    SMPY32    â¢    CMPYR    â¢    CMPYR1    â¢    DDOTPH2R    â¢    DDOTPL2R    The list of 2 cycle instructions that can set the saturation flags are:    â¢    SMPY    â¢    SMPYLH    â¢    SMPYHL    â¢    SSHVL    â¢    SSHVR    Note that the 2 cycle instruction must be started 2 cycles after the 4 cycle instruction in    order for the conflict situation to occur. For example:    CMPYR .M1 A0,A1,A2    NOP    SSHVL .M1 A8,A9,A10    If the CMPYR instruction does not saturate, the saturation status of the SSHVL    instruction will not be recorded. Note also that the 2 cycle and 4 cycle instructions must    be issued on the same .M unit for this interference to occur. If the SSHVL instruction    were on the .M2 unit, the saturation bit would be recorded correctly.    	 :    Workaround is to make sure that no code has scheduled any of the instructions from the    4-cycle list to write back in the same cycle as the instructions in the 2-cycle list.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    117    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    	  3.1.1.211    4-cycle Saturating .M Unit Instructions May Mask 2-cycle Saturating. M Unit    Instruction Saturation Bit Update    		 Cortex-A8
 :            3.1 and earlier      	 TI	 OMAP-3530	" :      CASE A: When entering OFF_MODE, if a wake-interrupt is received in a specific    window (3 sysClk cycles wide), a cold reset could be generated.    CASE B: When device goes to OFF mode without hitting caseA already described, a    cold reset could be generated while device is waking-up (precisely during Efuse    sensing). The timing of the WU event is not playing any role on the occurrence of the    issue (No case-B window). Case-B issue is related only with the WU from OFF    sequence which is a pure HW sequence.    During wake-up from OFF-MODE, PRCM (PRM logic) is not protected from efuse bits    toggling during EFUSE-bit shifting.    Exposed window duration:    â¢    600 last bits of the fuse chain in CASE B    â¢    Entire efuse chain (~2500 short sensitive window)    The failure depends on Fuse content. Any transition '1-'to-'0' or ""0'-to-'1' during efuse    shifting can cause a cold reset then a downgrade of OMAP35xx depending on value    detected during the shifting.    The failure also depends on SysClk frequency. The sysClk frequency defines what bits    of the fuse chain will be detected.    "	 :    There is no workaround for CASE A, but probability of occurrence is very low because    the interrupt should happen during a 3-system clock cycles window while the system is    transitioning to OFF mode.    The signature of the occurrence of CASE A is OMAP3530/25 rebooting in 3515/03    mode. This can be detected through the CM_CLKSEL_SGX register which becomes    read only. In this case, the system can only recover through a power on reset.    The workaround for case B consists of enabling the TLL Save and Restore mechanism:    set PM_PWSTCRTL_CORE:SAVEANDRESTORE to 0x1. Setting this bit is sufficient;    there is no need to enable OMAP3530 TLL or USB module clocks either. Enabling this    bit will change the HW sequence of events executed upon wake up from OFF mode,    thus avoiding the condition for this issue.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    121    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            Silicon Revision 3.0 Usage Notes and Known Design Exceptions to Functional Specifications    www.ti.com    4    Silicon Revision 3.0 Usage Notes and Known Design Exceptions to Functional    Specifications            4.1      Usage Notes for Silicon Revision 3.0      Usage Notes highlight and describe particular situations where the device's behavior may not match presumed or documented behavior. This may include behaviors that affect device performance or    functional correctness. These notes will be incorporated into future documentation updates for the device (such as the device-specific data manual), and the behaviors they describe will not be altered in future silicon revisions.    Note: The peripherals supported on the various OMAP35x Application Processors are different. The user should only refer to usage notes and advisories pertaining to features supported on the specific device.    For a complete list of the supported features of the OMAP35x Application Processors, see the    device-specific data manuals.    Some silicon revision 3.0 applicable usage notes have been found on a later silicon revision. For more details, see Section 2.1, Usage Notes for Silicon Revision 3.1.    4.1.1    Display Controller Subsystem (DSS): Limitations Exist When Generating Horizontal and Vertical Timings    On OMAP35x Applications Processor silicon revisions 3.0 and earlier, the display controller registers that control horizontal and vertical output timings (HBP, HFP, HSW, etc.) are not flexible enough to generate waveforms/timings required by some video display standards such as those of the Video Electronics Standards Association (VESA). Table 6 below describes which register fields are used to control the vertical and horizontal output timings, the current register field widths, and the required register field widths.    Table 6. Display Controller Horizontal and Vertical Timing Control Register Fields    Field Name    DSS Register Field    Field Width (Bits)    Required Width (Bits)    HBP    DISPC_TIMING_H[27:20]    8    12    HFP    DISPC_TIMING_H[15:8]    8    12    HSW    DISPC_TIMING_H[5:0]    6    8    VPB    DISPC_TIMING_V[27:20]    8    12    VFP    DISPC_TIMING_V[15:8]    8    12    VSW    DISPC_TIMING_V[5:0]    6    8    4.1.2    Camera ISP: IIR Filters in Auto Focus (AF) Engine Should Only Be Used for Auto-Focus    On OMAP35x Applications Processor silicon revisions 3.0 and earlier, the AF engine IIR filters should only be used for auto-focus purposes. Any other use for the IIR filters is not supported.    4.1.3    High-Speed USB Host Subsystem: Some Limitations Exist When Connecting to External Devices    On OMAP35x Applications Processor silicon revisions 3.0 and earlier, as shown in Figure 11, the OMAP35x device includes a high-speed universal serial bus (USB) OTG controller and a high-speed USB    host subsystem.    Note: USB Port 3 is not available on CUS package.    122    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    Silicon Revision 3.0 Usage Notes and Known Design Exceptions to Functional Specifications    Device    High-speed USB    OTG controller    Port0    Port1    High-speed    USB    host subsystem    Port2    Port3    Figure 11. OMAP35x USB Modules    The high-speed USB OTG controller supports a single USB port which uses a UTMI low-pin interface (ULPI) to connect to an off-chip transceiver (12-pin/8-bit single-data rate mode). As shown in Figure 12, USB Port 0 can be connected to the USB 2.0 PHY included in OMAP35x companion chips, e.g.    TPS69xxx. Alternatively, USB Port 0 can be connected to discrete USB 2.0 PHYs which include a UTMI low-pin interface (ULPI) and are capable if sourcing an output clock.    OMAP    12/8-pin ULPI    (PHY Outputs Clock)    USB PHY    USB OTG    Port0    Companion    OTGController    Chip    OMAP    12/8-pin ULPI    (PHY Outputs Clock)    USB OTG    OTG/HS/    Port0    FS/LS    Discrete PHY    OTGController    Figure 12. Typical Uses for USB Port 0    As shown in Figure 13, the high-speed universal serial bus (USB) host subsystem supports up to three USB ports, each one of which can owned by one of two controllers:    â¢    The EHCI controller, based on the Enhanced Host Controller Interface (EHCI) specification for USB    Release 1.0, is in charge of high-speed traffic (480M bit/s) over either a UTMI port or a UTMI low-pin interface (ULPI) port.    â¢    The OHCI controller, based on the Open Host Controller Interface (OHCI) specification for USB    Release 1.0a, is in charge of full-speed/low-speed traffic (12/1.5M bit/s, respectively) over a serial interface.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    123    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            Silicon Revision 3.0 Usage Notes and Known Design Exceptions to Functional Specifications    www.ti.com    Both the OHCI and EHCI controllers can operate in parallel. Each of the three USB ports is owned by exactly one of the controllers at any time. Also, when a controller uses the UTMI port, the USB TLL block converts that port to a ULPI transceiver-less link logic (TLL) format.    Please note the following functional limitations when using the high-speed USB host subsystem:    â¢    On silicon revision 3.0 and earlier, if one port is configured in the ULPI mode, then all other ports must use the same configuration. Therefore, the ports must be configured high-speed mode or    full-speed/low-speed mode.    â¢    USB Port 3 cannot operate in ULPI mode; it can only operate in serial or ULPI TLL mode.    Furthermore, USB Port 3 is not available in the CUS package.    Device    High-Speed USB Host subsystem    USBTLL    L4 Interface clock    USBTLL_ICLK    Functional clock    USBTLL_FCLK    High-speed USB Host    controller    PRCM    L3 master interface    US    U B    S H    B O    H S    O T    S _MICLK    clock    HS USB Host I/F pins    L4 slave interface    mu    USBHOST_SICLK    T    clock    Channel 2    ltip    o    mm3_xxx    UTMI    p    ULPI TLL    Functional clock    le    le    US    U B    S H    B O    H S    O T    S _FCLK1    3    ve    xin    Serial    Serial    l    hsusb3_tll_xxx    g    Functional clock    USBHOST_FCLK2    OHCI    controller    Channel 1    mu    mm2_xxx    UTMI    ULPI TLL    T    ltip    op    OHCI_IRQ    Serial    le    Serial    le    hsusb2_tll_xxx    2    ve    xin    l    g    hsusb2_xxx    ULPI    ULPI    MPU    Interrupt requests    EHCI    subsystem    controller    INTC    Channel 0    mu    mm1_xxx    UTMI    ULPI TLL    T    ltip    op    Serial    le    le    EHCI_IRQ    Serial    hsusb1_tll_xxx    1    ve    xin    L3    l    g    ULPI    ULPI    hsusb1_xxx    interconnect    L4-Core    TLL_IRQ    interconnect    usb-007    Figure 13. High-Speed USB Host Subsystem Highlight    As shown in Figure 14, USB Port 1 and Port 2 can be used to connect to external high-speed PHYs which include a ULPI port. However, in this case, the external USB PHY must be able to accept a source clock generated by the OMAP high-speed USB controller. Also, in this usage model the USB ports cannot    support full-speed and low-speed operation. Therefore, using this approach, USB Port 1 and Port 2 cannot provide a fully compliant USB 2.0 Type-A receptacle; a high-speed USB hub would be required in this case; please see Figure 15.    Note: USB Port 3 does not support ULPI mode. USB Port 3 is not available on CUS package.    124    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    Silicon Revision 3.0 Usage Notes and Known Design Exceptions to Functional Specifications    OMAP    ULPI HS    12-pin ULPI    (A)    (OMAP Outputs Clock)    PHY    Port1    12-pin ULPI    ULPI HS    (OMAP Outputs Clock)    (A)    Port2    PHY    Not Available    HSHostController(EHCI)    Port3    A. USB port 3 does not support ULPI mode.    Also, USB port 3 not available on CUS package.    Figure 14. Connecting to High-Speed PHYs Using USB Ports    OMAP    ULPI HS    HS/FS/LS    12-pin ULPI    PHY    Device or    (OMAP Outputs Clock)    Port1    Receptacle    HS/FS/LS    12-pin ULPI    Not Used    Device or    (OMAP Outputs Clock)    Port2    HS USB    Receptacle    HUB    HS/FS/LS    Not Available    Device or    Port3    Receptacle    A. USB port 3 does not support ULPI mode. Also, USB port 3 not available on CUS package.    Figure 15. Connecting to a High-Speed USB Hub    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    125    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            Silicon Revision 3.0 Usage Notes and Known Design Exceptions to Functional Specifications    www.ti.com    4.2    Silicon Revision 3.0 Known Design Exceptions to Functional Specifications    Some silicon revision 3.0 applicable advisories have been found on a later silicon revision. For more details, see Section 3.2, Silicon Revision 3.1 Known Design Exceptions to Functional Specifications.    Table 7. Silicon Revision 3.0 Advisory List    Title ......................................................................................................................................    Page    	  3.1.1.165    Unexpected Cold-Reset Is Generated When Device Is Coming Back from OFF    Mode    		 Cortex-A8
             3.0      	 TI	 OMAP-3530	       Due to a DPLL integration issue, leakage is detected on VDDS_DPLL_DLL (MPU/IVA)    and VDDS_DPLL_PER (per DPLLs) rails when DPLL is placed in low-power stop mode.    This issue is due to DPLL going to fast relock mode instead of going to low-power stop    mode.    Notes:    â¢    Device OFF mode and CORE DPLL are not impacted.    	     There is currently no workaround in place, but under evaluation, this section will be    updated.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    127    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  3.0.1.137    DPLL Leakage When Placed in Low-Power Stop Mode    		 Cortex-A8
             3.0 and earlier      	 TI	 OMAP-3530	       When Vpp is increased to 2.2V to program the CPFROM bits, the in-rush peak current    observed on the Vpp line can slew up to more than 250mA in the first ~400ms.    Note: This is a preliminary measurement, and additional characterization is in progress.    This issue will only affect OEMs using CPFROM bits, and confirmation regarding    whether the Vpp supply rail from PMIC can support the in-rush current transient is    pending.    	     There is no workaround for this issue.    128    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  3.0.1.138    CPFROM In-Rush Current Issue    		 Cortex-A8
             3.0 and earlier      	 TI	 OMAP-3530	       When OMAP35x goes to OFF mode, a wakeup event can be missed.    While transitioning to OFF mode, a window existing between GPIO (in peripheral    domain) going to OFF and the IO wakeup chain is activated:    â¢    For a 19.2MHz system clock, this window is 4Îs, in which a wakeup event can be    missed    â¢    Impacts all device GPIOs except for GPIOs from GPIO block 1: GPIO_[31:0]    This does not impact a wakeup event connected to the wakeup domain.    	     Use a GPIO from block 1 to trigger an OFF Wakeup event.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    129    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  3.0.1.151    Missed Wake-up Event When Going Into OFF Mode    		 Cortex-A8
             3.0 and earlier      	 TI	 OMAP-3530	       The USB TLL Save-And-Restore (SAR) + USBHOST TLL locks up system during    CORE_OFF and suspend to RAM. A hardware issue in the TLL block causes a deadlock    during the automatic hardware context saving of the TLL block. On second hardware    SAR, the save mechanism does not function as expected; this is causes a lock-up in the    SAR.    This issue impacts the OHCI TLL, PHY, and EHCI TLL modes. This does not impact HS    PHY mode.    	     There is no workaround for EHCI mode (HS TLL).    OHCI (FS TLL or FS PHY modes) : In OHCI mode, software Context / Restore is    functional and will be integrated as part of mainline releases. This is a full workaround    for the hardware issue.    130    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    Silicon Revision 2.1 Usage Notes and Known Design Exceptions to Functional Specifications    5    Silicon Revision 2.1 Usage Notes and Known Design Exceptions to Functional    Specifications    This section describes the usage notes and advisories that apply to silicon revision 2.0 of the OMAP35x Applications Processor.    Note: The peripherals supported on the various OMAP35x Applications Processor devices are different.    The user should only refer to usage notes and advisories pertaining to features supported on the specific device. For a complete list of the supported features of the OMAP35x Applications Processor, see the device-specific data manuals.            5.1      Usage Notes for Silicon Revision 2.1      SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    131    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            Silicon Revision 2.1 Usage Notes and Known Design Exceptions to Functional Specifications    www.ti.com    5.2    Silicon Revision 2.1 Known Design Exceptions to Functional Specifications    Some silicon revision 2.1 applicable advisories have been found on a later silicon revision. For more details, see Section 4.2, Silicon Revision 3.0 Known Design Exceptions to Functional Specifications.    Table 8. Silicon Revision 2.1 Advisory List    Title ......................................................................................................................................    Page    	  3.0.1.152    USB TLL Save-and-Restore Issue    		 Cortex-A8
             2.1 and earlier      	 TI	 OMAP-3530	       Note: This issue only applies in cases where the sys_clkout1 pin of the OMAP35x    device is required during boot.    The SYS_BOOT[6] pin is not accessible via the register map, therefore the ROM code    cannot change the pad configuration according to the XTAL mode.    Furthermore, the clock is never provided to the SYS_CLKOUT1 pin and not propagated    to the companion chip, prohibiting the ROM code to accurately program the companion    chip for peripheral boot (USB or MMC boot).    	     No workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    133    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.1.1.120    Peripheral Boot Issue When Using External Crystal    		 Cortex-A8
             2.1 and earlier      	 TI	 OMAP-3530	       The length of the root key hash has been extended on the OMAP35x architecture.    During peripheral booting the ROM Code sends out an ASIC ID which - among other    information - contains also the root key hash. The length of this hash field in the ASIC ID    is correctly set to 20bytes but the 4 last bytes are all zero.    There is no known limitation as the root key hash field inside the ASIC ID is not    necessary for peripheral booting.    	     There is no workaround for this issue.    134    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.1.1.122    ROM Code: Incomplete ASIC ID    		 Cortex-A8
             2.1 and earlier      	 TI	 OMAP-3530	       The context restore procedure will fail if the On-Chip Memory (OCM) RAM is OFF after    wakeup.    The OCM RAM will be off after wakeup if bits MEM1ONSTATE and MEM2ONSTATE in    the PM_PWRSTCTRL_CORE register are set to OFF (0x0) before going to sleep.    	     The application software must make sure that the bits MEM1ONSTATE and    MEM2ONSTATE are set to ON (0x3) or RETENTION (0x1) before putting the CORE    domain to sleep. There is no need to set the MEMORYCHANGE bit in the same register.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    135    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.1.1.123    ROM Code: Context Restore Failure if OCM RAM Is OFF After Wakeup    		 Cortex-A8
             2.1 and earlier      	 TI	 OMAP-3530	       The multiple block read transfer, in polling and interrupt mode, does not work correctly    on MMC1 and MMC2. A Data CRC error is generated due to some corrupted data, when    the read buffer (two 512-bytes portions) of the MMC controller is full.    If the buffer is not free, the MMC controller stops the clock and the card stops to send    data to . The clock will be re-enabled only when one portion will be emptied and then the    transfer will restart. The output clock and data enable are generated on same internal    clock edge. The data enable signal must be re-asserted before the first clock edge of the    input clock (feedback clock) in order to sample the data correctly.    Hold buffers have been added on data enable signal that makes data enable arrival after    the first clock edge. It leads that the first data is not sampled on clock restart.    This issue depends on the pattern written and the output data width (1-, 4- or 8-bits    mode). For example, Pattern written: 0x2800, Pattern read: 0x0801.    No data are read by the MPU into the read buffer in order to fill the 2 portions. The data    enable signal is de-asserted and the output clock is disabled.    â¢    In 1-bit mode, the failure occurs on the second data of third block when the MPU    starts to read the data.    â¢    In 4-bits mode, the failure occurs on the third data of third block when the MPU starts    to read the data.    This issue is related to the integration of the IP and is not a functional bug. Therefore,    MMC3 is not impacted.    	     There is no workaround for this issue.    136    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.1.1.128    MMC: Multiple Block Read Operation Issue    		 Cortex-A8
             2.1 and earlier      	 TI	 OMAP-3530	       There is no functional impact, but there is leakage current of approximately 20mA from    SIM_VDDS to VDDS due to an isolation issue.    	     There is no workaround for this issue.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    137    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.1.1.135    Isolation Issue Between SIM_VDDS and VDDS    		 Cortex-A8
             2.1      	 TI	 OMAP-3530	       The CPU revision code register should return the same value for both ES2.0 and ES2.1    samples. However, the version of the cortexA8 core is incorrectly read. The results of    the read are shown in Table 9.    Table 9. CPU Revision Code Register Readings    EXPECTED READING    ACTUAL READING    ES2.0 Silicon ID    0x411fc081- r1p1    0x411fc081- r1p1    ES2.1 Silicon ID    0x411fc081- r1p1 + bug fixes    0x411fc082 - r1p2    	     There is no workaround for this issue.    138    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.1.1.141    CPU Revision Code Register Does Not Return Same Value for ES2.0 and ES2.1    Samples    		 Cortex-A8
             2.1 and earlier      	 TI	 OMAP-3530	       By default, the ROM Code is able to boot from MMC1, configured in 1 bit mode    interface. In case the booting image contains a Configuration Header which configures a    CHMMCSD section, the MMC1 interface can be configured in 8 bits mode. So the ROM    Code is supposed to be able to switch from 1bit bus width to 8 bits bus width at the    booting phase on MMC. The DAT4-DAT7 pins of MMC1 are powered by the MMC1a    power supply. The ROM Code does not turn ON this power supply.    Moreover, pad interface 3V power supply voltage stability is not checked and can lead to    booting instability.    Configuring the MMC1 interface at boot-time in 8-bit mode with a configuration header    should be avoided. Functionality seems OK but the absence of power supply may cause    an untimely ageing of IO pads.    	     There is no workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    139    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated    Silicon Revision 2.0 Usage Notes and Known Design Exceptions to Functional Specifications    www.ti.com    6    Silicon Revision 2.0 Usage Notes and Known Design Exceptions to Functional    Specifications    This section describes the usage notes and advisories that apply to silicon revision 2.0 of the OMAP35x Applications Processor.    Note: The peripherals supported on the various OMAP35x Applications Processor devices are different.    The user should only refer to usage notes and advisories pertaining to features supported on the specific device. For a complete list of the supported features of the OMAP35x Applications Processor, see the device-specific data manuals.            6.1      Usage Notes for Silicon Revision 2.0      Silicon revision 2.0 applicable usage notes have been found on a later silicon revision. For more details, see Section 5.1, Usage Notes for Silicon Revision 2.1.    6.2    Silicon Revision 2.0 Known Design Exceptions to Functional Specifications    Some silicon revision 2.0 applicable advisories have been found on a later silicon revision. For more details, see Section 5.2, Silicon Revision 2.1 Known Design Exceptions to Functional Specifications.    Table 10. Silicon Revision 2.0 Advisory List    Title ......................................................................................................................................    Page    	  2.1.1.145    ROM Code: MMC1 Interface Configured in 8 Bits Mode Is Not Recommended at    Boot Time.    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       The PRCM fails to release the MPU reset after a number of Global Warm Reset    iterations. This failure is random and can occur on any device type at any SYS_CLK    frequency (i.e., 12 MHz, 19.2 MHz, 26 MHz, etc). However, the issue only occurs when    DPLL3 (CORE DPLL) and DPLL4 (PER DPLL) are locked prior to generating a global    software warm reset. This issue is not seen when DPLL3 is configured in bypass or    locked mode and DPLL4 is in low-power stop mode before the Global Warm Reset has been applied.    Note: This issue affects all sources of Global Warm Reset (i.e,. global software warm    reset, watchdog timer reset, external global warm reset, IcePick warm reset, etc.).    	     Avoid Global software Warm Reset assertion or any source of Global Warm Reset while    both DPLL3 and DPLL4 are locked.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    143    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.0.1.80    Device Stalls After a Warm Reset    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       There is an incorrect signal connection to control the SDIv2 analog complex IO. As a    result, FlatLink3G mode is not functional. Other serial modes (CMADS 1000, 2000) are    not impacted.    	     There is no workaround for this issue.    144    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.0.1.82    SDI: Incorrect Control of SDI Analog Complex IO    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       After any Warm Reset, the chip will branch to secure ROM Code. Since the secure ROM    code does not exist on GP devices, the MPU will remain stuck in a loop. No debug can    be performed.    The ROM code does not correctly manage the different resets. For a Warm Reset, the    ROM code interprets the reset as a wake-up reset. The ROM code then tries to proceed    to the context restore, interpreting data stored in scratchpad memory. If the data stored    in scratchpad contains rubbish, the ROM code will attempt to restore them.    	     The scratchpad memory from physical address 0x48002910 to 0x480029FF must be    cleared by the application after a Power On Reset.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    145    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.0.1.104    ROM Code: MPU Is Stuck in Secure Mode After Warm Reset on GP Device    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       The VBUS detection timeout in ROM Code is too short (1ms) compared to the T2    debouncing time (30ms) which prevents the start of USB booting after board Power-On    Reset. The USB boot functions correctly on subsequent nRESPWRON since T2 holds    the VBUS status.    	     Apply a second nRESPWRON to the MPU. The feasability of this workaround depends    on the capability of the hardware.    146    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.0.1.105    ROM Code: VBUS Detection Timeout too Short    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       When using TPS69xxx PHY, USB peripheral booting is functional only with a 26MHz    system clock.    	     Use another PHY (ISP1504) or 26MHz clock frequency.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    147    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.0.1.106    USB: Peripheral Booting Dependent Upon System Clock Frequency    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       The internal RAM can be turned OFF, even when the chip is completely ON, running the    normal application. After a wake-up, the ROM code needs to access internal RAM. The    ROM code detects the RAM has been turned off and then tries to turn it on. This    operation is not performed correctly, causing the OCM RAM not to be turned ON. The    ROM code loops infinitely, waiting for the RAM to be ON.    	     Before applying any sleep mode, the application must ensure that the OCM RAM is    configured to be ON when the chip is ON.    148    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.0.1.108    ROM Code: OCM RAM Is Not Turned ON Correctly After Wakeup    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       The booting image can contain a configuration header that can enable the ROM code to    configure SDRC. When trying to configure the SDRC, the ROM code grabs a semaphore    that is stored in scratchpad memory, but this semaphore was not initialized at POR.    The value stored in this register may prevent the ROM code from booting or performing    wake-up reset when SDRC restoration is necessary.    	     To prevent any wake-up problem, the software must delete the semaphore content after    POR. However, there is no workaround to prevent any freeze at POR if a configuration    header is defined in the booting image.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    149    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.0.1.109    ROM Code: Semaphore Is Not Initialized in Scratchpad Memory    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       The booting image that is stored on the MMC can contain a software booting    configuration (SWBCFG) [a specific data header that is located just before the booting    code]. This SWBCFG is interpreted by the ROM code. The SWBCFG contains 2    important fields: MMC clock and MMC bus width. When setting the MMC bus width to 4,    or 8 bits, the ROM code may fail to boot on certain MMC or SD devices.    This failure depends on the MMC type. When switching to 4 or 8-bit bus width, the busy    signal (present on DAT0 line) is asserted by the MMC. Some MMC devices need more    than 100 Îs to be operational after having changed the bus width. After 60 Îs, the ROM    code tries to read data from MMC without checking the busy signal level, and the read    operation fails. MMC1 and MMC2 are impacted.    	     Use the MMC in 1-bit mode at booting phase.    150    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    SPRZ278F â February 2008 â Revised October 2010    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            www.ti.com    	  2.0.1.110    ROM Code: MMC Booting Using 4 /8-Bit Bus May Fail    		 Cortex-A8
             2.0      	 TI	 OMAP-3530	       Due to an integration issue (test signal not tied to the right value), a higher level than    expected of missed branch predictions are generated.    	     There is no workaround.    SPRZ278F â February 2008 â Revised October 2010    OMAP3530/25/15/03 Applications Processor â Silicon Revision 3.1.2    151    Submit Documentation Feedback    Copyright Â© 2008â2010, Texas Instruments Incorporated            	  2.0.1.114    Cortex-A8 r1p1 Exhibits Higher Level of Missed Branch Prediction    		 Cortex-A8
	 TI	 TPS65910	 :    The standard specifies that the I2C transfer should restart on a start event in all cases. The current design does not support two consecutive Start conditions. This can cause the first real access after such a glitch to be corrupted.     DescriptionJEEHEHRECONSTRUCT:    An unexpected glitch on SDA and SCL can generate a wrong start event. In the current design, the SCL    line must toggle two times to detect a new start event and completely restart the I2C access; hence the real start event is not detected in the case of a single SCL toggle.    	 :    Repeat I2C access.    2    TPS65910 Silicon Errata ES1.1    SWCZ010A â May 2011 â Revised January 2014    Submit Documentation Feedback    Copyright Â© 2011â2014, Texas Instruments Incorporated    www.ti.com    DCDC o/p voltage can go higher than programmed value    2 	     Glitch on SDA-SCL not managed correctly by the I2C IP    		 Cortex-A8
	 TI	 TPS65910	 :    VDDI, VDD2, and VIO output programmed voltage level can go higher than expected or crash, when coming out of PFM to PWM mode or using DVFS.     DescriptionJEEHEHRECONSTRUCT:    When DCDC CLK SYNC bits are 11/01:    â¢    VIO 3-MHz oscillator is the source clock of the digital core and input clock of VDD1 and VDD2    â¢    Turn-on of VDD1 and VDD2 HSD PFET is synchronized or at a constant phase shift    â¢    Current pulled though VCC1+VCC2 is I    (VDD1)+ I    (VDD2)    load    load    â¢    The 3 HSD PFET will be turned-on at the same time, causing the highest possible switching noise on the application. This noise level depends on the layout, the VBAT level, and the load current. The noise level increases with improper layout.    When DCDC CLK SYNC bits are 00:    â¢    VIO 3-MHz oscillator is the source clock of digital core    â¢    VDD1 and VDD2 are running on their own 3-MHz oscillator    â¢    Current pulled though VCC1+VCC2 average of I    (VDD1)+I    (VDD2)    load    load    â¢    The switching noise of the 3 SMPS will be randomly spread over time, causing lower overall switching noise.    	 :    Set DCDCCTRL_REG [1:0] = 00.    SWCZ010A â May 2011 â Revised January 2014    TPS65910 Silicon Errata ES1.1    3    Submit Documentation Feedback    Copyright Â© 2011â2014, Texas Instruments Incorporated            	     DCDC o/p voltage can go higher than programmed value    		 Cortex-A8
